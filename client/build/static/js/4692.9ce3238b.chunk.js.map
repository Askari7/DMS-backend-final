{"version":3,"file":"static/js/4692.9ce3238b.chunk.js","mappings":"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","sources":["view/pages/Protected.jsx","view/pages/projects/Progress.jsx","view/pages/projects/index.jsx"],"sourcesContent":["import { useSelector } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nconst ProtectedAppPage = () => {\n  const isLogIn = localStorage?.getItem(\"user\");\n  console.log(isLogIn, \"loggin\");\n  if (!isLogIn) {\n    return <Redirect to=\"/pages/authentication/login\" />;\n  }\n\n  return null;\n};\nexport default ProtectedAppPage;\n","import React from 'react';\nimport { Progress, Row } from 'antd';\n\nconst ProgressComp = ({ percentage }) => {\n  console.log('Percentage:', percentage);\n  \n  return (\n    <Row justify=\"center\" align=\"middle\" style={{ width: 180 }}>\n      <Progress percent={percentage} size=\"small\" />\n    </Row>\n  );\n};\n\nexport default ProgressComp;\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { DownOutlined } from '@ant-design/icons';\r\n\r\nimport {notification,\r\n  Button,Form,Row,Col,Space,Table,Select,Input,Dropdown,Menu,DatePicker,TimePicker,Modal,message,Checkbox,Upload,\r\n} from \"antd\";\r\nimport { RiCloseFill, RiCalendarLine } from \"react-icons/ri\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport ProtectedAppPage from \"../Protected\";\r\nimport { SearchOutlined } from '@ant-design/icons';\r\nimport Highlighter from 'react-highlight-words';\r\nimport ProgressComp from \"./Progress\";\r\nexport default function Projects() {\r\n\r\n  const [searchText, setSearchText] = useState('');\r\n  const [searchedColumn, setSearchedColumn] = useState('');\r\n  const searchInput = useRef(null);\r\n\r\n  const [progresses,setProgresses] = useState()\r\n  const [selectedDepartments, setSelectedDepartments] = useState([]);\r\n  const [departmentName,setDepartmentName] = useState('')\r\n  const [projectModalVisible, setProjectModalVisible] = useState(false);\r\n  const [permissionModalVisible, setPermissionModalVisible] = useState(false);\r\n  const [projName, setProjName] = useState(\"\");\r\n  const [projCode, setProjCode] = useState(\"\");\r\n  const [clientEmail, setClientEmail] = useState(\"\");\r\n  const [startedDate, setStartDate] = useState(\"\");\r\n  const [endedDate, setEndDate] = useState(\"\");\r\n  const [departmentId, setDepartmentId] = useState([]);\r\n  const [status, setStatus] = useState(\"\");\r\n  const [code, setCode] = useState(\"\");\r\n  const [user, setUser] = useState(JSON.parse(localStorage?.getItem(\"user\")));\r\n  const [data, setData] = useState([]);\r\n  const [dataArray, setDataArray] = useState([]);\r\n\r\n  const [departmentOptions, setDepartmentOptions] = useState([]);\r\n  const [departmentInfo,setDepartmentInfo] = useState([])\r\n  const [projectOptions, setProjects] = useState([]);\r\n  const [clients,setClients] = useState([])\r\n  const [projectId, setProjectId] = useState(\"\");\r\n  const history = useHistory();\r\n\r\n  const rowClickHandler=(record)=>{\r\n    history.push({\r\n      pathname: './mdr',\r\n      state: { selectedRecord: record },\r\n    });\r\n  }\r\n  const handleAll=()=>{\r\n    setData(dataArray)\r\n  }\r\n  const handleCompleted=()=>{\r\n    const completedData = dataArray.filter(item => item.status === 'completed');\r\n    setData(completedData)\r\n  }\r\n  const handleOnGoing=()=>{\r\n    const ongoingData = dataArray.filter(item => item.status === 'Ongoing');\r\n    setData(ongoingData)\r\n\r\n  }\r\n\r\n  const handleClose = ()=>{\r\n    console.log('closing');\r\n  }\r\n  const handleSearch = (selectedKeys, confirm, dataIndex) => {\r\n    confirm();\r\n    setSearchText(selectedKeys[0]);\r\n    setSearchedColumn(dataIndex);\r\n  };\r\n  const handleReset = (clearFilters) => {\r\n    clearFilters();\r\n    setSearchText('');\r\n  };\r\n\r\n  const getColumnSearchProps = (dataIndex) => ({\r\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters, close }) => (\r\n      <div style={{ padding: 8 }}>\r\n        <Input\r\n          ref={searchInput}\r\n          placeholder={`Search ${dataIndex}`}\r\n          value={selectedKeys[0]}\r\n          onChange={(e) => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n          onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n          style={{ marginBottom: 8, display: 'block' }}\r\n        />\r\n        <Space>\r\n          <Button\r\n            type=\"primary\"\r\n            onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n            icon={<SearchOutlined />}\r\n            size=\"small\"\r\n            style={{ width: 90 }}\r\n          >\r\n            Search\r\n          </Button>\r\n          <Button onClick={() => clearFilters && handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n            Reset\r\n          </Button>\r\n\r\n        </Space>\r\n      </div>\r\n    ),\r\n    filterIcon: (filtered) => (\r\n      <SearchOutlined style={{ color: filtered ? '#1677ff' : undefined }} />\r\n    ),\r\n    onFilter: (value, record) =>\r\n      record[dataIndex].toString().toLowerCase().includes(value.toLowerCase()),\r\n    onFilterDropdownOpenChange: (visible) => {\r\n      if (visible) {\r\n        setTimeout(() => searchInput.current?.select(), 100);\r\n      }\r\n    },\r\n    render: (text) =>\r\n      searchedColumn === dataIndex ? (\r\n        <Highlighter\r\n          highlightStyle={{\r\n            backgroundColor: '#ffc069',\r\n            padding: 0,\r\n          }}\r\n          searchWords={[searchText]}\r\n          autoEscape\r\n          textToHighlight={text ? text.toString() : ''}\r\n        />\r\n      ) : (\r\n        text\r\n      ),\r\n  });\r\n\r\n\r\nconst menu = (\r\n  <Menu>\r\n    <Menu.Item onClick={() => handleAll()}>All</Menu.Item>\r\n    <Menu.Item onClick={() => handleCompleted()}>Completed</Menu.Item>\r\n    <Menu.Item onClick={() => handleOnGoing()}>Ongoing</Menu.Item>\r\n  </Menu>\r\n);\r\nconst columns = [\r\n  {\r\n    title: \"Project Code\",\r\n    dataIndex: \"code\",\r\n    key: \"code\",\r\n    ...getColumnSearchProps('code'),\r\n  },\r\n  {\r\n    title: \"Project \",\r\n    dataIndex: \"title\",\r\n    key: \"title\",\r\n    ...getColumnSearchProps('title'),\r\n\r\n  },\r\n  {\r\n    title: \"Department \",\r\n    dataIndex: \"departmentTitle\",\r\n    key: \"departmentTitle\",\r\n    ...getColumnSearchProps('departmentTitle'),\r\n\r\n    // filters: [\r\n\r\n    //   {\r\n    //     text: 'Project Management',\r\n    //     value: 'Project Management',\r\n    //   },\r\n    //   {\r\n    //     text: 'Mechanical',\r\n    //     value: 'Mechanical',\r\n    //   },\r\n    //   {\r\n    //     text: 'Electrical',\r\n    //     value: 'Electrical',\r\n    //   },\r\n    //   {\r\n    //     text: 'Process',\r\n    //     value: 'Process',\r\n    //   },\r\n    // ],\r\n    // onFilter:  (value, record) =>record.departmentTitle === value,\r\n\r\n    \r\n  },\r\n  {\r\n    title: \"Client\",\r\n    dataIndex: \"clientName\",\r\n    key: \"clientName\",\r\n    ...getColumnSearchProps('clientId'),\r\n\r\n  },\r\n  // {\r\n  //   title: \"No of Users\",\r\n  //   dataIndex: \"noOfUsers\",\r\n  //   key: \"noOfUsers\",\r\n  // },\r\n  {\r\n    title: \"Start Date\",\r\n    dataIndex: \"startedDate\",\r\n    key: \"startedDate\",\r\n    sorter: (a, b) => {\r\n      const dateA = new Date(a.startedDate.split('/').reverse().join('/'));\r\n      const dateB = new Date(b.startedDate.split('/').reverse().join('/'));\r\n      return dateA - dateB;\r\n    }  },\r\n\r\n  {\r\n    title: \"Expected End Date\",\r\n    dataIndex: \"endedDate\",\r\n    key: \"endedDate\",\r\n    sorter: (a, b) => {\r\n      const dateA = new Date(a.endedDate.split('/').reverse().join('/'));\r\n      const dateB = new Date(b.endedDate.split('/').reverse().join('/'));\r\n      return dateA - dateB;\r\n    }  },\r\n  {\r\n    title: (\r\n      \"Status\"\r\n    ),\r\n    key: \"status\",\r\n    dataIndex: \"status\",\r\n\r\nfilters: [\r\n\r\n      {\r\n        text: 'Initialized',\r\n        value: 'Initialized',\r\n      },\r\n      {\r\n        text: 'Ongoing',\r\n        value: 'Ongoing',\r\n      },\r\n      {\r\n        text: 'Completed',\r\n        value: 'Completed',\r\n      },\r\n    ],\r\n    onFilter:  (value, record) =>record.status === value,\r\n  },\r\n  // {\r\n  //   title: \"Action\",\r\n  //   key: \"action\",\r\n  //   render: (_, record) => (\r\n  //     <Space size=\"middle\">\r\n  //       <a onClick={() => handleDelete(record)}>Delete</a>\r\n  //     </Space>\r\n  //   )\r\n  // },\r\n  {\r\n    title: \"Progress\",\r\n    key: \"percentage\",\r\n    render: (_, record) => (\r\n      <Space>\r\n        {record.percentage !== null ? (\r\n          <ProgressComp percentage={record.percentage.toFixed(1)} />\r\n        ) : null}\r\n      </Space>\r\n    )\r\n  }\r\n];\r\n\r\n  const handleStartDateChange = (date) => {\r\n    setStartDate(date);\r\n  };\r\n\r\n  const handleEndDateChange = (date) => {\r\n    setEndDate(date);\r\n  };\r\n  const fetchClients = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://54.81.250.98:8083/api/clients?companyId=${user?.user?.companyId}`,\r\n        {\r\n          headers: {\r\n            Authorization: user?.accessToken,\r\n          },\r\n        }\r\n      );\r\n  \r\n      // Use Set to store unique titles\r\n      const uniqueTitlesSet = new Set();\r\n  \r\n      const options = response?.data.reduce((acc, item) => {\r\n        // Check if the title is not in the Set\r\n        if (!uniqueTitlesSet.has(item.companyName)) {\r\n          // Add title to the Set\r\n          uniqueTitlesSet.add(item.com);\r\n  \r\n          // Push the option to the result array\r\n          acc.push({ value: item.id, label: item.companyName, name: item.companyName });\r\n        }\r\n  \r\n        return acc;\r\n      }, []);\r\n  \r\n      setClients(options); // Assuming the response.data is an array of projects\r\n    } catch (error) {\r\n      console.error(\"Error fetching departments:\", error?.message);\r\n    }\r\n  };\r\n\r\n  const projectModalShow = () => {\r\n\r\n    setProjectModalVisible(true);\r\n  };\r\n\r\n  const projectModalCancel = () => {\r\n    setCode(\"\");\r\n    setStatus(\"\");\r\n    setProjName(\"\");\r\n    setClientEmail(\"\")\r\n    setDepartmentName(\"\")\r\n    setDepartmentId([]);\r\n    setProjectModalVisible(false);\r\n  };\r\n\r\n  const permissionModalShow = () => {\r\n    setPermissionModalVisible(true);\r\n  };\r\n  const permissionModalCancel = () => {\r\n    setPermissionModalVisible(false);\r\n  };\r\n  const addProject = async () => {\r\nif (!projName || !clientEmail ) {\r\n    // If any required field is missing, display a validation error notification\r\n    notification.error({\r\n      message: 'Validation Error',\r\n      description: 'Please fill in all required fields.',\r\n      style: {\r\n        backgroundColor: '#f5222d', // Red color background\r\n        color: '#fff', // White text color\r\n      },\r\n    });\r\n    return; // Exit early if validation fails\r\n  }\r\n    // console.log(selectedDepartments,'selectedDepartments');\r\n    // console.log(departmentInfo,\"info agayi yaha bhi\");\r\n    const mappedDepartments = selectedDepartments.map(departmentId => {\r\n      const department = departmentInfo.find(department => department.id === departmentId);\r\n      return {\r\n          suffix: department ? department.suffix : null,\r\n          title: department ? department.title : null\r\n      };\r\n  });\r\n  // console.log(mappedDepartments,\"department bhi agaye\");\r\n    try {\r\n      const response = await axios.post(\r\n        \"http://54.81.250.98:8083/api/projects/\",\r\n        {\r\n          title: projName,\r\n          departmentId:selectedDepartments,\r\n          departments:mappedDepartments,\r\n          status:\"Initialized\",\r\n          noOfUsers:0,\r\n          clientId:clientEmail,\r\n          code,\r\n          companyId: user?.user?.companyId,\r\n          authorId: user?.user?.id,\r\n          authorName: `${user?.user?.firstName} ${user?.user?.lastName}`,\r\n          startedDate,\r\n          endedDate\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: user?.accessToken,\r\n            // Add other headers if needed\r\n          },\r\n        }\r\n      );\r\n      // Handle the response as needed\r\n      console.log(response);\r\n      notification.success({\r\n        message: `${response?.data?.message}`,\r\n        style: {\r\n          backgroundColor: '#52c41a', // Red color background\r\n          color: '#fff', // White text color\r\n        },\r\n      }\r\n    )\r\n      setProjectModalVisible(false);      \r\n      fetchData();\r\n    } catch (error) {\r\n      // Handle errors\r\n      console.error(\"Error adding projects:\", error);\r\n    }\r\n  };\r\n  // useEffect(()=>{\r\n  //   setCode(\"\");\r\n  //   setStatus(\"\");\r\n  //   setProjName(\"\");\r\n  //   setClientEmail(\"\");\r\n  //   setDepartmentId([]);\r\n  // },[projectModalVisible])\r\n  const fetchProgress = async()=>{\r\n    try {\r\n      const response = await axios.get(\r\n        `http://54.81.250.98:8083/api/projects/progress?companyId=${user?.user.companyId}`,\r\n        \r\n        {\r\n          headers: {\r\n            Authorization: user?.accessToken,\r\n            // Add other headers if needed\r\n          },\r\n        }\r\n      );\r\n      // Handle the response as needed\r\n      console.log(response.data,'projectIds');\r\n      setProgresses(response.data.documentProgressResults)\r\n      console.log(progresses,\"progresses\");\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n  }\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://54.81.250.98:8083/api/projects?companyId=${user?.user?.companyId}&roleId=${user?.user?.roleId}`,\r\n        {\r\n          headers: {\r\n            Authorization: user?.accessToken,\r\n            // Add other headers if needed\r\n          },\r\n        }\r\n        \r\n      );\r\n      \r\n      console.log('Project response data',response.data);\r\n      const formattedData = response.data.map(project => {\r\n        // Assuming project.startedDate and project.endedDate are DateTime strings\r\n        const formattedStartDate = new Date(project.startedDate).toLocaleDateString('en-GB');\r\n        const formattedEndDate = new Date(project.endedDate).toLocaleDateString('en-GB');\r\n        // Create a new object with formatted dates\r\n        return {\r\n          ...project,\r\n          startedDate: formattedStartDate,\r\n          endedDate: formattedEndDate,\r\n        };\r\n      });\r\n      const userId = user?.user.departmentId\r\n      const roleId = user?.user.roleId\r\n\r\n      console.log(userId,'userId');\r\n\r\n      // if (userId !== undefined && roleId !==1) {\r\n      //   const userProjects = formattedData.filter(project => project.departmentIds.split(',').includes(userId.toString()));\r\n      //   console.log(\"User's Projects:\", userProjects);\r\n      //   setData(userProjects);\r\n      // } \r\n      // else{\r\n        setData(formattedData)\r\n      // }\r\n      setDataArray(formattedData)\r\n      const options = [];\r\n      for (const item of response?.data) {\r\n        options.push({ value: item?.id, label: item?.title });\r\n      }\r\n      console.log(options);\r\n      setProjects(options); // Assuming the response.data is an array of projects\r\n    } catch (error) {\r\n      console.error(\"Error fetching projects:\", error?.message);\r\n    }\r\n  };\r\n\r\n  const fetchDepartments = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://54.81.250.98:8083/api/departments?companyId=${user?.user?.companyId}`,\r\n        {\r\n          headers: {\r\n            Authorization: user?.accessToken,\r\n            // Add other headers if needed\r\n          },\r\n        }\r\n      );\r\n      console.log(response.data,\"data agaya\");\r\n      const options = [];\r\n      const option = []\r\n      for (const item of response?.data) {\r\n        options.push({ value: item?.id, label: item?.title });\r\n        option.push({id:item?.id,title:item?.title,suffix:item?.suffix});\r\n      }\r\n      setDepartmentInfo(option)\r\n      setDepartmentOptions(options)\r\n    } catch (error) {\r\n      console.error(\"Error fetching departments:\", error?.message);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    setUser(JSON.parse(localStorage?.getItem(\"user\")));\r\n    // Fetch data when the component mounts\r\n    fetchClients();\r\n    fetchDepartments();\r\n    fetchData();\r\n    // fetchProgress()\r\n  }, []);\r\n  var usedNumbers = [];\r\n\r\n  function generateUnique4DigitNumber(usedNumbers) {\r\n    while (true) {\r\n        const number = Math.floor(Math.random() * 9000) + 1000; // Generate a random 4-digit number\r\n        if (!usedNumbers.includes(number)) {\r\n            usedNumbers.push(number);\r\n            return number;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        title=\"Add Project\"\r\n        width={416}\r\n        centered\r\n        visible={projectModalVisible}\r\n        onCancel={projectModalCancel}\r\n        footer={null}\r\n        closeIcon={\r\n          <RiCloseFill className=\"remix-icon text-color-black-100\" size={24} />\r\n        }\r\n      >\r\n        <Form layout=\"vertical\" name=\"basic\">\r\n        <Form.Item label=\"Project Code\" name=\"projCode\" rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please Add Project Code\",\r\n                  },\r\n                ]}>\r\n          \r\n            <Input\r\n              value={projCode}\r\n              onChange={(e) => setCode(e.target.value)}\r\n            />\r\n          </Form.Item>         \r\n           <Form.Item label=\"Project Name\" name=\"projName\" rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please Add Project Name\",\r\n                  },\r\n                ]}>\r\n            <Input\r\n              value={projName}\r\n              onChange={(e) => setProjName(e.target.value)}\r\n            />\r\n          </Form.Item>\r\n \r\n            <Form.Item\r\n                label=\"Client\"\r\n                name=\"clientEmail\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please select Client Email\",\r\n                  },\r\n                ]}\r\n              >\r\n              <Select\r\n\r\n                  options={clients}\r\n                  value={clientEmail}\r\n                  onChange={(value) => setClientEmail(value)}\r\n                />  \r\n                </Form.Item>\r\n\r\n\r\n                <Form.Item\r\n                label=\"Departments\"\r\n                name=\"departmentIds\"\r\n                rules={[{ required: true, message: 'Please select at least one department' }]}\r\n              >\r\n                <Checkbox.Group options={departmentOptions} value={selectedDepartments} onChange={setSelectedDepartments} />\r\n              </Form.Item>\r\n                \r\n\r\n      <Form.Item label=\"Start Date\" name=\"startedDate\" rules={[{ required: true, message: 'Please select start date' }]}>\r\n        <DatePicker style={{ width: '100%' }} onChange={handleStartDateChange} />\r\n      </Form.Item>\r\n\r\n      <Form.Item label=\"End Date\" name=\"endedDate\" rules={[{ required: true, message: 'Please select end date' }]}>\r\n        <DatePicker style={{ width: '100%' }} onChange={handleEndDateChange} />\r\n      </Form.Item>\r\n         \r\n          <Row>\r\n            <Col md={12} span={24} className=\"hp-pr-sm-0 hp-pr-12\">\r\n              <Button\r\n                block\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n                onClick={() => addProject()}\r\n              >\r\n                Add\r\n              </Button>\r\n            </Col>\r\n\r\n            <Col md={12} span={24} className=\"hp-mt-sm-12 hp-pl-sm-0 hp-pl-12\">\r\n              <Button block onClick={projectModalCancel}>\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </Modal>\r\n\r\n      <Modal\r\n        title=\"Document Permissions\"\r\n        width={416}\r\n        centered\r\n        visible={permissionModalVisible}\r\n        onCancel={permissionModalCancel}\r\n        footer={null}\r\n        closeIcon={\r\n          <RiCloseFill className=\"remix-icon text-color-black-100\" size={24} />\r\n        }\r\n      >\r\n        <Form layout=\"vertical\" name=\"basic\">\r\n          <Form.Item label=\"Project Name\" name=\"projectId\">\r\n            <Select\r\n              options={projectOptions}\r\n              value={projectId}\r\n              onChange={(e) => setProjectId(e)}\r\n            />\r\n          </Form.Item>\r\n\r\n          <Row>\r\n            <Col md={12} span={24} className=\"hp-pr-sm-0 hp-pr-12\">\r\n              <Button\r\n                block\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n                onClick={() => addProject()}\r\n              >\r\n                Add\r\n              </Button>\r\n            </Col>\r\n            <Col md={12} span={24} className=\"hp-mt-sm-12 hp-pl-sm-0 hp-pl-12\">\r\n              <Button block onClick={projectModalCancel}>\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </Modal>\r\n\r\n<div style={{ textAlign: \"right\", marginBottom: \"16px\" }}>\r\n  {user?.user?.roleId == 1 && (\r\n    <Button type=\"primary\" onClick={projectModalShow}>\r\n      Add Project\r\n    </Button>\r\n  )}\r\n</div>\r\n\r\n      <Table\r\n      bordered\r\n      size=\"middle\"\r\n      title={() => 'All Project Details'}\r\n      footer={() => 'You may filter Projects'} \r\n        columns={columns} \r\n        dataSource={transformData(data)} \r\n        onRow={(record) => ({\r\n          onClick: () => rowClickHandler(record),\r\n        })}\r\n      />      \r\n      <ProtectedAppPage />\r\n    </>\r\n  );\r\n}\r\nconst transformData = (originalData) => {\r\n  const groupedData = {};\r\n\r\n  // Group data by title\r\n  originalData.forEach((item) => {\r\n    const title = item.title;\r\n\r\n    if (!groupedData[title]) {\r\n      groupedData[title] = { ...item, departmentNames: [item.departmentName + ','] };\r\n    } else {\r\n      groupedData[title].departmentNames.push(item.departmentName + ',');\r\n    }\r\n  });\r\n\r\n  // Convert the grouped data into an array and join department names with spaces\r\n  const transformedData = Object.values(groupedData).map((item) => ({\r\n    ...item,\r\n    departmentName: item.departmentNames.join(''), // Join without spaces\r\n  }));\r\n\r\n  return transformedData;\r\n};\r\n"],"names":["ProtectedAppPage","_localStorage","isLogIn","localStorage","getItem","console","log","_jsx","Redirect","to","_ref","percentage","Row","justify","align","style","width","children","Progress","percent","size","Projects","_user$user9","searchText","setSearchText","useState","searchedColumn","setSearchedColumn","searchInput","useRef","progresses","setProgresses","selectedDepartments","setSelectedDepartments","departmentName","setDepartmentName","projectModalVisible","setProjectModalVisible","permissionModalVisible","setPermissionModalVisible","projName","setProjName","projCode","setProjCode","clientEmail","setClientEmail","startedDate","setStartDate","endedDate","setEndDate","departmentId","setDepartmentId","status","setStatus","code","setCode","user","setUser","JSON","parse","data","setData","dataArray","setDataArray","departmentOptions","setDepartmentOptions","departmentInfo","setDepartmentInfo","projectOptions","setProjects","clients","setClients","projectId","setProjectId","history","useHistory","handleSearch","selectedKeys","confirm","dataIndex","getColumnSearchProps","filterDropdown","setSelectedKeys","clearFilters","close","_jsxs","padding","Input","ref","placeholder","concat","value","onChange","e","target","onPressEnter","marginBottom","display","Space","Button","type","onClick","icon","SearchOutlined","handleReset","filterIcon","filtered","color","undefined","onFilter","record","toString","toLowerCase","includes","onFilterDropdownOpenChange","visible","setTimeout","_searchInput$current","current","select","render","text","Highlighter","highlightStyle","backgroundColor","searchWords","autoEscape","textToHighlight","columns","Menu","Item","title","key","sorter","a","b","Date","split","reverse","join","filters","_","ProgressComp","toFixed","projectModalCancel","addProject","async","notification","error","message","description","mappedDepartments","map","department","find","id","suffix","_user$user2","_user$user3","_user$user4","_user$user5","_response$data","response","axios","departments","noOfUsers","clientId","companyId","authorId","authorName","firstName","lastName","headers","Authorization","accessToken","success","fetchData","_user$user6","_user$user7","roleId","formattedData","project","formattedStartDate","toLocaleDateString","formattedEndDate","userId","options","item","push","label","useEffect","_localStorage2","_user$user","uniqueTitlesSet","Set","reduce","acc","has","companyName","add","com","name","fetchClients","_user$user8","option","fetchDepartments","_Fragment","Modal","centered","onCancel","footer","closeIcon","RiCloseFill","className","Form","layout","rules","required","Select","Checkbox","Group","DatePicker","date","Col","md","span","block","htmlType","permissionModalCancel","textAlign","projectModalShow","Table","bordered","dataSource","transformData","onRow","pathname","state","selectedRecord","rowClickHandler","originalData","groupedData","forEach","departmentNames","Object","values"],"sourceRoot":""}