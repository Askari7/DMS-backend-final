{"version":3,"file":"static/js/9491.93f1d421.chunk.js","mappings":"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","sources":["view/pages/initialMDR/index.jsx","../node_modules/antd/es/space/Item.js","../node_modules/antd/es/space/index.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n// import { notification, Row,  Col,  Divider,Checkbox,  Form,  Space,  Table,  Select,  Tag,  Input,  DatePicker,  TimePicker,  Button,  Modal,  message,} from 'antd';\r\n// import { RiCloseFill, RiCalendarLine } from \"react-icons/ri\";\r\n// import axios from 'axios'\r\n// import { useLocation } from 'react-router-dom';\r\n// import jsondata from './data.json';\r\n// import { saveData, loadData, getAllKeys } from '../../storage';\r\n// \r\n\r\n//   const MdrTemplate = ({ projectCode, mdrCode }) => {\r\n//     const [customModalVisible, setCustomModalVisible] = useState(false);\r\n//     const { search } = useLocation();\r\n//     const params = new URLSearchParams(search);\r\n//     const ProjectCode = params.get('projectCode');\r\n//     const getMdrCode = params.get('mdrCode');\r\n//     const projectId = params.get('projectId');\r\n//     const getMdrTitle= params.get('title');\r\n//     const departmentId = params.get('departmentId');\r\n\r\n//     let departmentOptionsString = params.get('departmentOptions');\r\n//     let departmentOptionSuffix = params.get('departmentOption');\r\n\r\n//     const projectOptions = params.get('projectOptions');\r\n//     const approver = params.get('approver');\r\n//     const reviewer = params.get('reviewer');\r\n//     const record = params.get('record');\r\n\r\n//     console.log(\"data from mdr to mdrtemplates\",ProjectCode,getMdrCode,projectId,getMdrTitle,departmentId,\r\n//     departmentOptionSuffix,departmentOptionsString,projectOptions,approver,reviewer,record);\r\n\r\n//     const [customFieldValues, setCustomFieldValues] = useState({});\r\n//     const [templateModalVisible,setTemplateModalVisible] = useState(false)\r\n//     const [selectedFieldVisible,setSelectedFieldVisible]  = useState(false)\r\n//     const [title,setTitle] = useState('')\r\n//     const [selectedRowData, setSelectedRowData] = useState(null);\r\n//     const [departmentWise, setDepartmentWise] = useState(false);\r\n//     const [loading, setLoading] = useState(true);\r\n//     const [displayNames, setDisplayNames] = useState([]);\r\n//     const [selectedDepartment, setSelectedDepartment] = useState(null);\r\n//     const [codes,setCodes] = useState([])\r\n//     const [selectedRows, setSelectedRows] = useState([]);\r\n//     const [user, setUser] = useState(JSON.parse(localStorage?.getItem(\"user\")));\r\n//     const [code,setCode] = useState()\r\n\r\n\r\n//     const departmentOptionSuffixes = JSON.parse(departmentOptionSuffix);\r\n//     // \r\n//     const departmentOptions = JSON.parse(departmentOptionsString);\r\n//     // \r\n//     const departmentOptionsMap = new Map(departmentOptions.map(option => [option.value, option.label]));\r\n//     // \r\n//     const departmentIds = departmentId.split(',').map(Number);\r\n//     const departmentLabels = departmentIds.map(id => departmentOptionsMap.get(id));\r\n//     // \r\n//     const departmentLabelsString = departmentLabels.join(', ');\r\n//     // \r\n\r\n//     const dataArrayWithIndexes = Object.entries(jsondata).map(([index, value]) => ({  ...value, index: parseInt(index), checked: false }));\r\n    \r\n\r\n//     const [data, setData] = useState(Object.values(dataArrayWithIndexes));\r\n//     const [dataArray,setDataArray] = useState(Object.values(dataArrayWithIndexes))\r\n//     let changing = data\r\n//     let changing2 = dataArray\r\n\r\n    \r\n    \r\n\r\n//     const [documentCounts, setDocumentCounts] = useState({});\r\n//     const [documentTitles, setDocumentTitles] = useState({});\r\n//     const [information,setInformation] = useState([])\r\n//     const [titles,setValues] = useState([])\r\n\r\n//     const [documentInfo, setDocumentInfo] = useState([]);\r\n    \r\n//     const columns = [\r\n//       {\r\n//         title: 'Sr.#',\r\n//         dataIndex: 'code', // Assuming 'code' is the appropriate field for 'Sr.#'\r\n//         key: 'code',\r\n//       },\r\n//       {\r\n//         title: 'Document',\r\n//         dataIndex: 'documentTitle',\r\n//         key: 'documentTitle',\r\n//       },\r\n//       {\r\n//         title: 'Department Code',\r\n//         dataIndex: 'departmentCode',\r\n//         key: 'departmentCode',\r\n//         filters: [\r\n//           {\r\n//             text: 'Project Management',\r\n//             value: 'PM',\r\n//           },\r\n//           {\r\n//             text: 'Process',\r\n//             value: 'PRO',\r\n//           },\r\n//           {\r\n//             text: 'Piping',\r\n//             value: 'PIP',\r\n//           },\r\n//           {\r\n//             text: 'Mechanical',\r\n//             value: 'TK',\r\n//           },\r\n//           {\r\n//             text: 'Civil/Structure',\r\n//             value: 'CIV',\r\n//           },\r\n//           {\r\n//             text: 'Electrical',\r\n//             value: 'ELE',\r\n//           },\r\n//           {\r\n//             text: 'Instrumentation',\r\n//             value: 'INS',\r\n//           },\r\n//         ],\r\n//         filterMode: 'tree',\r\n//         filterSearch: true,\r\n//         onFilter:  (value, record) => record.departmentCode === value,\r\n//       },\r\n//       {\r\n//         title: 'Document Content Code',\r\n//         dataIndex: 'documentContentCode',\r\n//         key: 'documentContentCode',\r\n//       },\r\n//       {\r\n//         title: 'DOCUMENT NUMBER',\r\n//         dataIndex: 'document', // Use 'documentNumber' as the dataIndex\r\n//         key: 'document',\r\n//       },\r\n//       {\r\n//         title: \"No Of Documents\",\r\n//         key: \"noOfDocuments\",\r\n//         render: (_, record) => (\r\n//           <Space size=\"middle\" align=\"center\">\r\n//             <Button onClick={() => handleCount(record)}>Add </Button>\r\n//             <Tag style={{ color: \"white\", backgroundColor: \"blue\" }}>{documentCounts[record.document] || 1}</Tag>\r\n//           </Space>\r\n//         ),\r\n//       },\r\n//     ];\r\n//     useEffect(() => {\r\n//       const timeout = setTimeout(() => {\r\n//         setDisplayNames(departmentOptions.map(option => option.label));\r\n//         setLoading(false);\r\n//       }, 1000);\r\n  \r\n//       return () => clearTimeout(timeout);\r\n//     }, [])\r\n\r\n//     const handleCount = (record) => {\r\n//       setDocumentCounts(prevCounts => {\r\n//         const updatedCounts = { ...prevCounts };\r\n//         const currentCount = updatedCounts[record.document] || 1;\r\n//         updatedCounts[record.document] = currentCount + 1;\r\n//         // \r\n//         return updatedCounts;\r\n//       });\r\n//     };\r\n\r\n//     const templateModalShow = () => {\r\n//       setTemplateModalVisible(true);  \r\n//       const updatedData = [...data];\r\n//       // \r\n//       let allInfos = [];\r\n//       selectedRows.forEach((index, sequenceNumber) => {\r\n//         const count = documentCounts[data[index].document] || 1;\r\n//         //         \r\n//         for (let i = 0; i < count; i++) {\r\n//           let newDocument = data[index].document.replace('00X', (i + 1).toString().padStart(3, '0')).replace(\"xxxx\",ProjectCode)\r\n//           // \r\n//           // Save the document name in allInfos array\r\n//           if (!allInfos[index]) {\r\n//             allInfos[index] = {};\r\n//           }\r\n//           allInfos[index][i] = newDocument;\r\n      \r\n//           updatedData[index] = {\r\n//             ...data[index],\r\n//             count: documentCounts[data[index].document]\r\n//           };\r\n//         // \r\n          \r\n//         }\r\n      \r\n//       });\r\n//       \r\n//       setInformation(allInfos)\r\n//       // \r\n//       // \r\n//       setData(updatedData);\r\n      \r\n//     };\r\n\r\n//   const handleChangingTitle = (title, document, index, i) => {\r\n//     setDocumentInfo((prevDocumentInfo) => {\r\n//       const newDocumentInfo = [...prevDocumentInfo];\r\n//       newDocumentInfo[index] = newDocumentInfo[index] || [];\r\n//       newDocumentInfo[index][i] = {\r\n//         ...newDocumentInfo[index][i],\r\n//         title,\r\n//       };\r\n//       // \r\n\r\n//       return newDocumentInfo;\r\n//     });\r\n//   };\r\n  \r\n//   const handleStartDateChange = (date, document, index, i) => {\r\n//     setDocumentInfo((prevDocumentInfo) => {\r\n//       const newDocumentInfo = [...prevDocumentInfo];\r\n//       newDocumentInfo[index] = newDocumentInfo[index] || [];\r\n//       newDocumentInfo[index][i] = {\r\n//         ...newDocumentInfo[index][i],\r\n//         startDate: date ? date.toDate() : null,\r\n//       };\r\n//       return newDocumentInfo;\r\n//     });\r\n//   };\r\n  \r\n//   const handleEndDateChange = (date, document, index, i) => {\r\n//     setDocumentInfo((prevDocumentInfo) => {\r\n//       const newDocumentInfo = [...prevDocumentInfo];\r\n//       newDocumentInfo[index] = newDocumentInfo[index] || [];\r\n//       newDocumentInfo[index][i] = {\r\n//         ...newDocumentInfo[index][i],\r\n//         endDate: date ? date.toDate() : null,\r\n//       };\r\n//       return newDocumentInfo;\r\n//     });\r\n//   };\r\n//   const onChange = (pagination, filters, sorter, extra) => {\r\n//     \r\n//   };\r\n  \r\n//   const change=(selectedRows,selectedRowKeys)=>{\r\n//     // \r\n//     const updatedSelectedRowKeys = selectedRowKeys.map(row => ({ ...row, checked: true }));\r\n//     \r\n//     const indexes = updatedSelectedRowKeys.map(row => row.index);\r\n//     // \r\n//     setSelectedRows(indexes)\r\n//   }\r\n  \r\n//   const handleCheckboxChange = (isCheckedValue, document, index, i) => {\r\n//     setDocumentInfo((prevDocumentInfo) => {\r\n//       const newDocumentInfo = [...prevDocumentInfo];\r\n//       newDocumentInfo[index] = newDocumentInfo[index] || [];\r\n  \r\n//       // If checkbox is unchecked, restore previous startDate and endDate values\r\n//       if (!isCheckedValue) {\r\n//         newDocumentInfo[index][i] = {\r\n//           title: newDocumentInfo[index]?.[i]?.title || '',\r\n//           isChecked: false,\r\n//           startDate: newDocumentInfo[index]?.[i]?.prevStartDate || '',\r\n//           endDate: newDocumentInfo[index]?.[i]?.prevEndDate || '',\r\n//           prevStartDate: undefined,\r\n//           prevEndDate: undefined,\r\n//         };\r\n//       } else {\r\n//         newDocumentInfo[index][i] = {\r\n//           title: newDocumentInfo[index]?.[i]?.title || '',\r\n//           isChecked: true,\r\n//           prevStartDate: newDocumentInfo[index]?.[i]?.startDate,\r\n//           prevEndDate: newDocumentInfo[index]?.[i]?.endDate,\r\n//         };\r\n//       }\r\n  \r\n//       return newDocumentInfo;\r\n//     });  \r\n//   };\r\n  \r\n  \r\n//     const departmentWiseShow = () => {\r\n//       setDepartmentWise(true);\r\n//     };\r\n  \r\n//     const departmentWiseCancel = () => {\r\n//       setDepartmentWise(false);\r\n//     };\r\n//     const addDocument = async () => {\r\n      \r\n//       const departmentOptions = await JSON.parse(departmentOptionsString);\r\n//       try {\r\n//         var title=getMdrTitle;\r\n//         // \r\n//         var mdrCode=getMdrCode;\r\n//         // \r\n//         mdrCode=mdrCode.replace(/\\s/g, '');\r\n//         // \r\n//         var count = selectedRows.length\r\n//         // \r\n//         selectedRows.forEach(async (index) => {\r\n\r\n//           let documentValue = data[index].document;\r\n//           let count = data[index].count||1\r\n//           // \r\n//           const masterDocumentName=title;\r\n//           const assignedBy=user.user.roleId;\r\n//           const assignedFrom=user.user.id;\r\n//           \r\n//           for (let i = 0; i < count; i++) {\r\n//             try {\r\n//               var docTitle = documentInfo[index][i].title;\r\n//               var startedDate = documentInfo[index][i].startDate\r\n//               var expectedEndedDate = documentInfo[index][i].endDate\r\n//               var title=information[index][i];\r\n//               var version='000';\r\n\r\n//               \r\n//               const responseDoc = await axios.post(\r\n//                 \"http://127.0.0.1:8083/api/documents/\",\r\n//                 {\r\n//                   title,\r\n//                   startedDate,\r\n//                   expectedEndedDate,\r\n//                   docTitle,\r\n//                   departmentId,\r\n//                   projectId,\r\n//                   companyId: user?.user?.companyId,\r\n//                   userId: user?.user?.id,\r\n//                   userName: `${user?.user?.firstName} ${user?.user?.lastName}`,\r\n//                   masterDocumentId: mdrCode,\r\n//                   masterDocumentName,\r\n//                   projectCode,\r\n//                   departmentName:departmentLabelsString,\r\n//                   status : \"Initialized\",\r\n//                   assignedBy,\r\n//                   assignedFrom,\r\n//                    approver,\r\n//                    reviewer,\r\n//                    version\r\n//                 },\r\n//                 {\r\n//                   headers: {\r\n//                     Authorization: user?.accessToken,\r\n//                   },\r\n//                 }\r\n//               );\r\n//             } catch (error) {\r\n//               \r\n//             }  \r\n//           }\r\n          \r\n//         });\r\n\r\n//         if(record){\r\n          \r\n//           const response = await axios.put(\r\n//             \"http://127.0.0.1:8083/api/documents/mdr\",\r\n//             {\r\n//               record,\r\n//               title,\r\n//               departmentId,\r\n//               projectId,\r\n//               noOfDocuments:count,\r\n//               status:\"Ongoing\",\r\n//               companyId: user?.user?.companyId,\r\n//               authorId: user?.user?.id,\r\n//               authorName: `${user?.user?.firstName} ${user?.user?.lastName}`,\r\n//               mdrCode,\r\n//               projectCode: ProjectCode,\r\n//               departmentName: departmentLabelsString,\r\n//             },\r\n//             {\r\n//               headers: {\r\n//                 Authorization: user?.accessToken,\r\n//               },\r\n//             }\r\n//           );     \r\n//         }else{\r\n\r\n//           \r\n//           const response = await axios.post(\r\n//             \"http://127.0.0.1:8083/api/documents/mdr\",\r\n//             {\r\n//               title,\r\n//               departmentId,\r\n//               projectId,\r\n//               noOfDocuments:count,\r\n//               status:\"Ongoing\",\r\n//               companyId: user?.user?.companyId,\r\n//               authorId: user?.user?.id,\r\n//               authorName: `${user?.user?.firstName} ${user?.user?.lastName}`,\r\n//               mdrCode,\r\n//               projectCode: ProjectCode,\r\n//               departmentName: departmentLabelsString,\r\n//             },\r\n//             {\r\n//               headers: {\r\n//                 Authorization: user?.accessToken,\r\n//               },\r\n//             }\r\n            \r\n//           );\r\n//         }\r\n//         notification.success({\r\n//                 message: `${response?.data?.message}`,\r\n//                 style: {\r\n//                   backgroundColor: '#52c41a', // Red color background\r\n//                   color: '#fff', // White text color\r\n//                 },\r\n//               }\r\n//             )\r\n//             if (selectedRows.length === 0) {\r\n//           message.error('Please select at least one row.');\r\n//           return;\r\n//         }\r\n//       } catch (error) {\r\n//         // Handle errors\r\n//         console.error(\"Error adding MDR:\", error);\r\n//       }\r\n//     };\r\n\r\n//     const handleDepartmentClick = (name) => {\r\n//       \r\n//       setSelectedDepartment(name);\r\n//       departmentWiseCancel();\r\n//       filterData(name);\r\n//     };\r\n\r\n//     // const filterData = (selectedDepartment) => {\r\n\r\n//     //   const filteredData = [];\r\n//     //   for (const data of dataArray) {\r\n//     //     if (String(data.category).toUpperCase() === String(selectedDepartment).toUpperCase()) {\r\n//     //       filteredData.push(data);\r\n//     //     }\r\n//     //   }\r\n//     //   \r\n//     //   setData(filteredData);\r\n//     // };\r\n  \r\n//     const filterData = (selectedDepartment) => {\r\n//       \r\n//       \r\n//       const filteredIndexes = dataArray\r\n//       .filter(item => item.category.toUpperCase() === selectedDepartment.toUpperCase())\r\n    \r\n//       const filteredRowKeys = dataArray\r\n//       .filter((row, index) => selectedRows.includes(index) && row.checked)\r\n//       .map(row => row.index);\r\n//       \r\n//     // Call setSelectedRows to update the selected rows\r\n//       setSelectedRows(filteredRowKeys);\r\n  \r\n//       \r\n//         // const filteredDataWithIndexes = filteredIndexes.map(index => dataArrayWithIndexes[index]);\r\n//       // const filteredDataValues = filteredDataWithIndexes.map(({ value }) => value);\r\n      \r\n//       // \r\n//       setData(filteredIndexes);\r\n//       // setFilteredValues(filteredDataWithIndexes); // Assuming you have a state variable for storing filtered values\r\n//     };\r\n    \r\n\r\n//     // const filterData = (selectedDepartment) => {\r\n//     //   const filteredIndexes = dataArrayWithIndexes\r\n//     //     .filter(({ value }) => String(value.category).toUpperCase() === String(selectedDepartment).toUpperCase())\r\n//     //     .map(({ index }) => index);\r\n    \r\n      \r\n//     //   setData(filteredDataValues);\r\n//     // };\r\n\r\n//     const handleClick = () => {\r\n//       departmentWiseCancel();\r\n//       setData(dataArray)\r\n//     };\r\n    \r\n//     const mydocumentSaved = async() => {\r\n      \r\n//       \r\n//       await addDocument();\r\n//       notification.success({\r\n//         message: `Documents Successfully Added`,\r\n//         style: {\r\n//           backgroundColor: '#52c41a', // Red color background\r\n//           color: '#fff', // White text color\r\n//         },\r\n//       }\r\n//     )      // selectedRows.forEach((index) => {\r\n//       //   const savedData = loadData(`doc-${index}`);\r\n//       //   \r\n//       // });\r\n    \r\n//       templateModalCancel();\r\n\r\n//     };\r\n    \r\n//     const templateModalCancel = () => {\r\n//       setTemplateModalVisible(false);\r\n      \r\n//     };\r\n\r\n//     const selectedModalShow = () => {\r\n//       setSelectedFieldVisible(true);\r\n//     };\r\n  \r\n//     const selectedModalCancel = () => {\r\n//       setSelectedFieldVisible(false);\r\n//     };\r\n\r\n//     const handleUpdate = (record) => {\r\n//       setSelectedRowData(record);\r\n//       selectedModalShow();\r\n//     };\r\n    \r\n//     const getAllCodes = async () => {\r\n//       \r\n\r\n//       try {\r\n//         const response = await axios.get(\r\n//           `http://127.0.0.1:8083/api/documents/getCodes?companyId=${user?.user?.companyId}`,\r\n//           {\r\n//             headers: {\r\n//               Authorization: user?.accessToken,\r\n//             },\r\n//           }\r\n//         );\r\n//         var newResponse=response.data.documentNumberFormat.split('-');\r\n//         setCodes(ProjectCode+'-'+newResponse[1]+'-'+newResponse[2]+'-'+getMdrCode+'-'+'00X')        \r\n\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching projects:\", error?.message);\r\n//       }\r\n//     };\r\n//     useEffect(()=>{\r\n//       getAllCodes()\r\n//     },[])\r\n\r\n//     useEffect(() => {\r\n//       // This will be executed after the state is updated\r\n//       // \r\n//     }, [information]);\r\n\r\n//     const customModalShow = () => {\r\n//       setCustomModalVisible(true);\r\n//     };\r\n  \r\n//     const customModalCancel = () => {\r\n//       setCustomModalVisible(false);\r\n//     };\r\n  \r\n//     const handleCustomFieldChange = (fieldName, value) => {\r\n//       setCustomFieldValues({ ...customFieldValues, [fieldName]: value });\r\n//     };\r\n//     const handleDone = (value) => {\r\n//       if (selectedRowData) {\r\n//         const updatedData = [...data];\r\n//         const index = selectedRowData.key;\r\n//         const newDocument = `${ProjectCode}-${title}-${getMdrCode}-00X`;\r\n    \r\n//         updatedData[index] = {\r\n//           ...selectedRowData,\r\n//           document: newDocument,\r\n//         };\r\n    \r\n//         setData(updatedData);\r\n//         // setDataArray(updatedData);\r\n//         setSelectedRowData(null);\r\n//         selectedModalCancel();\r\n//       }\r\n//     };\r\n    \r\n//     const handleAddCustom = () => {\r\n//       // Create a new object with properties matching existing columns\r\n//       const customData = {\r\n//         category: customFieldValues.category || '',\r\n//         code: customFieldValues.code || '',\r\n//         documentTitle: customFieldValues.documentTitle || '',\r\n//         additionalAssigned: customFieldValues.additionalAssigned || '',\r\n//         areaCode: customFieldValues.areaCode || '',\r\n//         departmentCode: customFieldValues.departmentCode || '',\r\n//         documentContentCode: customFieldValues.documentContentCode || '',\r\n//         sequenceNumber: customFieldValues.sequenceNumber || '',\r\n//         document: customFieldValues.document || '',\r\n//       };\r\n  \r\n//       // Update the data array with the new custom data\r\n//       setData(prevData => [...prevData, customData]);\r\n  \r\n//       // Close the custom modal\r\n//       setCustomModalVisible(false);\r\n//     };\r\n//   return (\r\n//     <>\r\n//         <Modal\r\n//       title=\"Update Code\"\r\n//       width={400}\r\n//       centered\r\n//       visible={selectedFieldVisible}\r\n//       onCancel={selectedModalCancel}\r\n//       footer={null}\r\n//       closeIcon={<RiCloseFill className=\"remix-icon text-color-black-100\" size={24} />}\r\n//     >\r\n//       <Row justify=\"space-between\" align=\"center\">\r\n//       <Col span={20}>\r\n//             <Form layout=\"vertical\" name=\"basic\">\r\n//               <Form.Item\r\n//                 label=\"Update Code\"\r\n//                 name=\"UpdateCode\"\r\n//                 rules={[\r\n//                   {\r\n//                     required: true,\r\n//                     message: \"Please Update Code\",\r\n//                   },\r\n//                 ]}\r\n//               >\r\n//                 <Input\r\n//                   value={code}\r\n//                   onChange={(e) =>{ setTitle(e.target.value);\r\n//                     \r\n//                   }}\r\n//                 />\r\n//                 </Form.Item>\r\n//                 </Form>\r\n//                 </Col>\r\n//       </Row>\r\n//       <Button\r\n//           type=\"primary\"\r\n//           onClick={handleDone}\r\n//           // disabled={user?.user?.roleId != 1}\r\n//         >\r\n//           Confirm\r\n//         </Button>\r\n//     </Modal>\r\n\r\n//     <Modal\r\n//       title=\"Upload Document\"\r\n//       width={400}\r\n//       centered\r\n//       visible={templateModalVisible}\r\n//       onCancel={templateModalCancel}\r\n//       footer={null}\r\n//       closeIcon={<RiCloseFill className=\"remix-icon text-color-black-100\" size={24} />}\r\n//     >\r\n//       <Row justify=\"space-between\" align=\"center\">\r\n//         <div>\r\n//           <h3>Selected Documents:</h3>\r\n//           <ul style={{ margin: \"2px\" ,padding:\"2px\"}}>\r\n//           {selectedRows.map((index) => (\r\n//   <React.Fragment key={index}>\r\n//   {Array.from({ length: data[index].count || 1 }, (_, i) => (\r\n//     <li key={i} style={{ margin: \"2px\", padding: \"2px\" }}>\r\n//       <strong style={{ color: \"blue\" }}>Category:</strong> {data[index].category} <br />\r\n//       <strong style={{ color: \"blue\" }}>Code:</strong> {data[index].code} <br />\r\n//       <strong style={{ color: \"blue\" }}>Document Number:</strong> {information[index]?.[i] || ''} <br />\r\n//       <br />\r\n//       <Form.Item label=\"Start Date\" name={`startedDate[${index}][${i}]`}>\r\n//         <DatePicker\r\n//           style={{ width: '100%' }}\r\n//           onChange={(date) => handleStartDateChange(date, data[index].document, index, i)}\r\n//           disabled={documentInfo[index]?.[i]?.isChecked}\r\n//         />\r\n//       </Form.Item>\r\n\r\n//       <Form.Item label=\"End Date\" name={`endedDate[${index}][${i}]`}>\r\n//         <DatePicker\r\n//           style={{ width: '100%' }}\r\n//           onChange={(date) => handleEndDateChange(date, data[index].document, index, i)}\r\n//           disabled={documentInfo[index]?.[i]?.isChecked}\r\n//         />\r\n//       </Form.Item>\r\n\r\n//       <Form.Item label=\"Title\" name={`title[${index}][${i}]`}>\r\n//         <Input\r\n//           style={{ margin: \"6px\" }}\r\n//           placeholder=\"Enter Document Title\"\r\n//           value={documentInfo[index]?.[i]?.title || ''}\r\n//           onChange={(e) => handleChangingTitle(e.target.value, data[index].document, index, i)}\r\n//         />\r\n//       </Form.Item>\r\n\r\n//       <Form.Item>\r\n//         {/* <Checkbox\r\n//           checked={documentInfo[index]?.[i]?.isChecked || false}\r\n//           onChange={(e) => handleCheckboxChange(e.target.checked, data[index].document, index, i)}\r\n//           style={{ marginLeft: \"10px\" }}\r\n//         >\r\n//           Same as Project Dates\r\n//         </Checkbox> */}\r\n//       </Form.Item>\r\n//     </li>\r\n//   ))}\r\n// </React.Fragment>\r\n\r\n\r\n// ))}\r\n\r\n//           </ul>\r\n//         </div>\r\n//       </Row>\r\n//       <Button\r\n//         type=\"primary\"\r\n//         onClick={mydocumentSaved}\r\n//         // disabled={user?.user?.roleId != 1}\r\n//       >\r\n//         Done\r\n//       </Button>\r\n//     </Modal>\r\n\r\n//     <Modal\r\n//       title=\"Departments\"\r\n//       width={416}\r\n//       centered\r\n//       visible={departmentWise}\r\n//       onCancel={departmentWiseCancel}\r\n//       footer={null}\r\n//       closeIcon={<RiCloseFill className=\"remix-icon text-color-black-100\" size={24} />}\r\n//     >\r\n//             <Button\r\n//             size=\"default\"\r\n//             type=\"primary\"\r\n//             onClick={()=>handleClick()}\r\n\r\n//             style={{ margin: '8px' }}\r\n//           >\r\n//             All Documents\r\n//           </Button>\r\n//       {loading ? (\r\n        \r\n//         departmentOptions.map(option => (\r\n//           <Button\r\n//             key={option.label}\r\n//             loading\r\n//             size=\"default\"\r\n//             style={{ margin: '8px' }}\r\n//           >\r\n//             {option.label}\r\n//           </Button>\r\n//         ))\r\n//       ) : (\r\n//         displayNames.map(name => (\r\n//           <Button\r\n//             key={name}\r\n//             size=\"default\"\r\n//             style={{ margin: '8px' }}\r\n//             onClick={() => handleDepartmentClick(name)}\r\n//             type={selectedDepartment === name ? 'primary' : 'default'}\r\n//           >\r\n//             {name}\r\n//           </Button>\r\n//         ))\r\n//       )}\r\n//     </Modal>\r\n    \r\n//     <div>\r\n//         <div style={{ textAlign: 'center', marginTop: 20 }}>\r\n//         <h1>Select Documents For MDR</h1>\r\n//       </div>\r\n//       <div style={{ marginBottom: \"16px\" ,justifyContent:\"space-between\"}}>\r\n//         <h1>MDR Templates</h1>\r\n\r\n//       </div>\r\n//       <Table\r\n//         columns={columns}\r\n//         dataSource={data.map((item, index) => ({ ...item, key: index }))}\r\n//         // rowSelection={{\r\n//         //   selectedRowKeys: selectedRows,\r\n//         //   onChange: (selectedRowKeys,selectedRows) => setSelectedRows(selectedRows.includes(\"index\")),\r\n//         // }}\r\n//         rowSelection={{\r\n//           selectedRowKeys: selectedRows,\r\n//           onChange:(selectedRows,selectedRowKeys)=> change(selectedRows,selectedRowKeys),\r\n//         }}\r\n//         // onChange={onChange}\r\n//         bordered\r\n//         size='middle'\r\n//       title={() => 'All Department Documents'}\r\n//       footer={() => 'You may filter docs'}\r\n//     expandable={{\r\n//       expandedRowRender: (record) => <p style={{ margin: 0 }}>{record.document}</p>,\r\n//       rowExpandable: (record) => record.departmentCode !== 'Not Expandable',\r\n//     }}\r\n//       />\r\n//       <Space >\r\n//       <Button\r\n//         type=\"primary\"\r\n//         onClick={customModalShow}\r\n//       >\r\n//         Add Custom\r\n//       </Button>\r\n//       <Button\r\n//           type=\"primary\"\r\n//           onClick={templateModalShow}\r\n//           // disabled={user?.user?.roleId != 1}\r\n//         >\r\n//           Proceed\r\n//         </Button>\r\n//         </Space>\r\n//       {/* Custom Modal */}\r\n//       <Modal\r\n//         title=\"Add Custom Field\"\r\n//         width={400}\r\n//         centered\r\n//         visible={customModalVisible}\r\n//         onCancel={customModalCancel}\r\n//         footer={[\r\n//           <Button key=\"cancel\" onClick={customModalCancel}>\r\n//             Cancel\r\n//           </Button>,\r\n//           <Button key=\"add\" type=\"primary\" onClick={handleAddCustom}>\r\n//             Add\r\n//           </Button>,\r\n//         ]}\r\n//         closeIcon={<RiCloseFill className=\"remix-icon text-color-black-100\" size={24} />}\r\n//       >\r\n//         {/* Form fields for custom input */}\r\n//         <Form layout=\"vertical\" name=\"customForm\">\r\n//           {/* Dynamically generate form fields based on existing columns */}\r\n//           {columns.map((column) => (\r\n//             <Form.Item\r\n//               key={column.key}\r\n//               label={column.title}\r\n//               name={column.dataIndex}\r\n//               rules={[\r\n//                 {\r\n//                   required: true,\r\n//                   message: `Please enter ${column.title}`,\r\n//                 },\r\n//               ]}\r\n//             >\r\n//               <Input\r\n//                 onChange={(e) => handleCustomFieldChange(column.dataIndex, e.target.value)}\r\n//               />\r\n//             </Form.Item>\r\n//           ))}\r\n//         </Form>\r\n//       </Modal>\r\n//     </div>\r\n//     </>\r\n\r\n//   );\r\n// };\r\n\r\n// export default MdrTemplate;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // import React, { useEffect, useState } from 'react';\r\n// // import { notification, Row,  Col,  Divider,Checkbox,  Form,  Space,  Table,  Select,  Tag,  Input,  DatePicker,  TimePicker,  Button,  Modal,  message,} from 'antd';\r\n// // import { RiCloseFill, RiCalendarLine } from \"react-icons/ri\";\r\n// // import axios from 'axios'\r\n// // import { useLocation } from 'react-router-dom';\r\n// import jsondata from './data.json';\r\n// // import { saveData, loadData, getAllKeys } from '../../storage';\r\n// // \r\n\r\n// //   const MdrTemplate = ({ projectCode, mdrCode }) => {\r\n// //     const [customModalVisible, setCustomModalVisible] = useState(false);\r\n// //     const [customData, setCustomData] = useState({});\r\n\r\n// //     const { search } = useLocation();\r\n// //     const params = new URLSearchParams(search);\r\n// //     const ProjectCode = params.get('projectCode');\r\n// //     const getMdrCode = params.get('mdrCode');\r\n// //     const projectId = params.get('projectId');\r\n// //     const getMdrTitle= params.get('title');\r\n// //     const departmentId = params.get('departmentId');\r\n\r\n// //     let departmentOptionsString = params.get('departmentOptions');\r\n// //     let departmentOptionSuffix = params.get('departmentOption');\r\n\r\n// //     const projectOptions = params.get('projectOptions');\r\n// //     const approver = params.get('approver');\r\n// //     const reviewer = params.get('reviewer');\r\n// //     const record = params.get('record');\r\n\r\n// //     console.log(\"data from mdr to mdrtemplates\",ProjectCode,getMdrCode,projectId,getMdrTitle,departmentId,\r\n// //     departmentOptionSuffix,departmentOptionsString,projectOptions,approver,reviewer,record);\r\n\r\n// //     const [customFieldValues, setCustomFieldValues] = useState({});\r\n// //     const [templateModalVisible,setTemplateModalVisible] = useState(false)\r\n// //     const [selectedFieldVisible,setSelectedFieldVisible]  = useState(false)\r\n// //     const [title,setTitle] = useState('')\r\n// //     const [selectedRowData, setSelectedRowData] = useState(null);\r\n// //     const [departmentWise, setDepartmentWise] = useState(false);\r\n// //     const [loading, setLoading] = useState(true);\r\n// //     const [displayNames, setDisplayNames] = useState([]);\r\n// //     const [selectedDepartment, setSelectedDepartment] = useState(null);\r\n// //     const [codes,setCodes] = useState([])\r\n// //     const [selectedRows, setSelectedRows] = useState([]);\r\n// //     const [user, setUser] = useState(JSON.parse(localStorage?.getItem(\"user\")));\r\n// //     const [code,setCode] = useState()\r\n// //     const [department,setDepartment] = useState()\r\n        \r\n// //     const [documentDesc,setDocumentDesc] = useState()\r\n// //     const [documentContentCode,setDocumentContentCode] = useState()\r\n// //     const [documentNumbers,setDocumentNumbers] = useState()\r\n\r\n    \r\n// //     const departmentOptionSuffixes = JSON.parse(departmentOptionSuffix);\r\n// //     // \r\n// //     const departmentOptions = JSON.parse(departmentOptionsString);\r\n// //     // \r\n// //     const departmentOptionsMap = new Map(departmentOptions.map(option => [option.value, option.label]));\r\n// //     // \r\n// //     const departmentIds = departmentId.split(',').map(Number);\r\n// //     const departmentLabels = departmentIds.map(id => departmentOptionsMap.get(id));\r\n// //     // \r\n// //     const departmentLabelsString = departmentLabels.join(', ');\r\n// //     // \r\n\r\n// //     const dataArrayWithIndexes = Object.entries(jsondata).map(([index, value]) => ({  ...value, index: parseInt(index), checked: false }));\r\n    \r\n\r\n// //     const [data, setData] = useState(Object.values(dataArrayWithIndexes));\r\n// //     const [dataArray,setDataArray] = useState(Object.values(dataArrayWithIndexes))\r\n// //     let changing = data\r\n// //     let changing2 = dataArray\r\n\r\n    \r\n    \r\n\r\n// //     const [documentCounts, setDocumentCounts] = useState({});\r\n// //     const [documentTitles, setDocumentTitles] = useState({});\r\n// //     const [information,setInformation] = useState([])\r\n// //     const [customInformation,setCustomInformation] = useState([])\r\n\r\n// //     const [titles,setValues] = useState([])\r\n\r\n// //     const [documentInfo, setDocumentInfo] = useState([]);\r\n    \r\n// //     const columns = [\r\n// //       {\r\n// //         title: 'Sr.#',\r\n// //         dataIndex: 'code', // Assuming 'code' is the appropriate field for 'Sr.#'\r\n// //         key: 'code',\r\n// //       },\r\n// //       {\r\n// //         title: 'Document',\r\n// //         dataIndex: 'documentTitle',\r\n// //         key: 'documentTitle',\r\n// //       },\r\n// //       {\r\n// //         title: 'Department Code',\r\n// //         dataIndex: 'departmentCode',\r\n// //         key: 'departmentCode',\r\n// //         filters: [\r\n// //           {\r\n// //             text: 'Project Management',\r\n// //             value: 'PM',\r\n// //           },\r\n// //           {\r\n// //             text: 'Process',\r\n// //             value: 'PRO',\r\n// //           },\r\n// //           {\r\n// //             text: 'Piping',\r\n// //             value: 'PIP',\r\n// //           },\r\n// //           {\r\n// //             text: 'Mechanical',\r\n// //             value: 'TK',\r\n// //           },\r\n// //           {\r\n// //             text: 'Civil/Structure',\r\n// //             value: 'CIV',\r\n// //           },\r\n// //           {\r\n// //             text: 'Electrical',\r\n// //             value: 'ELE',\r\n// //           },\r\n// //           {\r\n// //             text: 'Instrumentation',\r\n// //             value: 'INS',\r\n// //           },\r\n// //         ],\r\n// //         filterMode: 'tree',\r\n// //         filterSearch: true,\r\n// //         onFilter:  (value, record) => record.departmentCode === value,\r\n// //       },\r\n// //       {\r\n// //         title: 'Document Content Code',\r\n// //         dataIndex: 'documentContentCode',\r\n// //         key: 'documentContentCode',\r\n// //       },\r\n// //       {\r\n// //         title: 'DOCUMENT NUMBER',\r\n// //         dataIndex: 'document', // Use 'documentNumber' as the dataIndex\r\n// //         key: 'document',\r\n// //       },\r\n// //       {\r\n// //         title: \"No Of Documents\",\r\n// //         key: \"noOfDocuments\",\r\n// //         render: (_, record) => (\r\n// //           <Space size=\"middle\" align=\"center\">\r\n// //             <Button onClick={() => handleCount(record)}>Add </Button>\r\n// //             <Tag style={{ color: \"white\", backgroundColor: \"blue\" }}>{documentCounts[record.document] || 1}</Tag>\r\n// //           </Space>\r\n// //         ),\r\n// //       },\r\n// //     ];\r\n// //     useEffect(() => {\r\n// //       const timeout = setTimeout(() => {\r\n// //         setDisplayNames(departmentOptions.map(option => option.label));\r\n// //         setLoading(false);\r\n// //       }, 1000);\r\n  \r\n// //       return () => clearTimeout(timeout);\r\n// //     }, [])\r\n\r\n// //     const handleCount = (record) => {\r\n// //       setDocumentCounts(prevCounts => {\r\n// //         const updatedCounts = { ...prevCounts };\r\n// //         const currentCount = updatedCounts[record.document] || 1;\r\n// //         updatedCounts[record.document] = currentCount + 1;\r\n// //         // \r\n// //         return updatedCounts;\r\n// //       });\r\n// //     };\r\n\r\n// //     const templateModalShow = () => {\r\n// //       \r\n\r\n// //       setTemplateModalVisible(true);  \r\n// //       const updatedData = [...data];\r\n// //       // \r\n// //       let allInfos = [];\r\n// //       let allCustomInfos = [];\r\n\r\n// // // customData.forEach((index, sequenceNumber) => {\r\n// //     \r\n// //         const count = customData.count;\r\n// //         //         \r\n        \r\n// //         for (let i = 0; i < count; i++) {\r\n// //           let newDocument = customData.document.replace('00X', (i + 1).toString().padStart(3, '0')).replace(\"xxxx\",ProjectCode)\r\n// //           // \r\n// //           // Save the document name in allInfos array\r\n// //           if (!allCustomInfos[i]) {\r\n// //             allCustomInfos[i] = {};\r\n// //           }\r\n// //           allCustomInfos[i] = newDocument;        \r\n// //         }\r\n// //       \r\n\r\n// //       selectedRows.forEach((index, sequenceNumber) => {\r\n// //         const count = documentCounts[data[index].document] || 1;\r\n// //         //         \r\n// //         for (let i = 0; i < count; i++) {\r\n// //           let newDocument = data[index].document.replace('00X', (i + 1).toString().padStart(3, '0')).replace(\"xxxx\",ProjectCode)\r\n// //           // \r\n// //           // Save the document name in allInfos array\r\n// //           if (!allInfos[index]) {\r\n// //             allInfos[index] = {};\r\n// //           }\r\n// //           allInfos[index][i] = newDocument;\r\n      \r\n// //           updatedData[index] = {\r\n// //             ...data[index],\r\n// //             count: documentCounts[data[index].document]\r\n// //           };\r\n// //         // \r\n          \r\n// //         }\r\n      \r\n// //       });\r\n// //       \r\n// //       \r\n// //       setCustomInformation(allCustomInfos)\r\n\r\n// //       setInformation(allInfos)\r\n// //       // \r\n// //       // \r\n// //       setData(updatedData);\r\n// //       \r\n\r\n      \r\n// //     };\r\n\r\n// //   const handleChangingTitle = (title, document, index, i) => {\r\n// //     setDocumentInfo((prevDocumentInfo) => {\r\n// //       const newDocumentInfo = [...prevDocumentInfo];\r\n// //       newDocumentInfo[index] = newDocumentInfo[index] || [];\r\n// //       newDocumentInfo[index][i] = {\r\n// //         ...newDocumentInfo[index][i],\r\n// //         title,\r\n// //       };\r\n// //       // \r\n\r\n// //       return newDocumentInfo;\r\n// //     });\r\n// //   };\r\n  \r\n// //   const handleStartDateChange = (date, document, index, i) => {\r\n// //     setDocumentInfo((prevDocumentInfo) => {\r\n// //       const newDocumentInfo = [...prevDocumentInfo];\r\n// //       newDocumentInfo[index] = newDocumentInfo[index] || [];\r\n// //       newDocumentInfo[index][i] = {\r\n// //         ...newDocumentInfo[index][i],\r\n// //         startDate: date ? date.toDate() : null,\r\n// //       };\r\n// //       return newDocumentInfo;\r\n// //     });\r\n// //   };\r\n  \r\n// //   const handleEndDateChange = (date, document, index, i) => {\r\n// //     setDocumentInfo((prevDocumentInfo) => {\r\n// //       const newDocumentInfo = [...prevDocumentInfo];\r\n// //       newDocumentInfo[index] = newDocumentInfo[index] || [];\r\n// //       newDocumentInfo[index][i] = {\r\n// //         ...newDocumentInfo[index][i],\r\n// //         endDate: date ? date.toDate() : null,\r\n// //       };\r\n// //       return newDocumentInfo;\r\n// //     });\r\n// //   };\r\n// //   const onChange = (pagination, filters, sorter, extra) => {\r\n// //     \r\n// //   };\r\n  \r\n// //   const change=(selectedRows,selectedRowKeys)=>{\r\n// //     // \r\n// //     const updatedSelectedRowKeys = selectedRowKeys.map(row => ({ ...row, checked: true }));\r\n// //     \r\n// //     const indexes = updatedSelectedRowKeys.map(row => row.index);\r\n// //     // \r\n// //     setSelectedRows(indexes)\r\n// //   }\r\n  \r\n// //   const handleCheckboxChange = (isCheckedValue, document, index, i) => {\r\n// //     setDocumentInfo((prevDocumentInfo) => {\r\n// //       const newDocumentInfo = [...prevDocumentInfo];\r\n// //       newDocumentInfo[index] = newDocumentInfo[index] || [];\r\n  \r\n// //       // If checkbox is unchecked, restore previous startDate and endDate values\r\n// //       if (!isCheckedValue) {\r\n// //         newDocumentInfo[index][i] = {\r\n// //           title: newDocumentInfo[index]?.[i]?.title || '',\r\n// //           isChecked: false,\r\n// //           startDate: newDocumentInfo[index]?.[i]?.prevStartDate || '',\r\n// //           endDate: newDocumentInfo[index]?.[i]?.prevEndDate || '',\r\n// //           prevStartDate: undefined,\r\n// //           prevEndDate: undefined,\r\n// //         };\r\n// //       } else {\r\n// //         newDocumentInfo[index][i] = {\r\n// //           title: newDocumentInfo[index]?.[i]?.title || '',\r\n// //           isChecked: true,\r\n// //           prevStartDate: newDocumentInfo[index]?.[i]?.startDate,\r\n// //           prevEndDate: newDocumentInfo[index]?.[i]?.endDate,\r\n// //         };\r\n// //       }\r\n  \r\n// //       return newDocumentInfo;\r\n// //     });  \r\n// //   };\r\n  \r\n  \r\n// //     const departmentWiseShow = () => {\r\n// //       setDepartmentWise(true);\r\n// //     };\r\n  \r\n// //     const departmentWiseCancel = () => {\r\n// //       setDepartmentWise(false);\r\n// //     };\r\n// //     const addDocument = async () => {\r\n      \r\n// //       const departmentOptions = await JSON.parse(departmentOptionsString);\r\n// //       try {\r\n// //         var title=getMdrTitle;\r\n// //         // \r\n// //         var mdrCode=getMdrCode;\r\n// //         // \r\n// //         mdrCode=mdrCode.replace(/\\s/g, '');\r\n// //         // \r\n// //         var count = selectedRows.length\r\n// //         // \r\n        \r\n\r\n// //         selectedRows.forEach(async (index) => {\r\n// //           let documentValue = data[index].document;\r\n// //           let count = data[index].count||1\r\n// //           // \r\n// //           const masterDocumentName=title;\r\n// //           const assignedBy=user.user.roleId;\r\n// //           const assignedFrom=user.user.id;\r\n// //           \r\n// //           for (let i = 0; i < count; i++) {\r\n// //             try {\r\n// //               var docTitle = documentInfo[index][i].title;\r\n// //               var startedDate = documentInfo[index][i].startDate\r\n// //               var expectedEndedDate = documentInfo[index][i].endDate\r\n// //               var title=information[index][i];\r\n// //               var version='000';\r\n\r\n// //               \r\n// //               const responseDoc = await axios.post(\r\n// //                 \"http://127.0.0.1:8083/api/documents/\",\r\n// //                 {\r\n// //                   title,\r\n// //                   startedDate,\r\n// //                   expectedEndedDate,\r\n// //                   docTitle,\r\n// //                   departmentId,\r\n// //                   projectId,\r\n// //                   companyId: user?.user?.companyId,\r\n// //                   userId: user?.user?.id,\r\n// //                   userName: `${user?.user?.firstName} ${user?.user?.lastName}`,\r\n// //                   masterDocumentId: mdrCode,\r\n// //                   masterDocumentName,\r\n// //                   projectCode,\r\n// //                   departmentName:departmentLabelsString,\r\n// //                   status : \"Initialized\",\r\n// //                   assignedBy,\r\n// //                   assignedFrom,\r\n// //                    approver,\r\n// //                    reviewer,\r\n// //                    version\r\n// //                 },\r\n// //                 {\r\n// //                   headers: {\r\n// //                     Authorization: user?.accessToken,\r\n// //                   },\r\n// //                 }\r\n// //               );\r\n// //             } catch (error) {\r\n// //               \r\n// //             }  \r\n// //           }\r\n// //         });\r\n\r\n// // \r\n// // \r\n// //         // selectedRows.forEach(async (index) => {\r\n// //           let countCustom = customData.count||1\r\n// //           const masterDocumentName=title;\r\n// //           const assignedBy=user.user.roleId;\r\n// //           const assignedFrom=user.user.id;\r\n// //           \r\n// //           for (let i = 0; i < countCustom; i++) {\r\n// //             try {\r\n// //               var docTitle = documentInfo[0][i].title;\r\n// //               var startedDate = documentInfo[0][i].startDate\r\n// //               var expectedEndedDate = documentInfo[0][i].endDate\r\n// //               var title=customInformation[i];\r\n// //               var version='000';\r\n\r\n// //               \r\n// //               const responseDoc = await axios.post(\r\n// //                 \"http://127.0.0.1:8083/api/documents/\",\r\n// //                 {\r\n// //                   title,\r\n// //                   startedDate,\r\n// //                   expectedEndedDate,\r\n// //                   docTitle,\r\n// //                   departmentId,\r\n// //                   projectId,\r\n// //                   companyId: user?.user?.companyId,\r\n// //                   userId: user?.user?.id,\r\n// //                   userName: `${user?.user?.firstName} ${user?.user?.lastName}`,\r\n// //                   masterDocumentId: mdrCode,\r\n// //                   masterDocumentName,\r\n// //                   projectCode,\r\n// //                   departmentName:departmentLabelsString,\r\n// //                   status : \"Initialized\",\r\n// //                   assignedBy,\r\n// //                   assignedFrom,\r\n// //                    approver,\r\n// //                    reviewer,\r\n// //                    version\r\n// //                 },\r\n// //                 {\r\n// //                   headers: {\r\n// //                     Authorization: user?.accessToken,\r\n// //                   },\r\n// //                 }\r\n// //               );\r\n// //             } catch (error) {\r\n// //               \r\n// //             }  \r\n// //           }\r\n// //         // });\r\n\r\n// //         if(record){\r\n// //           const response = await axios.put(\r\n// //             \"http://127.0.0.1:8083/api/documents/mdr\",\r\n// //             {\r\n// //               record,\r\n// //               title,\r\n// //               departmentId,\r\n// //               projectId,\r\n// //               noOfDocuments:count,\r\n// //               status:\"Ongoing\",\r\n// //               companyId: user?.user?.companyId,\r\n// //               authorId: user?.user?.id,\r\n// //               authorName: `${user?.user?.firstName} ${user?.user?.lastName}`,\r\n// //               mdrCode,\r\n// //               projectCode: ProjectCode,\r\n// //               departmentName: departmentLabelsString,\r\n// //             },\r\n// //             {\r\n// //               headers: {\r\n// //                 Authorization: user?.accessToken,\r\n// //               },\r\n// //             }\r\n// //           );     \r\n// //         }else{\r\n\r\n// //           \r\n// //           const response = await axios.post(\r\n// //             \"http://127.0.0.1:8083/api/documents/mdr\",\r\n// //             {\r\n// //               title,\r\n// //               departmentId,\r\n// //               projectId,\r\n// //               noOfDocuments:count,\r\n// //               status:\"Ongoing\",\r\n// //               companyId: user?.user?.companyId,\r\n// //               authorId: user?.user?.id,\r\n// //               authorName: `${user?.user?.firstName} ${user?.user?.lastName}`,\r\n// //               mdrCode,\r\n// //               projectCode: ProjectCode,\r\n// //               departmentName: departmentLabelsString,\r\n// //             },\r\n// //             {\r\n// //               headers: {\r\n// //                 Authorization: user?.accessToken,\r\n// //               },\r\n// //             }\r\n            \r\n// //           );\r\n// //         }\r\n// //         notification.success({\r\n// //                 message: `${response?.data?.message}`,\r\n// //                 style: {\r\n// //                   backgroundColor: '#52c41a', // Red color background\r\n// //                   color: '#fff', // White text color\r\n// //                 },\r\n// //               }\r\n// //             )\r\n// //             if (selectedRows.length === 0) {\r\n// //           message.error('Please select at least one row.');\r\n// //           return;\r\n// //         }\r\n// //       } catch (error) {\r\n// //         // Handle errors\r\n// //         console.error(\"Error adding MDR:\", error);\r\n// //       }\r\n// //     };\r\n\r\n// //     const handleDepartmentClick = (name) => {\r\n// //       \r\n// //       setSelectedDepartment(name);\r\n// //       departmentWiseCancel();\r\n// //       filterData(name);\r\n// //     };\r\n\r\n// //     // const filterData = (selectedDepartment) => {\r\n\r\n// //     //   const filteredData = [];\r\n// //     //   for (const data of dataArray) {\r\n// //     //     if (String(data.category).toUpperCase() === String(selectedDepartment).toUpperCase()) {\r\n// //     //       filteredData.push(data);\r\n// //     //     }\r\n// //     //   }\r\n// //     //   \r\n// //     //   setData(filteredData);\r\n// //     // };\r\n  \r\n// //     const filterData = (selectedDepartment) => {\r\n// //       \r\n// //       \r\n// //       const filteredIndexes = dataArray\r\n// //       .filter(item => item.category.toUpperCase() === selectedDepartment.toUpperCase())\r\n    \r\n// //       const filteredRowKeys = dataArray\r\n// //       .filter((row, index) => selectedRows.includes(index) && row.checked)\r\n// //       .map(row => row.index);\r\n// //       \r\n// //     // Call setSelectedRows to update the selected rows\r\n// //       setSelectedRows(filteredRowKeys);\r\n  \r\n// //       \r\n// //         // const filteredDataWithIndexes = filteredIndexes.map(index => dataArrayWithIndexes[index]);\r\n// //       // const filteredDataValues = filteredDataWithIndexes.map(({ value }) => value);\r\n      \r\n// //       // \r\n// //       setData(filteredIndexes);\r\n// //       // setFilteredValues(filteredDataWithIndexes); // Assuming you have a state variable for storing filtered values\r\n// //     };\r\n    \r\n\r\n// //     // const filterData = (selectedDepartment) => {\r\n// //     //   const filteredIndexes = dataArrayWithIndexes\r\n// //     //     .filter(({ value }) => String(value.category).toUpperCase() === String(selectedDepartment).toUpperCase())\r\n// //     //     .map(({ index }) => index);\r\n    \r\n      \r\n// //     //   setData(filteredDataValues);\r\n// //     // };\r\n\r\n// //     const handleClick = () => {\r\n// //       departmentWiseCancel();\r\n// //       setData(dataArray)\r\n// //     };\r\n    \r\n// //     const mydocumentSaved = async() => {      \r\n// //       \r\n// //       \r\n// //       await addDocument();\r\n// //       notification.success({\r\n// //         message: `Documents Successfully Added`,\r\n// //         style: {\r\n// //           backgroundColor: '#52c41a', // Red color background\r\n// //           color: '#fff', // White text color\r\n// //         },\r\n// //       }\r\n// //     )      // selectedRows.forEach((index) => {\r\n// //       //   const savedData = loadData(`doc-${index}`);\r\n// //       //   \r\n// //       // });\r\n    \r\n// //       templateModalCancel();\r\n\r\n// //     };\r\n    \r\n// //     const templateModalCancel = () => {\r\n// //       setTemplateModalVisible(false);\r\n      \r\n// //     };\r\n\r\n// //     const selectedModalShow = () => {\r\n// //       setSelectedFieldVisible(true);\r\n// //     };\r\n  \r\n// //     const selectedModalCancel = () => {\r\n// //       setSelectedFieldVisible(false);\r\n// //     };\r\n\r\n// //     const handleUpdate = (record) => {\r\n// //       setSelectedRowData(record);\r\n// //       selectedModalShow();\r\n// //     };\r\n    \r\n// //     const getAllCodes = async () => {\r\n// //       \r\n\r\n// //       try {\r\n// //         const response = await axios.get(\r\n// //           `http://127.0.0.1:8083/api/documents/getCodes?companyId=${user?.user?.companyId}`,\r\n// //           {\r\n// //             headers: {\r\n// //               Authorization: user?.accessToken,\r\n// //             },\r\n// //           }\r\n// //         );\r\n// //         var newResponse=response.data.documentNumberFormat.split('-');\r\n// //         setCodes(ProjectCode+'-'+newResponse[1]+'-'+newResponse[2]+'-'+getMdrCode+'-'+'00X')        \r\n\r\n// //       } catch (error) {\r\n// //         console.error(\"Error fetching projects:\", error?.message);\r\n// //       }\r\n// //     };\r\n// //     useEffect(()=>{\r\n// //       getAllCodes()\r\n// //     },[])\r\n\r\n// //     useEffect(() => {\r\n// //       // This will be executed after the state is updated\r\n// //       // \r\n// //     }, [information]);\r\n\r\n// //     const customModalShow = () => {\r\n// //       setCustomModalVisible(true);\r\n// //     };\r\n  \r\n// //     const customModalCancel = () => {\r\n// //       setCustomModalVisible(false);\r\n// //     };\r\n  \r\n// //     const handleCustomFieldChange = (fieldName, value) => {\r\n// //       setCustomFieldValues({ ...customFieldValues, [fieldName]: value });\r\n// //     };\r\n// //     const handleDone = (value) => {\r\n// //       if (selectedRowData) {\r\n// //         const updatedData = [...data];\r\n// //         const index = selectedRowData.key;\r\n// //         const newDocument = `${ProjectCode}-${title}-${getMdrCode}-00X`;\r\n    \r\n// //         updatedData[index] = {\r\n// //           ...selectedRowData,\r\n// //           document: newDocument,\r\n// //         };\r\n    \r\n// //         setData(updatedData);\r\n// //         // setDataArray(updatedData);\r\n// //         setSelectedRowData(null);\r\n// //         selectedModalCancel();\r\n// //       }\r\n// //     };\r\n    \r\n// //     const handleAddCustom = () => {\r\n// //       // Create a new object with properties matching existing columns\r\n// //       const category = departmentOptionSuffixes.find(dept => dept.value == department)\r\n// //       const document = `xxxx-01-${department}-${documentContentCode}-00X`\r\n// //       const customData = {\r\n// //         count:documentNumbers||'',\r\n// //         departmentCode: department || '',\r\n// //         documentContentCode: documentContentCode || '',\r\n// //         documentTitle: documentDesc || '',\r\n// //         areaCode:\"01\",\r\n// //         category:category.label,\r\n// //         sequenceNumber:\"00X\",\r\n// //         document:document,\r\n// //       };\r\n\r\n// //       \r\n// //       setCustomData(customData)\r\n  \r\n// //       // Update the data array with the new custom data\r\n// //       // setData(prevData => [...prevData, customData]);\r\n  \r\n// //       // Close the custom modal\r\n// //       setCustomModalVisible(false);\r\n// //     };\r\n// //   return (\r\n// //     <>\r\n// //         <Modal\r\n// //       title=\"Update Code\"\r\n// //       width={400}\r\n// //       centered\r\n// //       visible={selectedFieldVisible}\r\n// //       onCancel={selectedModalCancel}\r\n// //       footer={null}\r\n// //       closeIcon={<RiCloseFill className=\"remix-icon text-color-black-100\" size={24} />}\r\n// //     >\r\n// //       <Row justify=\"space-between\" align=\"center\">\r\n// //       <Col span={20}>\r\n// //             <Form layout=\"vertical\" name=\"basic\">\r\n// //               <Form.Item\r\n// //                 label=\"Update Code\"\r\n// //                 name=\"UpdateCode\"\r\n// //                 rules={[\r\n// //                   {\r\n// //                     required: true,\r\n// //                     message: \"Please Update Code\",\r\n// //                   },\r\n// //                 ]}\r\n// //               >\r\n// //                 <Input\r\n// //                   value={code}\r\n// //                   onChange={(e) =>{ setTitle(e.target.value);\r\n// //                     \r\n// //                   }}\r\n// //                 />\r\n// //                 </Form.Item>\r\n// //                 </Form>\r\n// //                 </Col>\r\n// //       </Row>\r\n// //       <Button\r\n// //           type=\"primary\"\r\n// //           onClick={handleDone}\r\n// //           // disabled={user?.user?.roleId != 1}\r\n// //         >\r\n// //           Confirm\r\n// //         </Button>\r\n// //     </Modal>\r\n\r\n// //     <Modal\r\n// //       title=\"Upload Document\"\r\n// //       width={400}\r\n// //       centered\r\n// //       visible={templateModalVisible}\r\n// //       onCancel={templateModalCancel}\r\n// //       footer={null}\r\n// //       closeIcon={<RiCloseFill className=\"remix-icon text-color-black-100\" size={24} />}\r\n// //     >\r\n// //       <Row justify=\"space-between\" align=\"center\">\r\n// //         <div>\r\n// //           <h3>Selected Documents:</h3>\r\n// //           <ul style={{ margin: \"2px\" ,padding:\"2px\"}}>\r\n// //           {selectedRows.map((index) => (\r\n// //   <React.Fragment key={index}>\r\n// //   {Array.from({ length: data[index].count || 1 }, (_, i) => (\r\n// //     <li key={i} style={{ margin: \"2px\", padding: \"2px\" }}>\r\n// //       <strong style={{ color: \"blue\" }}>Category:</strong> {data[index].category} <br />\r\n// //       <strong style={{ color: \"blue\" }}>Code:</strong> {data[index].code} <br />\r\n// //       <strong style={{ color: \"blue\" }}>Document Number:</strong> {information[index]?.[i] || ''} <br />\r\n// //       <br />\r\n// //       <Form.Item label=\"Start Date\" name={`startedDate[${index}][${i}]`}>\r\n// //         <DatePicker\r\n// //           style={{ width: '100%' }}\r\n// //           onChange={(date) => handleStartDateChange(date, data[index].document, index, i)}\r\n// //           disabled={documentInfo[index]?.[i]?.isChecked}\r\n// //           required\r\n// //         />\r\n// //       </Form.Item>\r\n\r\n// //       <Form.Item label=\"End Date\" name={`endedDate[${index}][${i}]`}>\r\n// //         <DatePicker\r\n// //           style={{ width: '100%' }}\r\n// //           onChange={(date) => handleEndDateChange(date, data[index].document, index, i)}\r\n// //           disabled={documentInfo[index]?.[i]?.isChecked}\r\n// //           required\r\n// //         />\r\n// //       </Form.Item>\r\n\r\n// //       <Form.Item label=\"Title\" name={`title[${index}][${i}]`}>\r\n// //         <Input\r\n// //           style={{ margin: \"6px\" }}\r\n// //           placeholder=\"Enter Document Title\"\r\n// //           value={documentInfo[index]?.[i]?.title || ''}\r\n// //           onChange={(e) => handleChangingTitle(e.target.value, data[index].document, index, i)}\r\n// //           required\r\n// //         />\r\n// //       </Form.Item>\r\n// //     </li>\r\n// //   ))}\r\n// // </React.Fragment>\r\n\r\n\r\n// // ))}\r\n\r\n// //           </ul>\r\n\r\n        \r\n// //           <ul style={{ margin: \"2px\", padding: \"2px\" }}>\r\n// //       {Array.from({ length: customData.count || 1 }, (_, i) => (\r\n\r\n// //         <li key={i} style={{ margin: \"2px\", padding: \"2px\" }}>\r\n// //           <strong style={{ color: \"blue\" }}>Category:</strong> {customData.category} <br />\r\n// //           <strong style={{ color: \"blue\" }}>Code:</strong> {customData.documentContentCode} <br />\r\n// //           <strong style={{ color: \"blue\" }}>Document Number:</strong> {customInformation[i]} <br />\r\n// //           <br />\r\n// //           <Form.Item label=\"Start Date\" name={`startedDate[${i}]`}>\r\n// //             <DatePicker\r\n// //               style={{ width: '100%' }}\r\n// //               onChange={(date) => handleStartDateChange(date, customData.document, 0, i)}\r\n// //               // disabled={documentInfo[0]?.[i]?.isChecked}\r\n// //               required\r\n// //             />\r\n// //           </Form.Item>\r\n\r\n// //           <Form.Item label=\"End Date\" name={`endedDate[${i}]`}>\r\n// //             <DatePicker\r\n// //               style={{ width: '100%' }}\r\n// //               onChange={(date) => handleEndDateChange(date, customData.document, 0, i)}\r\n// //               // disabled={documentInfo[0]?.[i]?.isChecked}\r\n// //               required\r\n// //             />\r\n// //           </Form.Item>\r\n\r\n// //           <Form.Item label=\"Title\" name={`title[${i}]`}>\r\n// //             <Input\r\n// //               style={{ margin: \"6px\" }}\r\n// //               placeholder=\"Enter Document Title\"\r\n// //               value={documentInfo[0]?.[i]?.title || ''}\r\n// //               onChange={(e) => handleChangingTitle(e.target.value, customData.document, 0, i)}\r\n// //               required\r\n// //             />\r\n// //           </Form.Item>\r\n// //         </li>\r\n// //       ))}\r\n// //     </ul>\r\n\r\n         \r\n// //         </div>\r\n// //       </Row>\r\n// //       <Button\r\n// //         type=\"primary\"\r\n// //         onClick={mydocumentSaved}\r\n// //         // disabled={user?.user?.roleId != 1}\r\n// //       >\r\n// //         Done\r\n// //       </Button>\r\n// //     </Modal>\r\n\r\n// //     <Modal\r\n// //       title=\"Departments\"\r\n// //       width={416}\r\n// //       centered\r\n// //       visible={departmentWise}\r\n// //       onCancel={departmentWiseCancel}\r\n// //       footer={null}\r\n// //       closeIcon={<RiCloseFill className=\"remix-icon text-color-black-100\" size={24} />}\r\n// //     >\r\n// //             <Button\r\n// //             size=\"default\"\r\n// //             type=\"primary\"\r\n// //             onClick={()=>handleClick()}\r\n\r\n// //             style={{ margin: '8px' }}\r\n// //           >\r\n// //             All Documents\r\n// //           </Button>\r\n// //       {loading ? (\r\n        \r\n// //         departmentOptions.map(option => (\r\n// //           <Button\r\n// //             key={option.label}\r\n// //             loading\r\n// //             size=\"default\"\r\n// //             style={{ margin: '8px' }}\r\n// //           >\r\n// //             {option.label}\r\n// //           </Button>\r\n// //         ))\r\n// //       ) : (\r\n// //         displayNames.map(name => (\r\n// //           <Button\r\n// //             key={name}\r\n// //             size=\"default\"\r\n// //             style={{ margin: '8px' }}\r\n// //             onClick={() => handleDepartmentClick(name)}\r\n// //             type={selectedDepartment === name ? 'primary' : 'default'}\r\n// //           >\r\n// //             {name}\r\n// //           </Button>\r\n// //         ))\r\n// //       )}\r\n// //     </Modal>\r\n    \r\n// //     <div>\r\n// //         <div style={{ textAlign: 'center', marginTop: 20 }}>\r\n// //         <h1>Select Documents For MDR</h1>\r\n// //       </div>\r\n// //       <div style={{ marginBottom: \"16px\" ,justifyContent:\"space-between\"}}>\r\n// //         <h1>MDR Templates</h1>\r\n\r\n// //       </div>\r\n// //       <Table\r\n// //         columns={columns}\r\n// //         dataSource={data.map((item, index) => ({ ...item, key: index }))}\r\n// //         // rowSelection={{\r\n// //         //   selectedRowKeys: selectedRows,\r\n// //         //   onChange: (selectedRowKeys,selectedRows) => setSelectedRows(selectedRows.includes(\"index\")),\r\n// //         // }}\r\n// //         rowSelection={{\r\n// //           selectedRowKeys: selectedRows,\r\n// //           onChange:(selectedRows,selectedRowKeys)=> change(selectedRows,selectedRowKeys),\r\n// //         }}\r\n// //         // onChange={onChange}\r\n// //         bordered\r\n// //         size='middle'\r\n// //       title={() => 'All Department Documents'}\r\n// //       footer={() => 'You may filter docs'}\r\n// //     expandable={{\r\n// //       expandedRowRender: (record) => <p style={{ margin: 0 }}>{record.document}</p>,\r\n// //       rowExpandable: (record) => record.departmentCode !== 'Not Expandable',\r\n// //     }}\r\n// //       />\r\n// //       <Space >\r\n// //       <Button\r\n// //         type=\"primary\"\r\n// //         onClick={customModalShow}\r\n// //       >\r\n// //         Add Custom\r\n// //       </Button>\r\n// //       <Button\r\n// //           type=\"primary\"\r\n// //           onClick={templateModalShow}\r\n// //           // disabled={user?.user?.roleId != 1}\r\n// //         >\r\n// //           Proceed\r\n// //         </Button>\r\n// //         </Space>\r\n// //       {/* Custom Modal */}\r\n// //       <Modal\r\n// //         title=\"Add Custom Field\"\r\n// //         width={400}\r\n// //         centered\r\n// //         visible={customModalVisible}\r\n// //         onCancel={customModalCancel}\r\n// //         footer={[\r\n// //           <Button key=\"cancel\" onClick={customModalCancel}>\r\n// //             Cancel\r\n// //           </Button>,\r\n// //           <Button key=\"add\" type=\"primary\" onClick={handleAddCustom}>\r\n// //             Add\r\n// //           </Button>,\r\n// //         ]}\r\n// //         closeIcon={<RiCloseFill className=\"remix-icon text-color-black-100\" size={24} />}\r\n// //       >\r\n// //         {/* Form fields for custom input */}\r\n// //         <Form layout=\"vertical\" name=\"customForm\">\r\n// //           {/* Dynamically generate form fields based on existing columns */}\r\n// //           {/* {columns.map((column) => (\r\n// //             <Form.Item\r\n// //               key={column.key}\r\n// //               label={column.title}\r\n// //               name={column.dataIndex}\r\n// //               rules={[\r\n// //                 {\r\n// //                   required: true,\r\n// //                   message: `Please enter ${column.title}`,\r\n// //                 },\r\n// //               ]}\r\n// //             >\r\n// //               <Input\r\n// //                 onChange={(e) => handleCustomFieldChange(column.dataIndex, e.target.value)}\r\n// //               />\r\n// //             </Form.Item>\r\n// //           ))} */}\r\n        \r\n// //               <Form.Item\r\n// //                 label=\"Department\"\r\n// //                 name=\"department\"\r\n// //                 rules={[\r\n// //                   {\r\n// //                     required: true,\r\n// //                     message: \"Please select Project Name\",\r\n// //                   },\r\n// //                 ]}\r\n// //               >\r\n// //               <Select\r\n// //                   options={departmentOptionSuffixes}\r\n// //                   value={department}\r\n// //                   onChange={(value) => setDepartment(value)}\r\n// //                 />              \r\n// //                 </Form.Item>\r\n\r\n// //                 <Form.Item label=\"Document\" name=\"document\" rules={[\r\n// //                   {\r\n// //                     required: true,\r\n// //                     message: \"Please Add Document\",\r\n// //                   },\r\n// //                 ]}>\r\n// //             <Input\r\n// //               value={documentDesc}\r\n// //               onChange={(e) => setDocumentDesc(e.target.value)}\r\n// //             />\r\n// //           </Form.Item>\r\n\r\n// //           <Form.Item label=\"Document Content Code\" name=\"documentContentCode\" rules={[\r\n// //                   {\r\n// //                     required: true,\r\n// //                     message: \"Please Add Document Content Code\",\r\n// //                   },\r\n// //                 ]}>\r\n// //             <Input\r\n// //               value={documentContentCode}\r\n// //               onChange={(e) => setDocumentContentCode(e.target.value)}\r\n// //             />\r\n// //           </Form.Item>\r\n\r\n// //           <Form.Item label=\"Number Of Documents\" name=\"noOfDoxuments\" rules={[\r\n// //                   {\r\n// //                     required: true,\r\n// //                     message: \"Please Add Number of Documents\",\r\n// //                   },\r\n// //                 ]}>\r\n// //             <Input\r\n// //               value={documentNumbers}\r\n// //               onChange={(e) => setDocumentNumbers(e.target.value)}\r\n// //             />\r\n// //           </Form.Item>\r\n\r\n          \r\n\r\n// //         </Form>\r\n// //       </Modal>\r\n// //     </div>\r\n// //     </>\r\n\r\n// //   );\r\n// // };\r\n\r\n// // export default MdrTemplate;\r\nimport React, { useEffect, useState } from 'react';\r\nimport { notification, Row,  Col,  Divider,Checkbox,  Form,  Space,  Table,  Select,  Tag,  Input,  DatePicker,  TimePicker,  Button,  Modal,  message,} from 'antd';\r\nimport { RiCloseFill, RiCalendarLine } from \"react-icons/ri\";\r\nimport axios from 'axios'\r\nimport { useLocation } from 'react-router-dom';\r\nimport jsondata from './data.json';\r\nimport { saveData, loadData, getAllKeys } from '../../storage';\r\n\r\n\r\n  const MdrTemplate = ({ projectCode, mdrCode }) => {\r\n    const [customModalVisible, setCustomModalVisible] = useState(false);\r\n    const [customData, setCustomData] = useState({});\r\n\r\n    const { search } = useLocation();\r\n    const params = new URLSearchParams(search);\r\n    const ProjectCode = params.get('projectCode');\r\n    const getMdrCode = params.get('mdrCode');\r\n    const projectId = params.get('projectId');\r\n    const getMdrTitle= params.get('title');\r\n    const departmentId = params.get('departmentId');\r\n\r\n    let departmentOptionsString = params.get('departmentOptions');\r\n    let departmentOptionSuffix = params.get('departmentOption');\r\n\r\n    const projectOptions = params.get('projectOptions');\r\n    const approver = params.get('approver');\r\n    const reviewer = params.get('reviewer');\r\n    const record = params.get('record');\r\n\r\n    console.log(\"data from mdr to mdrtemplates\",ProjectCode,getMdrCode,projectId,getMdrTitle,departmentId,\r\n    departmentOptionSuffix,departmentOptionsString,projectOptions,approver,reviewer,record);\r\n\r\n    const [customFieldValues, setCustomFieldValues] = useState({});\r\n    const [templateModalVisible,setTemplateModalVisible] = useState(false)\r\n    const [selectedFieldVisible,setSelectedFieldVisible]  = useState(false)\r\n    const [title,setTitle] = useState('')\r\n    const [selectedRowData, setSelectedRowData] = useState(null);\r\n    const [departmentWise, setDepartmentWise] = useState(false);\r\n    // const [documentValidation, setDocumentValidation] = useState(true);\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const [displayNames, setDisplayNames] = useState([]);\r\n    const [selectedDepartment, setSelectedDepartment] = useState(null);\r\n    const [codes,setCodes] = useState([])\r\n    const [selectedRows, setSelectedRows] = useState([]);\r\n    const [user, setUser] = useState(JSON.parse(localStorage?.getItem(\"user\")));\r\n    const [code,setCode] = useState()\r\n    const [department,setDepartment] = useState()\r\n        \r\n    const [documentDesc,setDocumentDesc] = useState()\r\n    const [documentContentCode,setDocumentContentCode] = useState()\r\n    const [documentNumbers,setDocumentNumbers] = useState()\r\n\r\n    \r\n    const departmentOptionSuffixes = JSON.parse(departmentOptionSuffix);\r\n    // \r\n    const departmentOptions = JSON.parse(departmentOptionsString);\r\n    // \r\n    const departmentOptionsMap = new Map(departmentOptions.map(option => [option.value, option.label]));\r\n    // \r\n    const departmentIds = departmentId.split(',').map(Number);\r\n    const departmentLabels = departmentIds.map(id => departmentOptionsMap.get(id));\r\n    // \r\n    const departmentLabelsString = departmentLabels.join(', ');\r\n    // \r\n\r\n    const dataArrayWithIndexes = Object.entries(jsondata).map(([index, value]) => ({  ...value, index: parseInt(index), checked: false }));\r\n    \r\n\r\n    const [data, setData] = useState(Object.values(dataArrayWithIndexes));\r\n    const [dataArray,setDataArray] = useState(Object.values(dataArrayWithIndexes))\r\n    let changing = data\r\n    let changing2 = dataArray\r\n\r\n    \r\n    \r\n\r\n    const [documentCounts, setDocumentCounts] = useState({});\r\n    const [documentTitles, setDocumentTitles] = useState({});\r\n    const [information,setInformation] = useState([])\r\n    const [customInformation,setCustomInformation] = useState([])\r\n\r\n    const [titles,setValues] = useState([])\r\n\r\n    const [documentInfo, setDocumentInfo] = useState([]);\r\n    \r\n    const columns = [\r\n      {\r\n        title: 'Sr.#',\r\n        dataIndex: 'code', // Assuming 'code' is the appropriate field for 'Sr.#'\r\n        key: 'code',\r\n      },\r\n      {\r\n        title: 'Document',\r\n        dataIndex: 'documentTitle',\r\n        key: 'documentTitle',\r\n      },\r\n      {\r\n        title: 'Department Code',\r\n        dataIndex: 'departmentCode',\r\n        key: 'departmentCode',\r\n        filters: [\r\n          {\r\n            text: 'Project Management',\r\n            value: 'PM',\r\n          },\r\n          {\r\n            text: 'Process',\r\n            value: 'PRO',\r\n          },\r\n          {\r\n            text: 'Piping',\r\n            value: 'PIP',\r\n          },\r\n          {\r\n            text: 'Mechanical',\r\n            value: 'TK',\r\n          },\r\n          {\r\n            text: 'Civil/Structure',\r\n            value: 'CIV',\r\n          },\r\n          {\r\n            text: 'Electrical',\r\n            value: 'ELE',\r\n          },\r\n          {\r\n            text: 'Instrumentation',\r\n            value: 'INS',\r\n          },\r\n        ],\r\n        filterMode: 'tree',\r\n        filterSearch: true,\r\n        onFilter:  (value, record) => record.departmentCode === value,\r\n      },\r\n      {\r\n        title: 'Document Content Code',\r\n        dataIndex: 'documentContentCode',\r\n        key: 'documentContentCode',\r\n      },\r\n      {\r\n        title: 'DOCUMENT NUMBER',\r\n        dataIndex: 'document', // Use 'documentNumber' as the dataIndex\r\n        key: 'document',\r\n      },\r\n      {\r\n        title: \"No Of Documents\",\r\n        key: \"noOfDocuments\",\r\n        render: (_, record) => (\r\n          <Space size=\"middle\" align=\"center\">\r\n            <Tag style={{ color: \"white\", backgroundColor: \"blue\" }} onClick={() => handleCount(record,\"add\")}>+</Tag>\r\n            <Tag style={{ color: \"white\", backgroundColor: \"blue\" }}>{documentCounts[record.document] || 1}</Tag>\r\n            <Tag style={{ color: \"white\", backgroundColor: \"blue\" }} onClick={() => handleCount(record,\"sub\")}>-</Tag>\r\n\r\n          </Space>\r\n        ),\r\n      },\r\n    ];\r\n    useEffect(() => {\r\n      const timeout = setTimeout(() => {\r\n        setDisplayNames(departmentOptions.map(option => option.label));\r\n        setLoading(false);\r\n      }, 1000);\r\n  \r\n      return () => clearTimeout(timeout);\r\n    }, [])\r\n\r\n    const handleCount = (record,a) => {\r\n      setDocumentCounts(prevCounts => {\r\n        const updatedCounts = { ...prevCounts };\r\n        const currentCount = updatedCounts[record.document] || 1;\r\n        if(a==\"add\"){\r\n          updatedCounts[record.document] = currentCount + 1;\r\n        }\r\n        else{\r\n          updatedCounts[record.document] = currentCount -1;\r\n\r\n        }\r\n        // \r\n        return updatedCounts;\r\n      });\r\n    };\r\n\r\n    const templateModalShow = () => {\r\n      \r\n      \r\n\r\n      setTemplateModalVisible(true);  \r\n      const updatedData = [...data];\r\n      // \r\n      let allInfos = [];\r\n      let allCustomInfos = [];\r\n\r\n// customData.forEach((index, sequenceNumber) => {\r\n    \r\n        const count = customData.count;\r\n        //         \r\n        \r\n        for (let i = 0; i < count; i++) {\r\n          let newDocument = customData.document.replace('00X', (i + 1).toString().padStart(3, '0')).replace(\"xxxx\",ProjectCode)\r\n          // \r\n          // Save the document name in allInfos array\r\n          if (!allCustomInfos[i]) {\r\n            allCustomInfos[i] = {};\r\n          }\r\n          allCustomInfos[i] = newDocument;        \r\n        }\r\n      \r\n\r\n      selectedRows.forEach((index, sequenceNumber) => {\r\n        const count = documentCounts[data[index].document] || 1;\r\n        //         \r\n        for (let i = 0; i < count; i++) {\r\n          let newDocument = data[index].document.replace('00X', (i + 1).toString().padStart(3, '0')).replace(\"xxxx\",ProjectCode)\r\n          // \r\n          // Save the document name in allInfos array\r\n          if (!allInfos[index]) {\r\n            allInfos[index] = {};\r\n          }\r\n          allInfos[index][i] = newDocument;\r\n      \r\n          updatedData[index] = {\r\n            ...data[index],\r\n            count: documentCounts[data[index].document]\r\n          };\r\n        // \r\n          \r\n        }\r\n      \r\n      });\r\n      \r\n      \r\n      setCustomInformation(allCustomInfos)\r\n      setInformation(allInfos)\r\n      // \r\n      // \r\n      setData(updatedData);\r\n      \r\n\r\n      \r\n    };\r\n\r\n  const handleChangingTitle = (title, document, index, i) => {\r\n    setDocumentInfo((prevDocumentInfo) => {\r\n      const newDocumentInfo = [...prevDocumentInfo];\r\n      newDocumentInfo[index] = newDocumentInfo[index] || [];\r\n      newDocumentInfo[index][i] = {\r\n        ...newDocumentInfo[index][i],\r\n        title,\r\n      };\r\n      // \r\n\r\n      return newDocumentInfo;\r\n    });\r\n  };\r\n  \r\n  const handleStartDateChange = (date, document, index, i) => {\r\n    setDocumentInfo((prevDocumentInfo) => {\r\n      const newDocumentInfo = [...prevDocumentInfo];\r\n      newDocumentInfo[index] = newDocumentInfo[index] || [];\r\n      newDocumentInfo[index][i] = {\r\n        ...newDocumentInfo[index][i],\r\n        startDate: date ? date.toDate() : null,\r\n      };\r\n      return newDocumentInfo;\r\n    });\r\n  };\r\n  \r\n  const handleEndDateChange = (date, document, index, i) => {\r\n    setDocumentInfo((prevDocumentInfo) => {\r\n      const newDocumentInfo = [...prevDocumentInfo];\r\n      newDocumentInfo[index] = newDocumentInfo[index] || [];\r\n      newDocumentInfo[index][i] = {\r\n        ...newDocumentInfo[index][i],\r\n        endDate: date ? date.toDate() : null,\r\n      };\r\n      return newDocumentInfo;\r\n    });\r\n  };\r\n  const onChange = (pagination, filters, sorter, extra) => {\r\n    \r\n  };\r\n  \r\n  const change=(selectedRows,selectedRowKeys)=>{\r\n    // \r\n    const updatedSelectedRowKeys = selectedRowKeys.map(row => ({ ...row, checked: true }));\r\n    \r\n    const indexes = updatedSelectedRowKeys.map(row => row.index);\r\n    // \r\n    setSelectedRows(indexes)\r\n  }\r\n  \r\n  const handleCheckboxChange = (isCheckedValue, document, index, i) => {\r\n    setDocumentInfo((prevDocumentInfo) => {\r\n      const newDocumentInfo = [...prevDocumentInfo];\r\n      newDocumentInfo[index] = newDocumentInfo[index] || [];\r\n  \r\n      // If checkbox is unchecked, restore previous startDate and endDate values\r\n      if (!isCheckedValue) {\r\n        newDocumentInfo[index][i] = {\r\n          title: newDocumentInfo[index]?.[i]?.title || '',\r\n          isChecked: false,\r\n          startDate: newDocumentInfo[index]?.[i]?.prevStartDate || '',\r\n          endDate: newDocumentInfo[index]?.[i]?.prevEndDate || '',\r\n          prevStartDate: undefined,\r\n          prevEndDate: undefined,\r\n        };\r\n      } else {\r\n        newDocumentInfo[index][i] = {\r\n          title: newDocumentInfo[index]?.[i]?.title || '',\r\n          isChecked: true,\r\n          prevStartDate: newDocumentInfo[index]?.[i]?.startDate,\r\n          prevEndDate: newDocumentInfo[index]?.[i]?.endDate,\r\n        };\r\n      }\r\n  \r\n      return newDocumentInfo;\r\n    });  \r\n  };\r\n  \r\n  \r\n    const departmentWiseShow = () => {\r\n      setDepartmentWise(true);\r\n    };\r\n  \r\n    const departmentWiseCancel = () => {\r\n      setDepartmentWise(false);\r\n    };\r\n    const addDocument = async () => {\r\n      \r\n      \r\n      const departmentOptions = await JSON.parse(departmentOptionsString);\r\n      try {\r\n        var title=getMdrTitle;\r\n        // \r\n        var mdrCode=getMdrCode;\r\n        // \r\n        mdrCode=mdrCode.replace(/\\s/g, '');\r\n        // \r\n        var count = selectedRows.length\r\n        // \r\n        if(record){\r\n          try {\r\n            const response = await axios.put(\r\n              \"http://127.0.0.1:8083/api/documents/mdr\",\r\n              {\r\n                record,\r\n                title,\r\n                departmentId,\r\n                projectId,\r\n                noOfDocuments:count,\r\n                status:\"Ongoing\",\r\n                companyId: user?.user?.companyId,\r\n                authorId: user?.user?.id,\r\n                authorName: `${user?.user?.firstName} ${user?.user?.lastName}`,\r\n                mdrCode,\r\n                projectCode: ProjectCode,\r\n                departmentName: departmentLabelsString,\r\n              },\r\n              {\r\n                headers: {\r\n                  Authorization: user?.accessToken,\r\n                },\r\n              }\r\n            );\r\n            notification.success({\r\n              message: 'Successfully Created',\r\n              description: `${response.data.message}`,\r\n              style: {\r\n                backgroundColor: '#52c41a', // Green color background\r\n                color: '#fff', // White text color\r\n              },\r\n            }); \r\n          } catch (error) {\r\n            if (error.response?.status === 409) {\r\n              // Conflict error (HTTP 409)\r\n              notification.error({\r\n                message: 'Conflict Error',\r\n                description: 'A mdr with this name or code already exists. Please choose a different name or code.',\r\n                style: {\r\n                  backgroundColor: '#f5222d', // Red color background\r\n                  color: '#fff', // White text color\r\n                },\r\n              });\r\n\r\n              history.push(\"/pages/mdr\")\r\n              return            \r\n            } else {\r\n              // Handle other errors\r\n              notification.success({\r\n                message: 'Successfully Created',\r\n                description: `${response.data.message}`,\r\n                style: {\r\n                  backgroundColor: '#52c41a', // Green color background\r\n                  color: '#fff', // White text color\r\n                },\r\n              });\r\n              \r\n            }    \r\n          }\r\n        }\r\n        else{ \r\n          try {\r\n            const response = await axios.post(\r\n              \"http://127.0.0.1:8083/api/documents/mdr\",\r\n              {\r\n                title,\r\n                departmentId,\r\n                projectId,\r\n                noOfDocuments:count,\r\n                status:\"Ongoing\",\r\n                companyId: user?.user?.companyId,\r\n                authorId: user?.user?.id,\r\n                authorName: `${user?.user?.firstName} ${user?.user?.lastName}`,\r\n                mdrCode,\r\n                projectCode: ProjectCode,\r\n                departmentName: departmentLabelsString,\r\n              },\r\n              {\r\n                headers: {\r\n                  Authorization: user?.accessToken,\r\n                },\r\n              }\r\n              \r\n              \r\n            );\r\n            notification.success({\r\n              message: 'Successfully Created',\r\n              description: `${response.data.message}`,\r\n              style: {\r\n                backgroundColor: '#52c41a', // Green color background\r\n                color: '#fff', // White text color\r\n              },\r\n            });\r\n          } catch (error) {\r\n              if (error.response?.status === 409) {\r\n                // Conflict error (HTTP 409)\r\n                notification.error({\r\n                  message: 'Conflict Error',\r\n                  description: 'A mdr with this name or code already exists. Please choose a different name or code.',\r\n                  style: {\r\n                    backgroundColor: '#f5222d', // Red color background\r\n                    color: '#fff', // White text color\r\n                  },\r\n                });\r\n                history.push(\"/pages/mdr\")            \r\n                return\r\n              } else {\r\n                notification.error({\r\n                  message: 'Error',\r\n                  description: 'An error occurred while adding the mdr. Please try again.',\r\n                  style: {\r\n                    backgroundColor: '#f5222d', // Red color background\r\n                    color: '#fff', // White text color\r\n                  },\r\n                });\r\n              }\r\n            }\r\n          }\r\n        selectedRows.forEach(async (index) => {\r\n          let documentValue = data[index].document;\r\n          let count = data[index].count||1\r\n          const masterDocumentName=title;\r\n          const assignedBy=user.user.roleId;\r\n          const assignedFrom=user.user.id;\r\n          \r\n          for (let i = 0; i < count; i++) {\r\n            try {\r\n              var docTitle = documentInfo[index][i].title;\r\n              var startedDate = documentInfo[index][i].startDate\r\n              var expectedEndedDate = documentInfo[index][i].endDate\r\n              var title=information[index][i];\r\n              var version='000';\r\n\r\n              \r\n              const responseDoc = await axios.post(\r\n                \"http://127.0.0.1:8083/api/documents/\",\r\n                {\r\n                  title,\r\n                  startedDate,\r\n                  expectedEndedDate,\r\n                  docTitle,\r\n                  departmentId,\r\n                  projectId,\r\n                  companyId: user?.user?.companyId,\r\n                  userId: user?.user?.id,\r\n                  userName: `${user?.user?.firstName} ${user?.user?.lastName}`,\r\n                  masterDocumentId: mdrCode,\r\n                  masterDocumentName,\r\n                  projectCode,\r\n                  departmentName:departmentLabelsString,\r\n                  status : \"Initialized\",\r\n                  assignedBy,\r\n                  assignedFrom,\r\n                  approver,\r\n                  reviewer,\r\n                  version\r\n                },\r\n                {\r\n                  headers: {\r\n                    Authorization: user?.accessToken,\r\n                  },\r\n                }\r\n              );\r\n              notification.success({\r\n                message: `Documents Successfully Added`,\r\n                style: {\r\n                  backgroundColor: '#52c41a', // Red color background\r\n                  color: '#fff', // White text color\r\n                },\r\n              }\r\n            )     \r\n            } catch (error) {\r\n              \r\n            }  \r\n          }\r\n        });\r\n\r\n\r\n\r\n\r\n        // selectedRows.forEach(async (index) => {\r\n          if(customData.count !=null ||''){\r\n            let countCustom = customData.count||1\r\n          const masterDocumentName=title;\r\n          const assignedBy=user.user.roleId;\r\n          const assignedFrom=user.user.id;\r\n          \r\n          for (let i = 0; i < countCustom; i++) {\r\n            try {\r\n              var docTitle = documentInfo[0][i].title;\r\n              var startedDate = documentInfo[0][i].startDate\r\n              var expectedEndedDate = documentInfo[0][i].endDate\r\n              var title=customInformation[i];\r\n              var version='000';\r\n\r\n              \r\n              const responseDoc = await axios.post(\r\n                \"http://127.0.0.1:8083/api/documents/\",\r\n                {\r\n                  title,\r\n                  startedDate,\r\n                  expectedEndedDate,\r\n                  docTitle,\r\n                  departmentId,\r\n                  projectId,\r\n                  companyId: user?.user?.companyId,\r\n                  userId: user?.user?.id,\r\n                  userName: `${user?.user?.firstName} ${user?.user?.lastName}`,\r\n                  masterDocumentId: mdrCode,\r\n                  masterDocumentName,\r\n                  projectCode,\r\n                  departmentName:departmentLabelsString,\r\n                  status : \"Initialized\",\r\n                  assignedBy,\r\n                  assignedFrom,\r\n                   approver,\r\n                   reviewer,\r\n                   version\r\n                },\r\n                {\r\n                  headers: {\r\n                    Authorization: user?.accessToken,\r\n                  },\r\n                }\r\n              );\r\n              notification.success({\r\n                message: `Documents Successfully Added`,\r\n                style: {\r\n                  backgroundColor: '#52c41a', // Red color background\r\n                  color: '#fff', // White text color\r\n                },\r\n              }\r\n            )     \r\n            } catch (error) {\r\n              \r\n            }  \r\n          }\r\n            \r\n          }\r\n\r\n        if (selectedRows.length === 0) {\r\n          message.error('Please select at least one row.');\r\n          return;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error adding MDR:\", error);\r\n      }\r\n    };\r\n\r\n    const handleDepartmentClick = (name) => {\r\n      \r\n      setSelectedDepartment(name);\r\n      departmentWiseCancel();\r\n      filterData(name);\r\n    };\r\n\r\n    // const filterData = (selectedDepartment) => {\r\n\r\n    //   const filteredData = [];\r\n    //   for (const data of dataArray) {\r\n    //     if (String(data.category).toUpperCase() === String(selectedDepartment).toUpperCase()) {\r\n    //       filteredData.push(data);\r\n    //     }\r\n    //   }\r\n    //   \r\n    //   setData(filteredData);\r\n    // };\r\n  \r\n    const filterData = (selectedDepartment) => {\r\n      \r\n      \r\n      const filteredIndexes = dataArray\r\n      .filter(item => item.category.toUpperCase() === selectedDepartment.toUpperCase())\r\n    \r\n      const filteredRowKeys = dataArray\r\n      .filter((row, index) => selectedRows.includes(index) && row.checked)\r\n      .map(row => row.index);\r\n      \r\n    // Call setSelectedRows to update the selected rows\r\n      setSelectedRows(filteredRowKeys);\r\n  \r\n      \r\n        // const filteredDataWithIndexes = filteredIndexes.map(index => dataArrayWithIndexes[index]);\r\n      // const filteredDataValues = filteredDataWithIndexes.map(({ value }) => value);\r\n      \r\n      // \r\n      setData(filteredIndexes);\r\n      // setFilteredValues(filteredDataWithIndexes); // Assuming you have a state variable for storing filtered values\r\n    };\r\n    \r\n\r\n    // const filterData = (selectedDepartment) => {\r\n    //   const filteredIndexes = dataArrayWithIndexes\r\n    //     .filter(({ value }) => String(value.category).toUpperCase() === String(selectedDepartment).toUpperCase())\r\n    //     .map(({ index }) => index);\r\n    \r\n      \r\n    //   setData(filteredDataValues);\r\n    // };\r\n\r\n    const handleClick = () => {\r\n      departmentWiseCancel();\r\n      setData(dataArray)\r\n    };\r\n    const mdrValidation = async() => {   \r\n      let count = data[index].count||1\r\n      for (let i = 0; i < count; i++) {\r\n      \r\n       \r\n        \r\n\r\n       };}\r\n    const mydocumentSaved = async() => {      \r\n      \r\n      let documentValidation=true;\r\n\r\n      \r\n    \r\n      selectedRows.forEach(async (index) => {\r\n        let count = data[index].count||1\r\n      const  documentInfo1 = documentInfo.filter(item => item !== undefined);\r\n      console.log(\"count\",count);\r\n      \r\n      console.log(\"DOC INFO1\",documentInfo1);\r\n\r\n        for (let i = 0; i < documentInfo1.length; i++) {\r\n          console.log(\"OUTER LOOP I\",i);\r\n\r\n//          if(documentInfo[i]==null){\r\n//           setDocumentValidation(true);\r\n// message.error('Fill all the fields first')\r\n//          } \r\nconsole.log(documentInfo1[i],'DOC ARRAY');\r\n\r\nfor (let index1 = 0; index1 < documentInfo1[i].length; index1++) {\r\n  console.log(\"INNER LOOP INDEX1\",index1);\r\n\r\n\r\n          if (\r\n\r\n          !documentInfo1[i][index1].hasOwnProperty('title') || \r\n          !documentInfo1[i][index1].hasOwnProperty('startDate') || \r\n          !documentInfo1[i][index1].hasOwnProperty('endDate') ||\r\n          documentInfo1[i][index1]['title'] === null || \r\n          documentInfo1[i][index1]['startDate'] === null || \r\n          documentInfo1[i][index1]['endDate'] === null\r\n        ) {\r\n          console.log(\"IF CONDITION\");\r\n\r\n\r\n          documentValidation=true;\r\n          message.error('Fill all the fields first');\r\n          break;\r\n\r\n        }\r\n      else{\r\n        console.log(\"ELSE CONDITION\");\r\n\r\n        documentValidation=false;\r\n        \r\n\r\n       \r\n\r\n\r\n      }}\r\n\r\n         \r\n        }\r\n     \r\n      }\r\n      \r\n    )\r\n    if(documentValidation==false){\r\n      await addDocument();}\r\n      // selectedRows.forEach((index) => {\r\n      //   const savedData = loadData(`doc-${index}`);\r\n      //   \r\n      // });\r\n      \r\n\r\n       \r\n      templateModalCancel();\r\n\r\n    };\r\n    \r\n    const templateModalCancel = () => {\r\n      setTemplateModalVisible(false);\r\n      \r\n    };\r\n\r\n    const selectedModalShow = () => {\r\n      setSelectedFieldVisible(true);\r\n    };\r\n  \r\n    const selectedModalCancel = () => {\r\n      setSelectedFieldVisible(false);\r\n    };\r\n\r\n    const handleUpdate = (record) => {\r\n      setSelectedRowData(record);\r\n      selectedModalShow();\r\n    };\r\n    \r\n    const getAllCodes = async () => {\r\n      \r\n\r\n      try {\r\n        const response = await axios.get(\r\n          `http://127.0.0.1:8083/api/documents/getCodes?companyId=${user?.user?.companyId}`,\r\n          {\r\n            headers: {\r\n              Authorization: user?.accessToken,\r\n            },\r\n          }\r\n        );\r\n        var newResponse=response.data.documentNumberFormat.split('-');\r\n        setCodes(ProjectCode+'-'+newResponse[1]+'-'+newResponse[2]+'-'+getMdrCode+'-'+'00X')        \r\n\r\n      } catch (error) {\r\n        console.error(\"Error fetching projects:\", error?.message);\r\n      }\r\n    };\r\n    useEffect(()=>{\r\n      getAllCodes()\r\n    },[])\r\n\r\n    useEffect(() => {\r\n      // This will be executed after the state is updated\r\n      // \r\n    }, [information]);\r\n\r\n    const customModalShow = () => {\r\n      setCustomModalVisible(true);\r\n    };\r\n  \r\n    const customModalCancel = () => {\r\n      setCustomModalVisible(false);\r\n    };\r\n  \r\n    const handleCustomFieldChange = (fieldName, value) => {\r\n      setCustomFieldValues({ ...customFieldValues, [fieldName]: value });\r\n    };\r\n    const \r\n    handleDone = (value) => {\r\n      if (selectedRowData) {\r\n        const updatedData = [...data];\r\n        const index = selectedRowData.key;\r\n        const newDocument = `${ProjectCode}-${title}-${getMdrCode}-00X`;\r\n    \r\n        updatedData[index] = {\r\n          ...selectedRowData,\r\n          document: newDocument,\r\n        };\r\n    \r\n        setData(updatedData);\r\n        setSelectedRowData(null);\r\n        selectedModalCancel();\r\n      }\r\n    };\r\n    \r\n    const handleAddCustom = () => {\r\n      // Create a new object with properties matching existing columns\r\n      const category = departmentOptionSuffixes.find(dept => dept.value == department)\r\n      const document = `xxxx-01-${department}-${documentContentCode}-00X`\r\n      const customData = {\r\n        count:documentNumbers||'',\r\n        departmentCode: department || '',\r\n        documentContentCode: documentContentCode || '',\r\n        documentTitle: documentDesc || '',\r\n        areaCode:\"01\",\r\n        category:category.label,\r\n        sequenceNumber:\"00X\",\r\n        document:document,\r\n      };\r\n\r\n      \r\n      setCustomData(customData)\r\n  \r\n      // Update the data array with the new custom data\r\n      // setData(prevData => [...prevData, customData]);\r\n  \r\n      // Close the custom modal\r\n      setCustomModalVisible(false);\r\n    };\r\n  return (\r\n    <>\r\n        <Modal\r\n      title=\"Update Code\"\r\n      width={400}\r\n      centered\r\n      visible={selectedFieldVisible}\r\n      onCancel={selectedModalCancel}\r\n      footer={null}\r\n      closeIcon={<RiCloseFill className=\"remix-icon text-color-black-100\" size={24} />}\r\n    >\r\n      <Row justify=\"space-between\" align=\"center\">\r\n      <Col span={20}>\r\n            <Form layout=\"vertical\" name=\"basic\">\r\n              <Form.Item\r\n                label=\"Update Code\"\r\n                name=\"UpdateCode\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please Update Code\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  value={code}\r\n                  onChange={(e) =>{ setTitle(e.target.value);\r\n                    \r\n                  }}\r\n                />\r\n                </Form.Item>\r\n                </Form>\r\n                </Col>\r\n      </Row>\r\n      <Button\r\n          type=\"primary\"\r\n          onClick={handleDone}\r\n          // disabled={user?.user?.roleId != 1}\r\n        >\r\n          Confirm\r\n        </Button>\r\n    </Modal>\r\n\r\n    <Modal\r\n      title=\"Upload Document\"\r\n      width={400}\r\n      visible={templateModalVisible}\r\n      onCancel={templateModalCancel}\r\n      footer={null}\r\n      closeIcon={<RiCloseFill className=\"remix-icon text-color-black-100\" size={24} />}\r\n    >\r\n      <Row justify=\"space-between\" align=\"center\">\r\n        <div>\r\n          <h3>Selected Documents:</h3>\r\n          <ul style={{ margin: \"2px\" ,padding:\"2px\"}}>\r\n          {selectedRows.map((index) => (\r\n  <React.Fragment key={index}>\r\n  {Array.from({ length: data[index].count || 1 }, (_, i) => (\r\n    <li key={i} style={{ margin: \"2px\", padding: \"2px\" }}>\r\n      <strong style={{ color: \"blue\" }}>Category:</strong> {data[index].category} <br />\r\n      <strong style={{ color: \"blue\" }}>Code:</strong> {data[index].code} <br />\r\n      <strong style={{ color: \"blue\" }}>Document Number:</strong> {information[index]?.[i] || ''} <br />\r\n      <br />\r\n      <Form.Item label=\"Start Date\" name={`startedDate[${index}][${i}]`}>\r\n        <DatePicker\r\n          style={{ width: '100%' }}\r\n          onChange={(date) => handleStartDateChange(date, data[index].document, index, i)}\r\n          disabled={documentInfo[index]?.[i]?.isChecked}\r\n          required\r\n        />\r\n      </Form.Item>\r\n\r\n      <Form.Item label=\"End Date\" name={`endedDate[${index}][${i}]`}>\r\n        <DatePicker\r\n          style={{ width: '100%' }}\r\n          onChange={(date) => handleEndDateChange(date, data[index].document, index, i)}\r\n          disabled={documentInfo[index]?.[i]?.isChecked}\r\n          required\r\n        />\r\n      </Form.Item>\r\n\r\n      <Form.Item label=\"Title\" name={`title[${index}][${i}]`}>\r\n        <Input\r\n          style={{ margin: \"6px\" }}\r\n          placeholder=\"Enter Document Title\"\r\n          value={documentInfo[index]?.[i]?.title || ''}\r\n          onChange={(e) => handleChangingTitle(e.target.value, data[index].document, index, i)}\r\n          required\r\n        />\r\n      </Form.Item>\r\n    </li>\r\n  ))}\r\n</React.Fragment>\r\n\r\n\r\n))}\r\n\r\n          </ul>\r\n\r\n        \r\n          {customData.count !=null ||'' && <ul style={{ margin: \"2px\", padding: \"2px\" }}>\r\n      {Array.from({ length: customData.count || 1 }, (_, i) => (\r\n\r\n        <li key={i} style={{ margin: \"2px\", padding: \"2px\" }}>\r\n          <strong style={{ color: \"blue\" }}>Category:</strong> {customData.category} <br />\r\n          <strong style={{ color: \"blue\" }}>Code:</strong> {customData.documentContentCode} <br />\r\n          <strong style={{ color: \"blue\" }}>Document Number:</strong> {customInformation[i]} <br />\r\n          <br />\r\n          <Form.Item label=\"Start Date\" name={`startedDate[${i}]`}>\r\n            <DatePicker\r\n              style={{ width: '100%' }}\r\n              onChange={(date) => handleStartDateChange(date, customData.document, 0, i)}\r\n              // disabled={documentInfo[0]?.[i]?.isChecked}\r\n              required\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item label=\"End Date\" name={`endedDate[${i}]`}>\r\n            <DatePicker\r\n              style={{ width: '100%' }}\r\n              onChange={(date) => handleEndDateChange(date, customData.document, 0, i)}\r\n              // disabled={documentInfo[0]?.[i]?.isChecked}\r\n              required\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item label=\"Title\" name={`title[${i}]`}>\r\n            <Input\r\n              style={{ margin: \"6px\" }}\r\n              placeholder=\"Enter Document Title\"\r\n              value={documentInfo[0]?.[i]?.title || ''}\r\n              onChange={(e) => handleChangingTitle(e.target.value, customData.document, 0, i)}\r\n              required\r\n            />\r\n          </Form.Item>\r\n        </li>\r\n      ))}\r\n    </ul>}\r\n\r\n         \r\n        </div>\r\n      </Row>\r\n\r\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n  <Button\r\n    type=\"primary\"\r\n    onClick={mydocumentSaved}\r\n    \r\n    // disabled={user?.user?.roleId != 1}\r\n    disabled={\r\n    documentInfo.length==0\r\n    }\r\n    style={{}}\r\n  >\r\n    Done\r\n  </Button>\r\n</div>\r\n\r\n    </Modal>\r\n\r\n    <Modal\r\n      title=\"Departments\"\r\n      width={416}\r\n      centered\r\n      visible={departmentWise}\r\n      onCancel={departmentWiseCancel}\r\n      footer={null}\r\n      closeIcon={<RiCloseFill className=\"remix-icon text-color-black-100\" size={24} />}\r\n    >\r\n            <Button\r\n            size=\"default\"\r\n            type=\"primary\"\r\n            onClick={()=>handleClick()}\r\n\r\n            style={{ margin: '8px' }}\r\n          >\r\n            All Documents\r\n          </Button>\r\n      {loading ? (\r\n        \r\n        departmentOptions.map(option => (\r\n          <Button\r\n            key={option.label}\r\n            loading\r\n            size=\"default\"\r\n            style={{ margin: '8px' }}\r\n          >\r\n            {option.label}\r\n          </Button>\r\n        ))\r\n      ) : (\r\n        displayNames.map(name => (\r\n          <Button\r\n            key={name}\r\n            size=\"default\"\r\n            style={{ margin: '8px' }}\r\n            onClick={() => handleDepartmentClick(name)}\r\n            type={selectedDepartment === name ? 'primary' : 'default'}\r\n          >\r\n            {name}\r\n          </Button>\r\n        ))\r\n      )}\r\n    </Modal>\r\n    \r\n    <div>\r\n        <div style={{ textAlign: 'center', marginTop: 20 }}>\r\n        <h1>Select Documents For MDR</h1>\r\n      </div>\r\n      <div style={{ marginBottom: \"16px\" ,justifyContent:\"space-between\"}}>\r\n        <h1>MDR Templates</h1>\r\n\r\n      </div>\r\n      <Table\r\n        columns={columns}\r\n        dataSource={data.map((item, index) => ({ ...item, key: index }))}\r\n        // rowSelection={{\r\n        //   selectedRowKeys: selectedRows,\r\n        //   onChange: (selectedRowKeys,selectedRows) => setSelectedRows(selectedRows.includes(\"index\")),\r\n        // }}\r\n        rowSelection={{\r\n          selectedRowKeys: selectedRows,\r\n          onChange:(selectedRows,selectedRowKeys)=> change(selectedRows,selectedRowKeys),\r\n        }}\r\n        // onChange={onChange}\r\n        bordered\r\n        size='middle'\r\n      title={() => 'All Department Documents'}\r\n      footer={() => 'You may filter docs'}\r\n    expandable={{\r\n      expandedRowRender: (record) => <p style={{ margin: 0 }}>{record.document}</p>,\r\n      rowExpandable: (record) => record.departmentCode !== 'Not Expandable',\r\n    }}\r\n      />\r\n      <Space >\r\n      <Button\r\n        type=\"primary\"\r\n        onClick={customModalShow}\r\n      >\r\n        Add Custom\r\n      </Button>\r\n      <Button\r\n          type=\"primary\"\r\n          onClick={templateModalShow}\r\n          // disabled={user?.user?.roleId != 1}\r\n        >\r\n          Proceed\r\n        </Button>\r\n        </Space>\r\n      {/* Custom Modal */}\r\n      <Modal\r\n        title=\"Add Custom Field\"\r\n        width={400}\r\n        centered\r\n        visible={customModalVisible}\r\n        onCancel={customModalCancel}\r\n        footer={[\r\n          <Button key=\"cancel\" onClick={customModalCancel}>\r\n            Cancel\r\n          </Button>,\r\n          <Button key=\"add\" type=\"primary\" onClick={handleAddCustom}>\r\n            Add\r\n          </Button>,\r\n        ]}\r\n        closeIcon={<RiCloseFill className=\"remix-icon text-color-black-100\" size={24} />}\r\n      >\r\n        {/* Form fields for custom input */}\r\n        <Form layout=\"vertical\" name=\"customForm\">\r\n          {/* Dynamically generate form fields based on existing columns */}\r\n          {/* {columns.map((column) => (\r\n            <Form.Item\r\n              key={column.key}\r\n              label={column.title}\r\n              name={column.dataIndex}\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: `Please enter ${column.title}`,\r\n                },\r\n              ]}\r\n            >\r\n              <Input\r\n                onChange={(e) => handleCustomFieldChange(column.dataIndex, e.target.value)}\r\n              />\r\n            </Form.Item>\r\n          ))} */}\r\n        \r\n              <Form.Item\r\n                label=\"Department\"\r\n                name=\"department\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please select Project Name\",\r\n                  },\r\n                ]}\r\n              >\r\n              <Select\r\n                  options={departmentOptionSuffixes}\r\n                  value={department}\r\n                  onChange={(value) => setDepartment(value)}\r\n                />              \r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Document\" name=\"document\" rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please Add Document\",\r\n                  },\r\n                ]}>\r\n            <Input\r\n              value={documentDesc}\r\n              onChange={(e) => setDocumentDesc(e.target.value)}\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item label=\"Document Content Code\" name=\"documentContentCode\" rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please Add Document Content Code\",\r\n                  },\r\n                ]}>\r\n            <Input\r\n              value={documentContentCode}\r\n              onChange={(e) => setDocumentContentCode(e.target.value)}\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item label=\"Number Of Documents\" name=\"noOfDoxuments\" rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please Add Number of Documents\",\r\n                  },\r\n                ]}>\r\n            <Input\r\n              value={documentNumbers}\r\n              onChange={(e) => setDocumentNumbers(e.target.value)}\r\n            />\r\n          </Form.Item>\r\n\r\n          \r\n\r\n        </Form>\r\n      </Modal>\r\n    </div>\r\n    </>\r\n\r\n  );\r\n};\r\n\r\nexport default MdrTemplate;","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { SpaceContext } from '.';\nexport default function Item(_ref) {\n  var className = _ref.className,\n      direction = _ref.direction,\n      index = _ref.index,\n      marginDirection = _ref.marginDirection,\n      children = _ref.children,\n      split = _ref.split,\n      wrap = _ref.wrap;\n\n  var _React$useContext = React.useContext(SpaceContext),\n      horizontalSize = _React$useContext.horizontalSize,\n      verticalSize = _React$useContext.verticalSize,\n      latestIndex = _React$useContext.latestIndex,\n      supportFlexGap = _React$useContext.supportFlexGap;\n\n  var style = {};\n\n  if (!supportFlexGap) {\n    if (direction === 'vertical') {\n      if (index < latestIndex) {\n        style = {\n          marginBottom: horizontalSize / (split ? 2 : 1)\n        };\n      }\n    } else {\n      style = _extends(_extends({}, index < latestIndex && _defineProperty({}, marginDirection, horizontalSize / (split ? 2 : 1))), wrap && {\n        paddingBottom: verticalSize\n      });\n    }\n  }\n\n  if (children === null || children === undefined) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: className,\n    style: style\n  }, children), index < latestIndex && split && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"\".concat(className, \"-split\"),\n    style: style\n  }, split));\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport { ConfigContext } from '../config-provider';\nimport Item from './Item';\nimport useFlexGapSupport from '../_util/hooks/useFlexGapSupport';\nexport var SpaceContext = /*#__PURE__*/React.createContext({\n  latestIndex: 0,\n  horizontalSize: 0,\n  verticalSize: 0,\n  supportFlexGap: false\n});\nvar spaceSize = {\n  small: 8,\n  middle: 16,\n  large: 24\n};\n\nfunction getNumberSize(size) {\n  return typeof size === 'string' ? spaceSize[size] : size || 0;\n}\n\nvar Space = function Space(props) {\n  var _classNames;\n\n  var _React$useContext = React.useContext(ConfigContext),\n      getPrefixCls = _React$useContext.getPrefixCls,\n      space = _React$useContext.space,\n      directionConfig = _React$useContext.direction;\n\n  var _props$size = props.size,\n      size = _props$size === void 0 ? (space === null || space === void 0 ? void 0 : space.size) || 'small' : _props$size,\n      align = props.align,\n      className = props.className,\n      children = props.children,\n      _props$direction = props.direction,\n      direction = _props$direction === void 0 ? 'horizontal' : _props$direction,\n      customizePrefixCls = props.prefixCls,\n      split = props.split,\n      style = props.style,\n      _props$wrap = props.wrap,\n      wrap = _props$wrap === void 0 ? false : _props$wrap,\n      otherProps = __rest(props, [\"size\", \"align\", \"className\", \"children\", \"direction\", \"prefixCls\", \"split\", \"style\", \"wrap\"]);\n\n  var supportFlexGap = useFlexGapSupport();\n\n  var _React$useMemo = React.useMemo(function () {\n    return (Array.isArray(size) ? size : [size, size]).map(function (item) {\n      return getNumberSize(item);\n    });\n  }, [size]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n      horizontalSize = _React$useMemo2[0],\n      verticalSize = _React$useMemo2[1];\n\n  var childNodes = toArray(children, {\n    keepEmpty: true\n  });\n  var mergedAlign = align === undefined && direction === 'horizontal' ? 'center' : align;\n  var prefixCls = getPrefixCls('space', customizePrefixCls);\n  var cn = classNames(prefixCls, \"\".concat(prefixCls, \"-\").concat(direction), (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-rtl\"), directionConfig === 'rtl'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-align-\").concat(mergedAlign), mergedAlign), _classNames), className);\n  var itemClassName = \"\".concat(prefixCls, \"-item\");\n  var marginDirection = directionConfig === 'rtl' ? 'marginLeft' : 'marginRight'; // Calculate latest one\n\n  var latestIndex = 0;\n  var nodes = childNodes.map(function (child, i) {\n    if (child !== null && child !== undefined) {\n      latestIndex = i;\n    }\n    /* eslint-disable react/no-array-index-key */\n\n\n    return /*#__PURE__*/React.createElement(Item, {\n      className: itemClassName,\n      key: \"\".concat(itemClassName, \"-\").concat(i),\n      direction: direction,\n      index: i,\n      marginDirection: marginDirection,\n      split: split,\n      wrap: wrap\n    }, child);\n    /* eslint-enable */\n  });\n  var spaceContext = React.useMemo(function () {\n    return {\n      horizontalSize: horizontalSize,\n      verticalSize: verticalSize,\n      latestIndex: latestIndex,\n      supportFlexGap: supportFlexGap\n    };\n  }, [horizontalSize, verticalSize, latestIndex, supportFlexGap]); // =========================== Render ===========================\n\n  if (childNodes.length === 0) {\n    return null;\n  }\n\n  var gapStyle = {};\n\n  if (wrap) {\n    gapStyle.flexWrap = 'wrap'; // Patch for gap not support\n\n    if (!supportFlexGap) {\n      gapStyle.marginBottom = -verticalSize;\n    }\n  }\n\n  if (supportFlexGap) {\n    gapStyle.columnGap = horizontalSize;\n    gapStyle.rowGap = verticalSize;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: cn,\n    style: _extends(_extends({}, gapStyle), style)\n  }, otherProps), /*#__PURE__*/React.createElement(SpaceContext.Provider, {\n    value: spaceContext\n  }, nodes));\n};\n\nexport default Space;"],"names":["_ref","_localStorage","projectCode","mdrCode","customModalVisible","setCustomModalVisible","useState","customData","setCustomData","search","useLocation","params","URLSearchParams","ProjectCode","get","getMdrCode","projectId","getMdrTitle","departmentId","departmentOptionsString","departmentOptionSuffix","projectOptions","approver","reviewer","record","console","log","customFieldValues","setCustomFieldValues","templateModalVisible","setTemplateModalVisible","selectedFieldVisible","setSelectedFieldVisible","title","setTitle","selectedRowData","setSelectedRowData","departmentWise","setDepartmentWise","loading","setLoading","displayNames","setDisplayNames","selectedDepartment","setSelectedDepartment","codes","setCodes","selectedRows","setSelectedRows","user","setUser","JSON","parse","localStorage","getItem","code","setCode","department","setDepartment","documentDesc","setDocumentDesc","documentContentCode","setDocumentContentCode","documentNumbers","setDocumentNumbers","departmentOptionSuffixes","departmentOptions","departmentOptionsMap","Map","map","option","value","label","departmentLabelsString","split","Number","id","join","dataArrayWithIndexes","Object","entries","jsondata","_ref2","index","parseInt","checked","data","setData","values","dataArray","setDataArray","documentCounts","setDocumentCounts","documentTitles","setDocumentTitles","information","setInformation","customInformation","setCustomInformation","titles","setValues","documentInfo","setDocumentInfo","columns","dataIndex","key","filters","text","filterMode","filterSearch","onFilter","departmentCode","render","_","_jsxs","Space","size","align","children","_jsx","Tag","style","color","backgroundColor","onClick","handleCount","document","useEffect","timeout","setTimeout","clearTimeout","a","prevCounts","updatedCounts","currentCount","departmentWiseCancel","filterData","filteredIndexes","filter","item","category","toUpperCase","filteredRowKeys","row","includes","templateModalCancel","selectedModalCancel","async","_user$user17","newResponse","axios","concat","companyId","headers","Authorization","accessToken","documentNumberFormat","error","message","getAllCodes","customModalCancel","_Fragment","Modal","width","centered","visible","onCancel","footer","closeIcon","RiCloseFill","className","Row","justify","Col","span","Form","layout","name","Item","rules","required","Input","onChange","e","target","Button","type","updatedData","newDocument","margin","padding","React","Array","from","length","count","i","_information$index","_documentInfo$index","_documentInfo$index$i","_documentInfo$index2","_documentInfo$index2$","_documentInfo$index3","_documentInfo$index3$","DatePicker","date","handleStartDateChange","prevDocumentInfo","newDocumentInfo","startDate","toDate","disabled","isChecked","handleEndDateChange","endDate","placeholder","handleChangingTitle","display","justifyContent","alignItems","documentValidation","forEach","documentInfo1","undefined","index1","hasOwnProperty","replace","_user$user","_user$user2","_user$user3","_user$user4","response","noOfDocuments","status","authorId","authorName","firstName","lastName","departmentName","notification","success","description","_error$response","history","push","_user$user5","_user$user6","_user$user7","_user$user8","_error$response2","masterDocumentName","assignedBy","roleId","assignedFrom","_user$user9","_user$user10","_user$user11","_user$user12","docTitle","startedDate","expectedEndedDate","userId","userName","masterDocumentId","version","countCustom","_user$user13","_user$user14","_user$user15","_user$user16","addDocument","handleDepartmentClick","textAlign","marginTop","marginBottom","Table","dataSource","rowSelection","selectedRowKeys","change","indexes","bordered","expandable","expandedRowRender","rowExpandable","customModalShow","templateModalShow","allInfos","allCustomInfos","toString","padStart","sequenceNumber","handleAddCustom","find","dept","documentTitle","areaCode","Select","options","direction","marginDirection","wrap","_React$useContext","SpaceContext","horizontalSize","verticalSize","latestIndex","supportFlexGap","_extends","_defineProperty","paddingBottom","__rest","s","t","p","prototype","call","indexOf","getOwnPropertySymbols","propertyIsEnumerable","spaceSize","small","middle","large","props","_classNames","ConfigContext","getPrefixCls","space","directionConfig","_props$size","_props$direction","customizePrefixCls","prefixCls","_props$wrap","otherProps","useFlexGapSupport","_React$useMemo","isArray","getNumberSize","_React$useMemo2","_slicedToArray","childNodes","toArray","keepEmpty","mergedAlign","cn","classNames","itemClassName","nodes","child","spaceContext","gapStyle","flexWrap","columnGap","rowGap","Provider"],"sourceRoot":""}