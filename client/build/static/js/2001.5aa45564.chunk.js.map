{"version":3,"file":"static/js/2001.5aa45564.chunk.js","mappings":"yKAEA,MASA,EATyBA,KAAO,IAADC,EAC7B,MAAMC,EAAsB,QAAfD,EAAGE,oBAAY,IAAAF,OAAA,EAAZA,EAAcG,QAAQ,QAEtC,OADAC,QAAQC,IAAIJ,EAAS,UAChBA,EAIE,MAHEK,EAAAA,EAAAA,KAACC,EAAAA,SAAQ,CAACC,GAAG,+BAGX,C,6UCNb,MAUA,EAVqBC,IAAqB,IAApB,WAAEC,GAAYD,EAGlC,OAFAL,QAAQC,IAAI,cAAeK,IAGzBJ,EAAAA,EAAAA,KAACK,EAAAA,EAAG,CAACC,QAAQ,SAASC,MAAM,SAASC,MAAO,CAAEC,MAAO,KAAMC,UACzDV,EAAAA,EAAAA,KAACW,EAAAA,EAAQ,CAACC,QAASR,EAAYS,KAAK,WAChC,ECLV,SAAeC,E,SAAAA,IAA4Bd,EAAAA,EAAAA,KAAK,OAAQ,CACtDe,EAAG,uIACD,U,wBCgsBW,SAASC,IAAY,IAADtB,EAAAuB,EAEjC,MAAOC,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,KACtCC,EAAgBC,IAAqBF,EAAAA,EAAAA,UAAS,IAC/CG,GAAcC,EAAAA,EAAAA,QAAO,OACpBC,EAAWC,IAAiBN,EAAAA,EAAAA,aAC5BO,EAAqBC,IAA0BR,EAAAA,EAAAA,UAAS,KACxDS,EAAeC,IAAqBV,EAAAA,EAAAA,UAAS,KAC7CW,EAAqBC,IAA0BZ,EAAAA,EAAAA,WAAS,IACxDa,EAAwBC,IAA6Bd,EAAAA,EAAAA,WAAS,IAC9De,EAAUC,IAAehB,EAAAA,EAAAA,UAAS,KAClCiB,EAAUC,IAAelB,EAAAA,EAAAA,UAAS,KAClCmB,EAAaC,IAAkBpB,EAAAA,EAAAA,UAAS,KACxCqB,EAAaC,IAAgBtB,EAAAA,EAAAA,UAAS,KACtCuB,EAAWC,KAAcxB,EAAAA,EAAAA,UAAS,KAClCyB,GAAcC,KAAmB1B,EAAAA,EAAAA,UAAS,KAC1C2B,GAAQC,KAAa5B,EAAAA,EAAAA,UAAS,KAC9B6B,GAAMC,KAAW9B,EAAAA,EAAAA,UAAS,KAC1B+B,GAAMC,KAAWhC,EAAAA,EAAAA,UAASiC,KAAKC,MAAkB,QAAb5D,EAACE,oBAAY,IAAAF,OAAA,EAAZA,EAAcG,QAAQ,WAC3D0D,GAAMC,KAAWpC,EAAAA,EAAAA,UAAS,KAC1BqC,GAAWC,KAAgBtC,EAAAA,EAAAA,UAAS,KACpCuC,GAAoBC,KAAyBxC,EAAAA,EAAAA,WAAS,IACtDyC,GAAQC,KAAa1C,EAAAA,EAAAA,UAAS,OAC9B2C,GAAKC,IAAiBC,EAAAA,EAAaC,mBACpCC,IAAcC,EAAAA,EAAKC,WAClBC,GAAmBC,KAAwBnD,EAAAA,EAAAA,UAAS,KACpDoD,GAAeC,KAAqBrD,EAAAA,EAAAA,UAAS,KAC7CsD,GAAgBC,KAAevD,EAAAA,EAAAA,UAAS,KACxCwD,GAAQC,KAAczD,EAAAA,EAAAA,UAAS,KAC/B0D,GAAWC,KAAiB3D,EAAAA,EAAAA,UAAS,KACrC4D,IAAQZ,EAAAA,EAAKC,WACbY,GAAeC,KAAoB9D,EAAAA,EAAAA,WAAS,IAC5C+D,GAAiBC,KAAsBhE,EAAAA,EAAAA,aACvCiE,GAAWC,KAAgBlE,EAAAA,EAAAA,UAAS,IACrCmE,IAAUC,EAAAA,EAAAA,eACTC,IAAcrB,EAAAA,EAAKC,UA4BpBqB,GAAkBA,KACtBH,GAAQI,KAAK,QAAQ,EA0BjBC,GAAoBA,KACxBhC,IAAsB,EAAM,EAGxBiC,GAAeA,CAACC,EAAcC,EAASC,KAC3CD,IACA5E,EAAc2E,EAAa,IAC3BxE,EAAkB0E,EAAU,EAOxBC,GAAwBD,IAAS,CACrCE,eAAgB/F,IAAA,IAAC,gBAAEgG,EAAe,aAAEL,EAAY,QAAEC,EAAO,aAAEK,EAAY,MAAEC,GAAOlG,EAAA,OAC9EmG,EAAAA,EAAAA,MAAA,OAAK9F,MAAO,CAAE+F,QAAS,GAAI7F,SAAA,EACzBV,EAAAA,EAAAA,KAACwG,EAAAA,EAAK,CACJC,IAAKlF,EACLmF,YAAW,UAAAC,OAAYX,GACvBY,MAAOd,EAAa,GACpBe,SAAWC,GAAMX,EAAgBW,EAAEC,OAAOH,MAAQ,CAACE,EAAEC,OAAOH,OAAS,IACrEI,aAAcA,IAAMnB,GAAaC,EAAcC,EAASC,GACxDxF,MAAO,CAAEyG,aAAc,EAAGC,QAAS,YAErCZ,EAAAA,EAAAA,MAACa,EAAAA,EAAK,CAAAzG,SAAA,EACJV,EAAAA,EAAAA,KAACoH,EAAAA,EAAM,CACLC,KAAK,UACLC,QAASA,IAAMzB,GAAaC,EAAcC,EAASC,GACnDuB,MAAMvH,EAAAA,EAAAA,KAACwH,EAAAA,EAAc,IACrB3G,KAAK,QACLL,MAAO,CAAEC,MAAO,IAAKC,SACtB,YAGDV,EAAAA,EAAAA,KAACoH,EAAAA,EAAM,CAACE,QAASA,IAAMlB,GA1BVA,KACnBA,IACAjF,EAAc,GAAG,EAwB4BsG,CAAYrB,GAAevF,KAAK,QAAQL,MAAO,CAAEC,MAAO,IAAKC,SAAC,eAKnG,EAERgH,WAAaC,IACX3H,EAAAA,EAAAA,KAACwH,EAAAA,EAAc,CAAChH,MAAO,CAAEoH,MAAOD,EAAW,eAAYE,KAEzDC,SAAUA,CAAClB,EAAO/C,IAChBA,EAAOmC,GAAW+B,WAAWC,cAAcC,SAASrB,EAAMoB,eAC5DE,2BAA6BC,IACvBA,GACFC,YAAW,SAAAC,EAAA,OAAyB,QAAzBA,EAAM9G,EAAY+G,eAAO,IAAAD,OAAA,EAAnBA,EAAqBE,QAAQ,GAAE,IAClD,EAEFC,OAASC,GACPpH,IAAmB2E,GACjBhG,EAAAA,EAAAA,KAAC0I,IAAW,CACVC,eAAgB,CACdC,gBAAiB,UACjBrC,QAAS,GAEXsC,YAAa,CAAC3H,GACd4H,YAAU,EACVC,gBAAiBN,EAAOA,EAAKV,WAAa,KAG5CU,IAYFO,IANHC,EAAAA,EACEA,EAAAA,EAAKC,KACLD,EAAAA,EAAKC,KACLD,EAAAA,EAAKC,KAGM,CACd,CACEC,MAAO,eACPnD,UAAW,OACXoD,IAAK,UACFnD,GAAqB,SAE1B,CACEkD,MAAO,WACPnD,UAAW,QACXoD,IAAK,WACFnD,GAAqB,UAG1B,CACEkD,MAAO,cACPnD,UAAW,kBACXoD,IAAK,qBACFnD,GAAqB,oBAyB1B,CACEkD,MAAO,SACPnD,UAAW,aACXoD,IAAK,gBACFnD,GAAqB,eAO1B,CACEkD,MAAO,aACPnD,UAAW,cACXoD,IAAK,cACLC,OAAQA,CAACC,EAAGC,IACI,IAAIC,KAAKF,EAAE7G,YAAYgH,MAAM,KAAKC,UAAUC,KAAK,MACjD,IAAIH,KAAKD,EAAE9G,YAAYgH,MAAM,KAAKC,UAAUC,KAAK,OAInE,CACER,MAAO,oBACPnD,UAAW,YACXoD,IAAK,YACLC,OAAQA,CAACC,EAAGC,IACI,IAAIC,KAAKF,EAAE3G,UAAU8G,MAAM,KAAKC,UAAUC,KAAK,MAC/C,IAAIH,KAAKD,EAAE5G,UAAU8G,MAAM,KAAKC,UAAUC,KAAK,OAGjE,CACER,MACE,SAEFC,IAAK,SACLpD,UAAW,SAEf4D,QAAS,CAEH,CACEnB,KAAM,cACN7B,MAAO,eAET,CACE6B,KAAM,UACN7B,MAAO,WAET,CACE6B,KAAM,YACN7B,MAAO,cAGXkB,SAAWA,CAAClB,EAAO/C,IAAUA,EAAOd,SAAW6D,GAWjD,CACEuC,MAAO,WACPC,IAAK,aACLZ,OAAQA,CAACqB,EAAGhG,KACV7D,EAAAA,EAAAA,KAACmH,EAAAA,EAAK,CAAAzG,SACmB,OAAtBmD,EAAOzD,YACNJ,EAAAA,EAAAA,KAAC8J,EAAY,CAAC1J,WAAYyD,EAAOzD,WAAW2J,QAAQ,KAClD,QAIV,CACEZ,MAAO,SACPC,IAAK,SACLZ,OAAQA,CAACqB,EAAGhG,KAAM,IAAAmG,EAAAC,EAAAC,EAAA,OAEhB5D,EAAAA,EAAAA,MAACa,EAAAA,EAAK,CAACtG,KAAK,SAAQH,SAAA,EAClBV,EAAAA,EAAAA,KAACmK,EAAAA,EAAO,CAAChB,MAAM,aAAYzI,UACjCV,EAAAA,EAAAA,KAACoH,EAAAA,EAAM,CACLvG,KAAK,SACL0G,MAAMvH,EAAAA,EAAAA,KAACoK,EAAM,IACbC,SAAiC,KAAnB,OAAJlH,SAAI,IAAJA,IAAU,QAAN6G,EAAJ7G,GAAMA,YAAI,IAAA6G,OAAN,EAAJA,EAAYM,QACtBhD,QAAS5B,QAGL1F,EAAAA,EAAAA,KAACmK,EAAAA,EAAO,CAAChB,MAAM,iBAAgBzI,UACrCV,EAAAA,EAAAA,KAACoH,EAAAA,EAAM,CACLvG,KAAK,SACL0G,MAAMvH,EAAAA,EAAAA,KAACuK,EAAAA,EAAI,IACXF,SAAiC,KAAnB,OAAJlH,SAAI,IAAJA,IAAU,QAAN8G,EAAJ9G,GAAMA,YAAI,IAAA8G,OAAN,EAAJA,EAAYK,QACtBhD,QAASA,IAAMkD,GAAuB3G,QAGhC7D,EAAAA,EAAAA,KAACmK,EAAAA,EAAO,CAAChB,MAAM,SAAQzI,UAC/BV,EAAAA,EAAAA,KAACoH,EAAAA,EAAM,CACLvG,KAAK,SACL0G,MAAMvH,EAAAA,EAAAA,KAACyK,EAAAA,EAAc,IACrBJ,SAAiC,KAAnB,OAAJlH,SAAI,IAAJA,IAAU,QAAN+G,EAAJ/G,GAAMA,YAAI,IAAA+G,OAAN,EAAJA,EAAYI,QACtBhD,QAASA,IAhOczD,KACvBC,GAAUD,GACVD,IAAsB,EAAK,EA8NZ8G,CAAgB7G,SAcrB,KAqGN8G,GAAqBA,KACzBzH,GAAQ,IACRF,GAAU,IACVZ,EAAY,IACZI,EAAe,IACfV,EAAkB,IAClBgB,GAAgB,IAChBd,GAAuB,EAAM,EASzB4I,GAAaC,UACrB,IAAK1I,IAAaI,EAUd,YARA0B,EAAAA,EAAa6G,MAAM,CACjBC,QAAS,mBACTC,YAAa,sCACbxK,MAAO,CACLoI,gBAAiB,UACjBhB,MAAO,UAOX,MAAMqD,EAAoBtJ,EAAoBuJ,KAAIrI,IAChD,MAAMsI,EAAa3G,GAAe4G,MAAKD,GAAcA,EAAWE,KAAOxI,IACvE,MAAO,CACHyI,OAAQH,EAAaA,EAAWG,OAAS,KACzCnC,MAAOgC,EAAaA,EAAWhC,MAAQ,KAC1C,IAGH,IAAK,IAADoC,EAAAC,EAAAC,EAAAC,EACF,MAAMC,QAAiBC,IAAAA,KACrB,sCACA,CACEzC,MAAOhH,EACPU,aAAalB,EACbkK,YAAYZ,EACZlI,OAAO,cACP+I,UAAU,EACVC,SAASxJ,EACTU,QACA+I,UAAe,OAAJ7I,SAAI,IAAJA,IAAU,QAANoI,EAAJpI,GAAMA,YAAI,IAAAoI,OAAN,EAAJA,EAAYS,UACvBC,SAAc,OAAJ9I,SAAI,IAAJA,IAAU,QAANqI,EAAJrI,GAAMA,YAAI,IAAAqI,OAAN,EAAJA,EAAYH,GACtBa,WAAW,GAADvF,OAAS,OAAJxD,SAAI,IAAJA,IAAU,QAANsI,EAAJtI,GAAMA,YAAI,IAAAsI,OAAN,EAAJA,EAAYU,UAAS,KAAAxF,OAAQ,OAAJxD,SAAI,IAAJA,IAAU,QAANuI,EAAJvI,GAAMA,YAAI,IAAAuI,OAAN,EAAJA,EAAYU,UACpD3J,cACAE,aAEF,CACE0J,QAAS,CACPC,cAAmB,OAAJnJ,SAAI,IAAJA,QAAI,EAAJA,GAAMoJ,eAM3BzM,QAAQC,IAAI4L,GAWZ3J,GAAuB,GACvBwK,KAEFvI,EAAAA,EAAawI,QAAQ,CACnB1B,QAAS,uBACTC,YAAY,GAADrE,OAAKgF,EAASpI,KAAKwH,SAC9BvK,MAAO,CACLoI,gBAAiB,UACjBhB,MAAO,SAGb,CAAE,MAAOkD,GAAQ,IAAD4B,EACiB,OAAb,QAAdA,EAAA5B,EAAMa,gBAAQ,IAAAe,OAAA,EAAdA,EAAgB3J,QAElBkB,EAAAA,EAAa6G,MAAM,CACjBC,QAAS,iBACTC,YAAa,2FACbxK,MAAO,CACLoI,gBAAiB,UACjBhB,MAAO,UAKX3D,EAAAA,EAAa6G,MAAM,CACjBC,QAAS,QACTC,YAAa,gEACbxK,MAAO,CACLoI,gBAAiB,UACjBhB,MAAO,SAIf,GA8BM4E,GAAY3B,UAChB,IAAK,IAAD8B,EAAAC,EACF,MAAMjB,QAAiBC,IAAAA,IAAU,gDAADjF,OACsB,OAAJxD,SAAI,IAAJA,IAAU,QAANwJ,EAAJxJ,GAAMA,YAAI,IAAAwJ,OAAN,EAAJA,EAAYX,UAAS,YAAArF,OAAe,OAAJxD,SAAI,IAAJA,IAAU,QAANyJ,EAAJzJ,GAAMA,YAAI,IAAAyJ,OAAN,EAAJA,EAAYtC,OAAM,QAAA3D,OAAW,OAAJxD,SAAI,IAAJA,QAAI,EAAJA,GAAMA,KAAKkI,GAAE,eAAA1E,OAAkB,OAAJxD,SAAI,IAAJA,QAAI,EAAJA,GAAMA,KAAKgJ,WAC/I,CACEE,QAAS,CACPC,cAAmB,OAAJnJ,SAAI,IAAJA,QAAI,EAAJA,GAAMoJ,eAO3BzM,QAAQC,IAAI,wBAAwB4L,EAASpI,MAC7C,MAAMsJ,EAAgBlB,EAASpI,KAAK2H,KAAI4B,IAEtC,MAAMC,EAAqB,IAAIvD,KAAKsD,EAAQrK,aAAauK,mBAAmB,SACtEC,EAAmB,IAAIzD,KAAKsD,EAAQnK,WAAWqK,mBAAmB,SAKxE,OAJAlN,QAAQC,IAAI+M,EAAQf,SAAS,YAItB,IACFe,EACHrK,YAAasK,EACbpK,UAAWsK,EACZ,IAEHnN,QAAQC,IAAI,wBAAwB8M,GAEpC,MAAMK,EAAa,OAAJ/J,SAAI,IAAJA,QAAI,EAAJA,GAAMA,KAAKN,aACP,OAAJM,SAAI,IAAJA,IAAAA,GAAMA,KAAKmH,OAE1BxK,QAAQC,IAAImN,EAAO,UACnB,MAAMC,EAASN,EAAcM,QAAOC,GAAsB,GAAhBA,EAAKC,UAC7C7J,GAAQ2J,GACVzJ,GAAamJ,GACb,MAAMS,EAAU,GAChB,IAAK,MAAMF,KAAgB,OAARzB,QAAQ,IAARA,OAAQ,EAARA,EAAUpI,KAC3B+J,EAAQ3H,KAAK,CAAEiB,MAAW,OAAJwG,QAAI,IAAJA,OAAI,EAAJA,EAAM/B,GAAIkC,MAAW,OAAJH,QAAI,IAAJA,OAAI,EAAJA,EAAMjE,QAE/CrJ,QAAQC,IAAIuN,GACZ3I,GAAY2I,EACd,CAAE,MAAOxC,GACPhL,QAAQgL,MAAM,2BAAiC,OAALA,QAAK,IAALA,OAAK,EAALA,EAAOC,QACnD,GAKIP,GAA0B3G,IAC9BuB,GAAmBvB,GAGnB4B,GAAW+H,eAAe,CACxBnC,GAAGxH,EAAOwH,GACVlC,MAAOtF,EAAOsF,MACdlG,KAAMY,EAAOZ,OAGfiC,IAAiB,EAAK,EAGlBuI,GAA2BA,KAC/BvI,IAAiB,EAAM,GA4BzBwI,EAAAA,EAAAA,YAAU,KAAO,IAADC,EACdvK,GAAQC,KAAKC,MAAkB,QAAbqK,EAAC/N,oBAAY,IAAA+N,OAAA,EAAZA,EAAc9N,QAAQ,UA5StBgL,WACnB,IAAK,IAAD+C,EACF,MAAMjC,QAAiBC,IAAAA,IAAU,+CAADjF,OACqB,OAAJxD,SAAI,IAAJA,IAAU,QAANyK,EAAJzK,GAAMA,YAAI,IAAAyK,OAAN,EAAJA,EAAY5B,WAC3D,CACEK,QAAS,CACPC,cAAmB,OAAJnJ,SAAI,IAAJA,QAAI,EAAJA,GAAMoJ,eAMrBsB,EAAkB,IAAIC,IACtBC,EAAa,CAAC,EAEpB,IAAIT,EAAkB,OAAR3B,QAAQ,IAARA,OAAQ,EAARA,EAAUpI,KAAKyK,QAAO,CAACC,EAAKb,KAEnCS,EAAgBK,IAAId,EAAKe,eAE5BN,EAAgBO,IAAIhB,EAAKiB,KAGzBJ,EAAItI,KAAK,CAAEiB,MAAOwG,EAAK/B,GAAIkC,MAAOH,EAAKe,YAAaG,KAAMlB,EAAKe,cAC/DJ,EAAWX,EAAK/B,IAAM+B,EAAKe,aAGtBF,IACN,IAGHnO,QAAQC,IAAIuN,EAAQ,oBACpBxN,QAAQC,IAAIgO,EAAW,uBAEvBlJ,GAAWyI,GACXvI,GAAcgJ,EAEhB,CAAE,MAAOjD,GACPhL,QAAQgL,MAAM,8BAAoC,OAALA,QAAK,IAALA,OAAK,EAALA,EAAOC,QACtD,GAwQAwD,GA3BuB1D,WACvB,IAAK,IAAD2D,EACF,MAAM7C,QAAiBC,IAAAA,IAAU,mDAADjF,OACyB,OAAJxD,SAAI,IAAJA,IAAU,QAANqL,EAAJrL,GAAMA,YAAI,IAAAqL,OAAN,EAAJA,EAAYxC,WAC/D,CACEK,QAAS,CACPC,cAAmB,OAAJnJ,SAAI,IAAJA,QAAI,EAAJA,GAAMoJ,eAK3BzM,QAAQC,IAAI4L,EAASpI,KAAK,cAC1B,MAAM+J,EAAU,GACVmB,EAAS,GACf,IAAK,MAAMrB,KAAgB,OAARzB,QAAQ,IAARA,OAAQ,EAARA,EAAUpI,KAC3B+J,EAAQ3H,KAAK,CAAEiB,MAAW,OAAJwG,QAAI,IAAJA,OAAI,EAAJA,EAAM/B,GAAIkC,MAAW,OAAJH,QAAI,IAAJA,OAAI,EAAJA,EAAMjE,QAC7CsF,EAAO9I,KAAK,CAAC0F,GAAO,OAAJ+B,QAAI,IAAJA,OAAI,EAAJA,EAAM/B,GAAGlC,MAAU,OAAJiE,QAAI,IAAJA,OAAI,EAAJA,EAAMjE,MAAMmC,OAAW,OAAJ8B,QAAI,IAAJA,OAAI,EAAJA,EAAM9B,SAE1D7G,GAAkBgK,GAClBlK,GAAqB+I,EACvB,CAAE,MAAOxC,GACPhL,QAAQgL,MAAM,8BAAoC,OAALA,QAAK,IAALA,OAAK,EAALA,EAAOC,QACtD,GAMA2D,GACAlC,IAAW,GAEV,IAcH,OACElG,EAAAA,EAAAA,MAAAqI,EAAAA,SAAA,CAAAjO,SAAA,EACEV,EAAAA,EAAAA,KAAC4O,EAAAA,EAAK,CACJzF,MAAM,cACN1I,MAAO,IACPoO,UAAQ,EACR1G,QAASpG,EACT+M,SAAUnE,GACVoE,OAAQ,KACRC,WACEhP,EAAAA,EAAAA,KAACiP,EAAAA,IAAW,CAACC,UAAU,kCAAkCrO,KAAM,KAChEH,UAED4F,EAAAA,EAAAA,MAAClC,EAAAA,EAAI,CAAC+K,OAAO,WAAWb,KAAK,QAAQc,SA5oBtBC,KACnBlL,GAAYmL,iBAAiBC,MAAMC,IACjC5E,KACAzG,GAAYsL,aAAa,GACzB,EAwoB+DzK,KAAMb,GAAYzD,SAAA,EAC/EV,EAAAA,EAAAA,KAACoE,EAAAA,EAAK8E,KAAI,CAACqE,MAAM,eAAee,KAAK,WAAWoB,MAAO,CAC7C,CACEC,UAAU,EACV5E,QAAS,4BAEXrK,UAENV,EAAAA,EAAAA,KAACwG,EAAAA,EAAK,CACJI,MAAOvE,EACPwE,SAAWC,GAAM5D,GAAQ4D,EAAEC,OAAOH,YAGrC5G,EAAAA,EAAAA,KAACoE,EAAAA,EAAK8E,KAAI,CAACqE,MAAM,eAAee,KAAK,WAAWoB,MAAO,CAChD,CACEC,UAAU,EACV5E,QAAS,4BAEXrK,UACNV,EAAAA,EAAAA,KAACwG,EAAAA,EAAK,CACJI,MAAOzE,EACP0E,SAAWC,GAAM1E,EAAY0E,EAAEC,OAAOH,YAIxC5G,EAAAA,EAAAA,KAACoE,EAAAA,EAAK8E,KAAI,CACNqE,MAAM,SACNe,KAAK,cACLoB,MAAO,CACL,CACEC,UAAU,EACV5E,QAAS,yBAEXrK,UAEJV,EAAAA,EAAAA,KAAC4P,EAAAA,EAAM,CAEHtC,QAAS1I,GACTgC,MAAOrE,EACPsE,SAAWD,GAAUpE,EAAeoE,QAKtC5G,EAAAA,EAAAA,KAACoE,EAAAA,EAAK8E,KAAI,CACVqE,MAAM,cACNe,KAAK,gBACLoB,MAAO,CAAC,CAAEC,UAAU,EAAM5E,QAAS,0CAA2CrK,UAE9EV,EAAAA,EAAAA,KAAC6P,EAAAA,EAASC,MAAK,CAACxC,QAAShJ,GAAmBsC,MAAOjF,EAAqBkF,SAAUjF,OAI5F5B,EAAAA,EAAAA,KAACoE,EAAAA,EAAK8E,KAAI,CAACqE,MAAM,aAAae,KAAK,cAAcoB,MAAO,CAAC,CAAEC,UAAU,EAAM5E,QAAS,6BAA8BrK,UAChHV,EAAAA,EAAAA,KAAC+P,EAAAA,EAAU,CAACvP,MAAO,CAAEC,MAAO,QAAUoG,SA1YbmJ,IAC7BtN,EAAasN,EAAK,OA4YhBhQ,EAAAA,EAAAA,KAACoE,EAAAA,EAAK8E,KAAI,CAACqE,MAAM,WAAWe,KAAK,YAAYoB,MAAO,CAAC,CAAEC,UAAU,EAAM5E,QAAS,2BAA4BrK,UAC1GV,EAAAA,EAAAA,KAAC+P,EAAAA,EAAU,CAACvP,MAAO,CAAEC,MAAO,QAAUoG,SA1YfmJ,IAC3BpN,GAAWoN,EAAK,OA4YV1J,EAAAA,EAAAA,MAACjG,EAAAA,EAAG,CAAAK,SAAA,EACFV,EAAAA,EAAAA,KAACiQ,EAAAA,EAAG,CAACC,GAAI,GAAIC,KAAM,GAAIjB,UAAU,sBAAqBxO,UACpDV,EAAAA,EAAAA,KAACoH,EAAAA,EAAM,CACLgJ,OAAK,EACL/I,KAAK,UACLgJ,SAAS,SACT3P,SACD,WAKHV,EAAAA,EAAAA,KAACiQ,EAAAA,EAAG,CAACC,GAAI,GAAIC,KAAM,GAAIjB,UAAU,kCAAiCxO,UAChEV,EAAAA,EAAAA,KAACoH,EAAAA,EAAM,CAACgJ,OAAK,EAAC9I,QAASqD,GAAmBjK,SAAC,sBASnDV,EAAAA,EAAAA,KAAC4O,EAAAA,EAAK,CACNzF,MAAM,iBACN1I,MAAO,IACPoO,UAAQ,EACR1G,QAASlD,GACT6J,SAAUrB,GACVsB,OAAQ,KACRC,WAAWhP,EAAAA,EAAAA,KAACiP,EAAAA,IAAW,CAACC,UAAU,kCAAkCrO,KAAM,KAAOH,UAEjF4F,EAAAA,EAAAA,MAAClC,EAAAA,EAAI,CACHY,KAAMS,GACN0J,OAAO,WACPC,SAnYavE,UACjB,IACE,MAAMc,QAAkBC,IAAAA,IAAS,gDAAAjF,OACoB,OAAJxD,SAAI,IAAJA,QAAI,EAAJA,GAAMA,KAAK6I,UAAS,QAAArF,OAAOlB,GAAW6K,cAAc,OACrG,CACEnH,MAAM1D,GAAW6K,cAAc,SAC/BrN,KAAKwC,GAAW6K,cAAc,SAEhC,CACEjE,QAAS,CACPC,cAAmB,OAAJnJ,SAAI,IAAJA,QAAI,EAAJA,GAAMoJ,eAKzBxB,EAAAA,GAAQ0B,QAAQd,EAASpI,KAAKwH,SAC9B0C,KACAjB,IACF,CAAE,MAAO1B,GACDhL,QAAQgL,MAAM,8BAAoC,OAALA,QAAK,IAALA,OAAK,EAALA,EAAOC,QAC5D,GA+W4BrK,SAAA,EAExBV,EAAAA,EAAAA,KAACoE,EAAAA,EAAK8E,KAAI,CACRqE,MAAM,QACNe,KAAK,QACLoB,MAAO,CAAC,CAAEC,UAAU,EAAM5E,QAAS,mCAAoCrK,UAEvEV,EAAAA,EAAAA,KAACwG,EAAAA,EAAK,CAACE,YAAY,sBAAsBG,SAAWC,GAAMrB,GAAW+H,eAAe,CAAErE,MAAOrC,EAAEC,OAAOH,aAGxG5G,EAAAA,EAAAA,KAACoE,EAAAA,EAAK8E,KAAI,CACRqE,MAAM,eACNe,KAAK,OACLoB,MAAO,CAAC,CAAEC,UAAU,EAAM5E,QAAS,8BAA+BrK,UAElEV,EAAAA,EAAAA,KAACwG,EAAAA,EAAK,CAACE,YAAY,qBAAqBG,SAAWC,GAAMrB,GAAW+H,eAAe,CAAEvK,KAAM6D,EAAEC,OAAOH,aAItG5G,EAAAA,EAAAA,KAACoE,EAAAA,EAAK8E,KAAI,CAAAxI,UACRV,EAAAA,EAAAA,KAACoH,EAAAA,EAAM,CAACC,KAAK,UAAUgJ,SAAS,SAASD,OAAK,EAAA1P,SAAC,mBAOnD4F,EAAAA,EAAAA,MAACsI,EAAAA,EAAK,CACVzF,MAAM,iBACN1I,MAAO,IACPoO,UAAQ,EACR1G,QAASxE,GACTmL,SAAUlJ,GACVmJ,OAAQ,KACRC,WACEhP,EAAAA,EAAAA,KAACiP,EAAAA,IAAW,CAACC,UAAU,kCAAkCrO,KAAM,KAChEH,SAAA,EAEDV,EAAAA,EAAAA,KAAA,OAAAU,UACEV,EAAAA,EAAAA,KAAA,KAAAU,SAAG,6CAEL4F,EAAAA,EAAAA,MAACjG,EAAAA,EAAG,CAAAK,SAAA,EACFV,EAAAA,EAAAA,KAACiQ,EAAAA,EAAG,CAACC,GAAI,GAAIC,KAAM,GAAIjB,UAAU,sBAAqBxO,UACpDV,EAAAA,EAAAA,KAACoH,EAAAA,EAAM,CACLgJ,OAAK,EACL/I,KAAK,UACLkJ,QAAM,EACNjJ,QAASA,IAtfIuD,WAEnB,MAAMQ,EAAKxH,EAAOwH,GAClBvL,QAAQC,IAAIsL,GACZ,MAAMM,QAAiBC,IAAAA,OAAa,qDAADjF,OACoB9C,EAAOwH,IAC5D,CACEgB,QAAS,CACPC,cAAmB,OAAJnJ,SAAI,IAAJA,QAAI,EAAJA,GAAMoJ,eAK3BxB,EAAAA,GAAQ0B,QAAQd,EAASpI,KAAKwH,SAC9BnF,KACA4G,IAAW,EAueUgE,CAAa3M,IAAQnD,SACrC,cAIHV,EAAAA,EAAAA,KAACiQ,EAAAA,EAAG,CAACC,GAAI,GAAIC,KAAM,GAAIjB,UAAU,kCAAiCxO,UAChEV,EAAAA,EAAAA,KAACoH,EAAAA,EAAM,CAACgJ,OAAK,EAAC9I,QAAS1B,GAAkBlF,SAAC,oBAO1CV,EAAAA,EAAAA,KAAC4O,EAAAA,EAAK,CACJzF,MAAM,uBACN1I,MAAO,IACPoO,UAAQ,EACR1G,QAASlG,EACT6M,SA3ZwB2B,KAC5BvO,GAA0B,EAAM,EA2Z5B6M,OAAQ,KACRC,WACEhP,EAAAA,EAAAA,KAACiP,EAAAA,IAAW,CAACC,UAAU,kCAAkCrO,KAAM,KAChEH,UAED4F,EAAAA,EAAAA,MAAClC,EAAAA,EAAI,CAAC+K,OAAO,WAAWb,KAAK,QAAO5N,SAAA,EAClCV,EAAAA,EAAAA,KAACoE,EAAAA,EAAK8E,KAAI,CAACqE,MAAM,eAAee,KAAK,YAAW5N,UAC9CV,EAAAA,EAAAA,KAAC4P,EAAAA,EAAM,CACLtC,QAAS5I,GACTkC,MAAOvB,GACPwB,SAAWC,GAAMxB,GAAawB,QAIlCR,EAAAA,EAAAA,MAACjG,EAAAA,EAAG,CAAAK,SAAA,EACFV,EAAAA,EAAAA,KAACiQ,EAAAA,EAAG,CAACC,GAAI,GAAIC,KAAM,GAAIjB,UAAU,sBAAqBxO,UACpDV,EAAAA,EAAAA,KAACoH,EAAAA,EAAM,CACLgJ,OAAK,EACL/I,KAAK,UACLgJ,SAAS,SACT/I,QAASA,IAAMsD,KAAalK,SAC7B,WAIHV,EAAAA,EAAAA,KAACiQ,EAAAA,EAAG,CAACC,GAAI,GAAIC,KAAM,GAAIjB,UAAU,kCAAiCxO,UAChEV,EAAAA,EAAAA,KAACoH,EAAAA,EAAM,CAACgJ,OAAK,EAAC9I,QAASqD,GAAmBjK,SAAC,sBAQzDV,EAAAA,EAAAA,KAAA,OAAKQ,MAAO,CAAEkQ,UAAW,QAASzJ,aAAc,QAASvG,SAChC,IAAlB,OAAJyC,SAAI,IAAJA,IAAU,QAANlC,EAAJkC,GAAMA,YAAI,IAAAlC,OAAN,EAAJA,EAAYqJ,UACXtK,EAAAA,EAAAA,KAACoH,EAAAA,EAAM,CAACC,KAAK,UAAUC,QAldAqJ,KAEvB3O,GAAuB,EAAK,EAgdqBtB,SAAC,mBAMhDV,EAAAA,EAAAA,KAAC4Q,EAAAA,EAAK,CACNC,UAAQ,EACRhQ,KAAK,SACLsI,MAAOA,IAAM,sBACb4F,OAAQA,IAAM,0BACZ/F,QAASA,GACT8H,WAAYC,EAAcxN,OAK5BvD,EAAAA,EAAAA,KAACP,EAAAA,EAAgB,MAGvB,CACA,MAAMsR,EAAiBC,IACrB,MAAMC,EAAc,CAAC,EAGrBD,EAAaE,SAAS9D,IACpB,MAAMjE,EAAQiE,EAAKjE,MAEd8H,EAAY9H,GAGf8H,EAAY9H,GAAOgI,gBAAgBxL,KAAKyH,EAAKvL,eAAiB,KAF9DoP,EAAY9H,GAAS,IAAKiE,EAAM+D,gBAAiB,CAAC/D,EAAKvL,eAAiB,KAG1E,IASF,OALwBuP,OAAO5B,OAAOyB,GAAa/F,KAAKkC,IAAI,IACvDA,EACHvL,eAAgBuL,EAAK+D,gBAAgBxH,KAAK,OAGtB,C,6DCjmDxB,SAAe7I,EAAAA,EAAAA,IAA4Bd,EAAAA,EAAAA,KAAK,OAAQ,CACtDe,EAAG,0FACD,iB","sources":["view/pages/Protected.jsx","view/pages/projects/Progress.jsx","../node_modules/@mui/icons-material/esm/Create.js","view/pages/projects/index.jsx","../node_modules/@mui/icons-material/esm/DeleteOutlined.js"],"sourcesContent":["import { useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nconst ProtectedAppPage = () => {\r\n  const isLogIn = localStorage?.getItem(\"user\");\r\n  console.log(isLogIn, \"loggin\");\r\n  if (!isLogIn) {\r\n    return <Redirect to=\"/pages/authentication/login\" />;\r\n  }\r\n\r\n  return null;\r\n};\r\nexport default ProtectedAppPage;\r\n","import React from 'react';\r\nimport { Progress, Row } from 'antd';\r\n\r\nconst ProgressComp = ({ percentage }) => {\r\n  console.log('Percentage:', percentage);\r\n  \r\n  return (\r\n    <Row justify=\"center\" align=\"middle\" style={{ width: 180 }}>\r\n      <Progress percent={percentage} size=\"small\" />\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default ProgressComp;\r\n","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z\"\n}), 'Create');","// import React, { useState, useEffect, useRef } from \"react\";\r\n// import { DownOutlined } from '@ant-design/icons';\r\n\r\n// import {notification,\r\n//   Button,Form,Row,Col,Space,Table,Select,Input,Dropdown,Menu,DatePicker,TimePicker,Modal,message,Checkbox,Upload,\r\n// } from \"antd\";\r\n// import { RiCloseFill, RiCalendarLine } from \"react-icons/ri\";\r\n// import axios from \"axios\";\r\n// import { useHistory } from 'react-router-dom';\r\n// import ProtectedAppPage from \"../Protected\";\r\n// import { SearchOutlined } from '@ant-design/icons';\r\n// import Highlighter from 'react-highlight-words';\r\n// import ProgressComp from \"./Progress\";\r\n// export default function Projects() {\r\n\r\n//   const [searchText, setSearchText] = useState('');\r\n//   const [searchedColumn, setSearchedColumn] = useState('');\r\n//   const searchInput = useRef(null);\r\n\r\n//   const [progresses,setProgresses] = useState()\r\n//   const [selectedDepartments, setSelectedDepartments] = useState([]);\r\n//   const [departmentName,setDepartmentName] = useState('')\r\n//   const [projectModalVisible, setProjectModalVisible] = useState(false);\r\n//   const [permissionModalVisible, setPermissionModalVisible] = useState(false);\r\n//   const [projName, setProjName] = useState(\"\");\r\n//   const [projCode, setProjCode] = useState(\"\");\r\n//   const [clientEmail, setClientEmail] = useState(\"\");\r\n//   const [startedDate, setStartDate] = useState(\"\");\r\n//   const [endedDate, setEndDate] = useState(\"\");\r\n//   const [departmentId, setDepartmentId] = useState([]);\r\n//   const [status, setStatus] = useState(\"\");\r\n//   const [code, setCode] = useState(\"\");\r\n//   const [user, setUser] = useState(JSON.parse(localStorage?.getItem(\"user\")));\r\n//   const [data, setData] = useState([]);\r\n//   const [dataArray, setDataArray] = useState([]);\r\n\r\n//   const [departmentOptions, setDepartmentOptions] = useState([]);\r\n//   const [departmentInfo,setDepartmentInfo] = useState([])\r\n//   const [projectOptions, setProjects] = useState([]);\r\n//   const [clients,setClients] = useState([])\r\n//   const [projectId, setProjectId] = useState(\"\");\r\n//   const history = useHistory();\r\n\r\n//   const rowClickHandler=(record)=>{\r\n//     history.push({\r\n//       pathname: './mdr',\r\n//       state: { selectedRecord: record },\r\n//     });\r\n//   }\r\n//   const handleAll=()=>{\r\n//     setData(dataArray)\r\n//   }\r\n//   const handleCompleted=()=>{\r\n//     const completedData = dataArray.filter(item => item.status === 'completed');\r\n//     setData(completedData)\r\n//   }\r\n//   const handleOnGoing=()=>{\r\n//     const ongoingData = dataArray.filter(item => item.status === 'Ongoing');\r\n//     setData(ongoingData)\r\n\r\n//   }\r\n\r\n//   const handleClose = ()=>{\r\n//     console.log('closing');\r\n//   }\r\n//   const handleSearch = (selectedKeys, confirm, dataIndex) => {\r\n//     confirm();\r\n//     setSearchText(selectedKeys[0]);\r\n//     setSearchedColumn(dataIndex);\r\n//   };\r\n//   const handleReset = (clearFilters) => {\r\n//     clearFilters();\r\n//     setSearchText('');\r\n//   };\r\n\r\n//   const getColumnSearchProps = (dataIndex) => ({\r\n//     filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters, close }) => (\r\n//       <div style={{ padding: 8 }}>\r\n//         <Input\r\n//           ref={searchInput}\r\n//           placeholder={`Search ${dataIndex}`}\r\n//           value={selectedKeys[0]}\r\n//           onChange={(e) => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n//           onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n//           style={{ marginBottom: 8, display: 'block' }}\r\n//         />\r\n//         <Space>\r\n//           <Button\r\n//             type=\"primary\"\r\n//             onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n//             icon={<SearchOutlined />}\r\n//             size=\"small\"\r\n//             style={{ width: 90 }}\r\n//           >\r\n//             Search\r\n//           </Button>\r\n//           <Button onClick={() => clearFilters && handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n//             Reset\r\n//           </Button>\r\n\r\n//         </Space>\r\n//       </div>\r\n//     ),\r\n//     filterIcon: (filtered) => (\r\n//       <SearchOutlined style={{ color: filtered ? '#1677ff' : undefined }} />\r\n//     ),\r\n//     onFilter: (value, record) =>\r\n//       record[dataIndex].toString().toLowerCase().includes(value.toLowerCase()),\r\n//     onFilterDropdownOpenChange: (visible) => {\r\n//       if (visible) {\r\n//         setTimeout(() => searchInput.current?.select(), 100);\r\n//       }\r\n//     },\r\n//     render: (text) =>\r\n//       searchedColumn === dataIndex ? (\r\n//         <Highlighter\r\n//           highlightStyle={{\r\n//             backgroundColor: '#ffc069',\r\n//             padding: 0,\r\n//           }}\r\n//           searchWords={[searchText]}\r\n//           autoEscape\r\n//           textToHighlight={text ? text.toString() : ''}\r\n//         />\r\n//       ) : (\r\n//         text\r\n//       ),\r\n//   });\r\n\r\n\r\n// const menu = (\r\n//   <Menu>\r\n//     <Menu.Item onClick={() => handleAll()}>All</Menu.Item>\r\n//     <Menu.Item onClick={() => handleCompleted()}>Completed</Menu.Item>\r\n//     <Menu.Item onClick={() => handleOnGoing()}>Ongoing</Menu.Item>\r\n//   </Menu>\r\n// );\r\n// const columns = [\r\n//   {\r\n//     title: \"Project Code\",\r\n//     dataIndex: \"code\",\r\n//     key: \"code\",\r\n//     ...getColumnSearchProps('code'),\r\n//   },\r\n//   {\r\n//     title: \"Project \",\r\n//     dataIndex: \"title\",\r\n//     key: \"title\",\r\n//     ...getColumnSearchProps('title'),\r\n\r\n//   },\r\n//   {\r\n//     title: \"Department \",\r\n//     dataIndex: \"departmentTitle\",\r\n//     key: \"departmentTitle\",\r\n//     ...getColumnSearchProps('departmentTitle'),\r\n\r\n//     // filters: [\r\n\r\n//     //   {\r\n//     //     text: 'Project Management',\r\n//     //     value: 'Project Management',\r\n//     //   },\r\n//     //   {\r\n//     //     text: 'Mechanical',\r\n//     //     value: 'Mechanical',\r\n//     //   },\r\n//     //   {\r\n//     //     text: 'Electrical',\r\n//     //     value: 'Electrical',\r\n//     //   },\r\n//     //   {\r\n//     //     text: 'Process',\r\n//     //     value: 'Process',\r\n//     //   },\r\n//     // ],\r\n//     // onFilter:  (value, record) =>record.departmentTitle === value,\r\n\r\n    \r\n//   },\r\n//   {\r\n//     title: \"Client\",\r\n//     dataIndex: \"clientId\",\r\n//     key: \"clientId\",\r\n//     ...getColumnSearchProps('clientId'),\r\n\r\n//   },\r\n//   // {\r\n//   //   title: \"No of Users\",\r\n//   //   dataIndex: \"noOfUsers\",\r\n//   //   key: \"noOfUsers\",\r\n//   // },\r\n//   {\r\n//     title: \"Start Date\",\r\n//     dataIndex: \"startedDate\",\r\n//     key: \"startedDate\",\r\n//     sorter: (a, b) => {\r\n//       const dateA = new Date(a.startedDate.split('/').reverse().join('/'));\r\n//       const dateB = new Date(b.startedDate.split('/').reverse().join('/'));\r\n//       return dateA - dateB;\r\n//     }  },\r\n\r\n//   {\r\n//     title: \"Expected End Date\",\r\n//     dataIndex: \"endedDate\",\r\n//     key: \"endedDate\",\r\n//     sorter: (a, b) => {\r\n//       const dateA = new Date(a.endedDate.split('/').reverse().join('/'));\r\n//       const dateB = new Date(b.endedDate.split('/').reverse().join('/'));\r\n//       return dateA - dateB;\r\n//     }  },\r\n//   {\r\n//     title: (\r\n//       \"Status\"\r\n//     ),\r\n//     key: \"status\",\r\n//     dataIndex: \"status\",\r\n\r\n// filters: [\r\n\r\n//       {\r\n//         text: 'Initialized',\r\n//         value: 'Initialized',\r\n//       },\r\n//       {\r\n//         text: 'Ongoing',\r\n//         value: 'Ongoing',\r\n//       },\r\n//       {\r\n//         text: 'Completed',\r\n//         value: 'Completed',\r\n//       },\r\n//     ],\r\n//     onFilter:  (value, record) =>record.status === value,\r\n//   },\r\n//   // {\r\n//   //   title: \"Action\",\r\n//   //   key: \"action\",\r\n//   //   render: (_, record) => (\r\n//   //     <Space size=\"middle\">\r\n//   //       <a onClick={() => handleDelete(record)}>Delete</a>\r\n//   //     </Space>\r\n//   //   )\r\n//   // },\r\n//   {\r\n//     title: \"Progress\",\r\n//     key: \"percentage\",\r\n//     render: (_, record) => (\r\n//       <Space>\r\n//         {record.percentage !== null ? (\r\n//           <ProgressComp percentage={record.percentage.toFixed(1)} />\r\n//         ) : null}\r\n//       </Space>\r\n//     )\r\n//   }\r\n// ];\r\n\r\n//   const handleStartDateChange = (date) => {\r\n//     setStartDate(date);\r\n//   };\r\n\r\n//   const handleEndDateChange = (date) => {\r\n//     setEndDate(date);\r\n//   };\r\n//   const fetchClients = async () => {\r\n//     try {\r\n//       const response = await axios.get(\r\n//         `http://127.0.0.1:8083/api/clients?companyId=${user?.user?.companyId}`,\r\n//         {\r\n//           headers: {\r\n//             Authorization: user?.accessToken,\r\n//           },\r\n//         }\r\n//       );\r\n  \r\n//       // Use Set to store unique titles\r\n//       const uniqueTitlesSet = new Set();\r\n  \r\n//       const options = response?.data.reduce((acc, item) => {\r\n//         // Check if the title is not in the Set\r\n//         if (!uniqueTitlesSet.has(item.companyName)) {\r\n//           // Add title to the Set\r\n//           uniqueTitlesSet.add(item.com);\r\n  \r\n//           // Push the option to the result array\r\n//           acc.push({ value: item.id, label: item.companyName, name: item.companyName });\r\n//         }\r\n  \r\n//         return acc;\r\n//       }, []);\r\n  \r\n//       setClients(options); // Assuming the response.data is an array of projects\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching departments:\", error?.message);\r\n//     }\r\n//   };\r\n\r\n//   const projectModalShow = () => {\r\n\r\n//     setProjectModalVisible(true);\r\n//   };\r\n\r\n//   const projectModalCancel = () => {\r\n//     setCode(\"\");\r\n//     setStatus(\"\");\r\n//     setProjName(\"\");\r\n//     setClientEmail(\"\")\r\n//     setDepartmentName(\"\")\r\n//     setDepartmentId([]);\r\n//     setProjectModalVisible(false);\r\n//   };\r\n\r\n//   const permissionModalShow = () => {\r\n//     setPermissionModalVisible(true);\r\n//   };\r\n//   const permissionModalCancel = () => {\r\n//     setPermissionModalVisible(false);\r\n//   };\r\n//   const addProject = async () => {\r\n// if (!projName || !clientEmail ) {\r\n//     // If any required field is missing, display a validation error notification\r\n//     notification.error({\r\n//       message: 'Validation Error',\r\n//       description: 'Please fill in all required fields.',\r\n//       style: {\r\n//         backgroundColor: '#f5222d', // Red color background\r\n//         color: '#fff', // White text color\r\n//       },\r\n//     });\r\n//     return; // Exit early if validation fails\r\n//   }\r\n//     // console.log(selectedDepartments,'selectedDepartments');\r\n//     // console.log(departmentInfo,\"info agayi yaha bhi\");\r\n//     const mappedDepartments = selectedDepartments.map(departmentId => {\r\n//       const department = departmentInfo.find(department => department.id === departmentId);\r\n//       return {\r\n//           suffix: department ? department.suffix : null,\r\n//           title: department ? department.title : null\r\n//       };\r\n//   });\r\n//   // console.log(mappedDepartments,\"department bhi agaye\");\r\n//     try {\r\n//       const response = await axios.post(\r\n//         \"http://127.0.0.1:8083/api/projects/\",\r\n//         {\r\n//           title: projName,\r\n//           departmentId:selectedDepartments,\r\n//           departments:mappedDepartments,\r\n//           status:\"Initialized\",\r\n//           noOfUsers:0,\r\n//           clientId:clientEmail,\r\n//           code,\r\n//           companyId: user?.user?.companyId,\r\n//           authorId: user?.user?.id,\r\n//           authorName: `${user?.user?.firstName} ${user?.user?.lastName}`,\r\n//           startedDate,\r\n//           endedDate\r\n//         },\r\n//         {\r\n//           headers: {\r\n//             Authorization: user?.accessToken,\r\n//             // Add other headers if needed\r\n//           },\r\n//         }\r\n//       );\r\n//       // Handle the response as needed\r\n//       console.log(response);\r\n//       notification.success({\r\n//         message: `${response?.data?.message}`,\r\n//         style: {\r\n//           backgroundColor: '#52c41a', // Red color background\r\n//           color: '#fff', // White text color\r\n//         },\r\n//       }\r\n//     )\r\n//       setProjectModalVisible(false);      \r\n//       fetchData();\r\n//     } catch (error) {\r\n//       // Handle errors\r\n//       console.error(\"Error adding projects:\", error);\r\n//     }\r\n//   };\r\n//   // useEffect(()=>{\r\n//   //   setCode(\"\");\r\n//   //   setStatus(\"\");\r\n//   //   setProjName(\"\");\r\n//   //   setClientEmail(\"\");\r\n//   //   setDepartmentId([]);\r\n//   // },[projectModalVisible])\r\n//   const fetchProgress = async()=>{\r\n//     try {\r\n//       const response = await axios.get(\r\n//         `http://127.0.0.1:8083/api/projects/progress?companyId=${user?.user.companyId}`,\r\n        \r\n//         {\r\n//           headers: {\r\n//             Authorization: user?.accessToken,\r\n//             // Add other headers if needed\r\n//           },\r\n//         }\r\n//       );\r\n//       // Handle the response as needed\r\n//       console.log(response.data,'projectIds');\r\n//       setProgresses(response.data.documentProgressResults)\r\n//       console.log(progresses,\"progresses\");\r\n//     } catch (error) {\r\n//       console.error(error)\r\n//     }\r\n//   }\r\n//   const fetchData = async () => {\r\n//     try {\r\n//       const response = await axios.get(\r\n//         `http://127.0.0.1:8083/api/projects?companyId=${user?.user?.companyId}&roleId=${user?.user?.roleId}`,\r\n//         {\r\n//           headers: {\r\n//             Authorization: user?.accessToken,\r\n//             // Add other headers if needed\r\n//           },\r\n//         }\r\n        \r\n//       );\r\n      \r\n//       console.log('Project response data',response.data);\r\n//       const formattedData = response.data.map(project => {\r\n//         // Assuming project.startedDate and project.endedDate are DateTime strings\r\n//         const formattedStartDate = new Date(project.startedDate).toLocaleDateString('en-GB');\r\n//         const formattedEndDate = new Date(project.endedDate).toLocaleDateString('en-GB');\r\n//         // Create a new object with formatted dates\r\n//         return {\r\n//           ...project,\r\n//           startedDate: formattedStartDate,\r\n//           endedDate: formattedEndDate,\r\n//         };\r\n//       });\r\n//       const userId = user?.user.departmentId\r\n//       const roleId = user?.user.roleId\r\n\r\n//       console.log(userId,'userId');\r\n\r\n//       if (userId !== undefined && roleId !==1) {\r\n//         if (roleId==6) {\r\n//           const userProjects = formattedData.filter(project => project.clientId == user?.user.companyId);\r\n//           setData(userProjects);\r\n\r\n//         }\r\n//         else{\r\n//           const userProjects = formattedData.filter(project => project.departmentIds.split(',').includes(userId.toString()));\r\n//           setData(userProjects);\r\n\r\n//         }\r\n//       } \r\n//       else{\r\n//         setData(formattedData)\r\n//       }\r\n//       setDataArray(formattedData)\r\n//       const options = [];\r\n//       for (const item of response?.data) {\r\n//         options.push({ value: item?.id, label: item?.title });\r\n//       }\r\n//       console.log(options);\r\n//       setProjects(options); // Assuming the response.data is an array of projects\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching projects:\", error?.message);\r\n//     }\r\n//   };\r\n\r\n//   const fetchDepartments = async () => {\r\n//     try {\r\n//       const response = await axios.get(\r\n//         `http://127.0.0.1:8083/api/departments?companyId=${user?.user?.companyId}`,\r\n//         {\r\n//           headers: {\r\n//             Authorization: user?.accessToken,\r\n//             // Add other headers if needed\r\n//           },\r\n//         }\r\n//       );\r\n//       console.log(response.data,\"data agaya\");\r\n//       const options = [];\r\n//       const option = []\r\n//       for (const item of response?.data) {\r\n//         options.push({ value: item?.id, label: item?.title });\r\n//         option.push({id:item?.id,title:item?.title,suffix:item?.suffix});\r\n//       }\r\n//       setDepartmentInfo(option)\r\n//       setDepartmentOptions(options)\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching departments:\", error?.message);\r\n//     }\r\n//   };\r\n//   useEffect(() => {\r\n//     setUser(JSON.parse(localStorage?.getItem(\"user\")));\r\n//     // Fetch data when the component mounts\r\n//     fetchClients();\r\n//     fetchDepartments();\r\n//     fetchData();\r\n//     // fetchProgress()\r\n//   }, []);\r\n//   var usedNumbers = [];\r\n\r\n//   function generateUnique4DigitNumber(usedNumbers) {\r\n//     while (true) {\r\n//         const number = Math.floor(Math.random() * 9000) + 1000; // Generate a random 4-digit number\r\n//         if (!usedNumbers.includes(number)) {\r\n//             usedNumbers.push(number);\r\n//             return number;\r\n//         }\r\n//     }\r\n// }\r\n\r\n\r\n//   return (\r\n//     <>\r\n//       <Modal\r\n//         title=\"Add Project\"\r\n//         width={416}\r\n//         centered\r\n//         visible={projectModalVisible}\r\n//         onCancel={projectModalCancel}\r\n//         footer={null}\r\n//         closeIcon={\r\n//           <RiCloseFill className=\"remix-icon text-color-black-100\" size={24} />\r\n//         }\r\n//       >\r\n//         <Form layout=\"vertical\" name=\"basic\">\r\n//         <Form.Item label=\"Project Code\" name=\"projCode\" rules={[\r\n//                   {\r\n//                     required: true,\r\n//                     message: \"Please Add Project Code\",\r\n//                   },\r\n//                 ]}>\r\n          \r\n//             <Input\r\n//               value={projCode}\r\n//               onChange={(e) => setCode(e.target.value)}\r\n//             />\r\n//           </Form.Item>         \r\n//            <Form.Item label=\"Project Name\" name=\"projName\" rules={[\r\n//                   {\r\n//                     required: true,\r\n//                     message: \"Please Add Project Name\",\r\n//                   },\r\n//                 ]}>\r\n//             <Input\r\n//               value={projName}\r\n//               onChange={(e) => setProjName(e.target.value)}\r\n//             />\r\n//           </Form.Item>\r\n \r\n//             <Form.Item\r\n//                 label=\"Client\"\r\n//                 name=\"clientEmail\"\r\n//                 rules={[\r\n//                   {\r\n//                     required: true,\r\n//                     message: \"Please select Client Email\",\r\n//                   },\r\n//                 ]}\r\n//               >\r\n//               <Select\r\n\r\n//                   options={clients}\r\n//                   value={clientEmail}\r\n//                   onChange={(value) => setClientEmail(value)}\r\n//                 />  \r\n//                 </Form.Item>\r\n\r\n\r\n//                 <Form.Item\r\n//                 label=\"Departments\"\r\n//                 name=\"departmentIds\"\r\n//                 rules={[{ required: true, message: 'Please select at least one department' }]}\r\n//               >\r\n//                 <Checkbox.Group options={departmentOptions} value={selectedDepartments} onChange={setSelectedDepartments} />\r\n//               </Form.Item>\r\n                \r\n\r\n//       <Form.Item label=\"Start Date\" name=\"startedDate\" rules={[{ required: true, message: 'Please select start date' }]}>\r\n//         <DatePicker style={{ width: '100%' }} onChange={handleStartDateChange} />\r\n//       </Form.Item>\r\n\r\n//       <Form.Item label=\"End Date\" name=\"endedDate\" rules={[{ required: true, message: 'Please select end date' }]}>\r\n//         <DatePicker style={{ width: '100%' }} onChange={handleEndDateChange} />\r\n//       </Form.Item>\r\n         \r\n//           <Row>\r\n//             <Col md={12} span={24} className=\"hp-pr-sm-0 hp-pr-12\">\r\n//               <Button\r\n//                 block\r\n//                 type=\"primary\"\r\n//                 htmlType=\"submit\"\r\n//                 onClick={() => addProject()}\r\n//               >\r\n//                 Add\r\n//               </Button>\r\n//             </Col>\r\n\r\n//             <Col md={12} span={24} className=\"hp-mt-sm-12 hp-pl-sm-0 hp-pl-12\">\r\n//               <Button block onClick={projectModalCancel}>\r\n//                 Cancel\r\n//               </Button>\r\n//             </Col>\r\n//           </Row>\r\n//         </Form>\r\n//       </Modal>\r\n\r\n//       <Modal\r\n//         title=\"Document Permissions\"\r\n//         width={416}\r\n//         centered\r\n//         visible={permissionModalVisible}\r\n//         onCancel={permissionModalCancel}\r\n//         footer={null}\r\n//         closeIcon={\r\n//           <RiCloseFill className=\"remix-icon text-color-black-100\" size={24} />\r\n//         }\r\n//       >\r\n//         <Form layout=\"vertical\" name=\"basic\">\r\n//           <Form.Item label=\"Project Name\" name=\"projectId\">\r\n//             <Select\r\n//               options={projectOptions}\r\n//               value={projectId}\r\n//               onChange={(e) => setProjectId(e)}\r\n//             />\r\n//           </Form.Item>\r\n\r\n//           <Row>\r\n//             <Col md={12} span={24} className=\"hp-pr-sm-0 hp-pr-12\">\r\n//               <Button\r\n//                 block\r\n//                 type=\"primary\"\r\n//                 htmlType=\"submit\"\r\n//                 onClick={() => addProject()}\r\n//               >\r\n//                 Add\r\n//               </Button>\r\n//             </Col>\r\n//             <Col md={12} span={24} className=\"hp-mt-sm-12 hp-pl-sm-0 hp-pl-12\">\r\n//               <Button block onClick={projectModalCancel}>\r\n//                 Cancel\r\n//               </Button>\r\n//             </Col>\r\n//           </Row>\r\n//         </Form>\r\n//       </Modal>\r\n\r\n// <div style={{ textAlign: \"right\", marginBottom: \"16px\" }}>\r\n//   {user?.user?.roleId == 1 && (\r\n//     <Button type=\"primary\" onClick={projectModalShow}>\r\n//       Add Project\r\n//     </Button>\r\n//   )}\r\n// </div>\r\n\r\n//       <Table\r\n//       bordered\r\n//       size=\"middle\"\r\n//       title={() => 'All Project Details'}\r\n//       footer={() => 'You may filter Projects'} \r\n//         columns={columns} \r\n//         dataSource={transformData(data)} \r\n//         onRow={(record) => ({\r\n//           onClick: () => rowClickHandler(record),\r\n//         })}\r\n//       />      \r\n//       <ProtectedAppPage />\r\n//     </>\r\n//   );\r\n// }\r\n// const transformData = (originalData) => {\r\n//   const groupedData = {};\r\n\r\n//   // Group data by title\r\n//   originalData.forEach((item) => {\r\n//     const title = item.title;\r\n\r\n//     if (!groupedData[title]) {\r\n//       groupedData[title] = { ...item, departmentNames: [item.departmentName + ','] };\r\n//     } else {\r\n//       groupedData[title].departmentNames.push(item.departmentName + ',');\r\n//     }\r\n//   });\r\n\r\n//   // Convert the grouped data into an array and join department names with spaces\r\n//   const transformedData = Object.values(groupedData).map((item) => ({\r\n//     ...item,\r\n//     departmentName: item.departmentNames.join(''), // Join without spaces\r\n//   }));\r\n\r\n//   return transformedData;\r\n// };\r\n\r\n\r\n\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { DownOutlined } from '@ant-design/icons';\r\n\r\nimport {notification,\r\n  Button,Form,Row,Col,Space,Table,Select,Input,Dropdown,Menu,DatePicker,TimePicker,Modal,message,Checkbox,Upload,\r\n  Tooltip,\r\n} from \"antd\";\r\nimport { RiCloseFill, RiCalendarLine } from \"react-icons/ri\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport ProtectedAppPage from \"../Protected\";\r\nimport { SearchOutlined } from '@ant-design/icons';\r\nimport Highlighter from 'react-highlight-words';\r\nimport ProgressComp from \"./Progress\";\r\nimport { Create, DeleteOutlined, EditOutlined } from \"@mui/icons-material\";\r\nimport { Edit } from \"iconsax-react\";\r\nexport default function Projects() {\r\n\r\n  const [searchText, setSearchText] = useState('');\r\n  const [searchedColumn, setSearchedColumn] = useState('');\r\n  const searchInput = useRef(null);\r\n  const [progresses,setProgresses] = useState()\r\n  const [selectedDepartments, setSelectedDepartments] = useState([]);\r\n  const [departmentName,setDepartmentName] = useState('')\r\n  const [projectModalVisible, setProjectModalVisible] = useState(false);\r\n  const [permissionModalVisible, setPermissionModalVisible] = useState(false);\r\n  const [projName, setProjName] = useState(\"\");\r\n  const [projCode, setProjCode] = useState(\"\");\r\n  const [clientEmail, setClientEmail] = useState(\"\");\r\n  const [startedDate, setStartDate] = useState(\"\");\r\n  const [endedDate, setEndDate] = useState(\"\");\r\n  const [departmentId, setDepartmentId] = useState([]);\r\n  const [status, setStatus] = useState(\"\");\r\n  const [code, setCode] = useState(\"\");\r\n  const [user, setUser] = useState(JSON.parse(localStorage?.getItem(\"user\")));\r\n  const [data, setData] = useState([]);\r\n  const [dataArray, setDataArray] = useState([]);\r\n  const [deleteModalVisible, setDeleteModalVisible] = useState(false);\r\n  const [record, setRecord] = useState(null);\r\n  const [api, contextHolder] = notification.useNotification();\r\n  const[projectForm]= Form.useForm()\r\n  const [departmentOptions, setDepartmentOptions] = useState([]);\r\n  const [departmentInfo,setDepartmentInfo] = useState([])\r\n  const [projectOptions, setProjects] = useState([]);\r\n  const [clients,setClients] = useState([])\r\n  const [clientName,setClientName] = useState([])\r\n  const [form] = Form.useForm();\r\n  const [projectUpdate, setProjectUpdate] = useState(false);\r\n  const [projectToUpdate, setProjectToUpdate] = useState();\r\n  const [projectId, setProjectId] = useState(\"\");\r\n  const history = useHistory();\r\n  const [updateForm] = Form.useForm();\r\n\r\n  const handleSubmit = () => {\r\n    projectForm.validateFields().then((values) => {\r\n      addProject()\r\n      projectForm.resetFields();\r\n    });\r\n  };\r\n\r\n  const rowClickHandler=(record)=>{\r\n    history.push({\r\n      pathname: './mdr',\r\n      state: { selectedRecord: record },\r\n    });\r\n  }\r\n  const handleAll=()=>{\r\n    setData(dataArray)\r\n  }\r\n  const handleCompleted=()=>{\r\n    const completedData = dataArray.filter(item => item.status === 'completed');\r\n    setData(completedData)\r\n  }\r\n  const handleOnGoing=()=>{\r\n    const ongoingData = dataArray.filter(item => item.status === 'Ongoing');\r\n    setData(ongoingData)\r\n\r\n  }\r\n\r\n  const handleCreateMDR = () => {\r\n    history.push('./mdr'); // Replace with the path to your MDR page\r\n\r\n  };\r\n\r\n  const openNotification = (pauseOnHover) => () => {\r\n    {\r\n       api.open({\r\n        message: 'Notification Title',\r\n        description:\r\n          'This is the content of the notification. This is the content of the notification. This is the content of the notification.',\r\n        showProgress: true,\r\n        pauseOnHover,\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const handleClose = ()=>{\r\n    console.log('closing');\r\n  }\r\n\r\n  const deleteModalShow = (record) => {\r\n    setRecord(record)\r\n    setDeleteModalVisible(true);\r\n  };\r\n  const deleteModalCancel = () => {\r\n    setDeleteModalVisible(false);\r\n  };\r\n\r\n  const handleSearch = (selectedKeys, confirm, dataIndex) => {\r\n    confirm();\r\n    setSearchText(selectedKeys[0]);\r\n    setSearchedColumn(dataIndex);\r\n  };\r\n  const handleReset = (clearFilters) => {\r\n    clearFilters();\r\n    setSearchText('');\r\n  };\r\n\r\n  const getColumnSearchProps = (dataIndex) => ({\r\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters, close }) => (\r\n      <div style={{ padding: 8 }}>\r\n        <Input\r\n          ref={searchInput}\r\n          placeholder={`Search ${dataIndex}`}\r\n          value={selectedKeys[0]}\r\n          onChange={(e) => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n          onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n          style={{ marginBottom: 8, display: 'block' }}\r\n        />\r\n        <Space>\r\n          <Button\r\n            type=\"primary\"\r\n            onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n            icon={<SearchOutlined />}\r\n            size=\"small\"\r\n            style={{ width: 90 }}\r\n          >\r\n            Search\r\n          </Button>\r\n          <Button onClick={() => clearFilters && handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n            Reset\r\n          </Button>\r\n\r\n        </Space>\r\n      </div>\r\n    ),\r\n    filterIcon: (filtered) => (\r\n      <SearchOutlined style={{ color: filtered ? '#1677ff' : undefined }} />\r\n    ),\r\n    onFilter: (value, record) =>\r\n      record[dataIndex].toString().toLowerCase().includes(value.toLowerCase()),\r\n    onFilterDropdownOpenChange: (visible) => {\r\n      if (visible) {\r\n        setTimeout(() => searchInput.current?.select(), 100);\r\n      }\r\n    },\r\n    render: (text) =>\r\n      searchedColumn === dataIndex ? (\r\n        <Highlighter\r\n          highlightStyle={{\r\n            backgroundColor: '#ffc069',\r\n            padding: 0,\r\n          }}\r\n          searchWords={[searchText]}\r\n          autoEscape\r\n          textToHighlight={text ? text.toString() : ''}\r\n        />\r\n      ) : (\r\n        text\r\n      ),\r\n  });\r\n\r\n\r\nconst menu = (\r\n  <Menu>\r\n    <Menu.Item onClick={() => handleAll()}>All</Menu.Item>\r\n    <Menu.Item onClick={() => handleCompleted()}>Completed</Menu.Item>\r\n    <Menu.Item onClick={() => handleOnGoing()}>Ongoing</Menu.Item>\r\n  </Menu>\r\n);\r\nconst columns = [\r\n  {\r\n    title: \"Project Code\",\r\n    dataIndex: \"code\",\r\n    key: \"code\",\r\n    ...getColumnSearchProps('code'),\r\n  },\r\n  {\r\n    title: \"Project \",\r\n    dataIndex: \"title\",\r\n    key: \"title\",\r\n    ...getColumnSearchProps('title'),\r\n\r\n  },\r\n  {\r\n    title: \"Department \",\r\n    dataIndex: \"departmentTitle\",\r\n    key: \"departmentTitle\",\r\n    ...getColumnSearchProps('departmentTitle'),\r\n\r\n    // filters: [\r\n\r\n    //   {\r\n    //     text: 'Project Management',\r\n    //     value: 'Project Management',\r\n    //   },\r\n    //   {\r\n    //     text: 'Mechanical',\r\n    //     value: 'Mechanical',\r\n    //   },\r\n    //   {\r\n    //     text: 'Electrical',\r\n    //     value: 'Electrical',\r\n    //   },\r\n    //   {\r\n    //     text: 'Process',\r\n    //     value: 'Process',\r\n    //   },\r\n    // ],\r\n    // onFilter:  (value, record) =>record.departmentTitle === value,\r\n\r\n    \r\n  },\r\n  {\r\n    title: \"Client\",\r\n    dataIndex: \"clientName\",\r\n    key: \"clientName\",\r\n    ...getColumnSearchProps('clientName'),\r\n  },\r\n  // {\r\n  //   title: \"No of Users\",\r\n  //   dataIndex: \"noOfUsers\",\r\n  //   key: \"noOfUsers\",\r\n  // },\r\n  {\r\n    title: \"Start Date\",\r\n    dataIndex: \"startedDate\",\r\n    key: \"startedDate\",\r\n    sorter: (a, b) => {\r\n      const dateA = new Date(a.startedDate.split('/').reverse().join('/'));\r\n      const dateB = new Date(b.startedDate.split('/').reverse().join('/'));\r\n      return dateA - dateB;\r\n    }  },\r\n\r\n  {\r\n    title: \"Expected End Date\",\r\n    dataIndex: \"endedDate\",\r\n    key: \"endedDate\",\r\n    sorter: (a, b) => {\r\n      const dateA = new Date(a.endedDate.split('/').reverse().join('/'));\r\n      const dateB = new Date(b.endedDate.split('/').reverse().join('/'));\r\n      return dateA - dateB;\r\n    }  },\r\n  {\r\n    title: (\r\n      \"Status\"\r\n    ),\r\n    key: \"status\",\r\n    dataIndex: \"status\",\r\n\r\nfilters: [\r\n\r\n      {\r\n        text: 'Initialized',\r\n        value: 'Initialized',\r\n      },\r\n      {\r\n        text: 'Ongoing',\r\n        value: 'Ongoing',\r\n      },\r\n      {\r\n        text: 'Completed',\r\n        value: 'Completed',\r\n      },\r\n    ],\r\n    onFilter:  (value, record) =>record.status === value,\r\n  },\r\n  // {\r\n  //   title: \"Action\",\r\n  //   key: \"action\",\r\n  //   render: (_, record) => (\r\n  //     <Space size=\"middle\">\r\n  //       <a onClick={() => handleDelete(record)}>Delete</a>\r\n  //     </Space>\r\n  //   )\r\n  // },\r\n  {\r\n    title: \"Progress\",\r\n    key: \"percentage\",\r\n    render: (_, record) => (\r\n      <Space>\r\n        {record.percentage !== null ? (\r\n          <ProgressComp percentage={record.percentage.toFixed(1)} />\r\n        ) : null}\r\n      </Space>\r\n    )\r\n  },\r\n  {\r\n    title: \"Action\",\r\n    key: \"action\",\r\n    render: (_, record) => (\r\n      \r\n      <Space size=\"middle\">\r\n        <Tooltip title=\"Create MDR\">\r\n  <Button\r\n    size=\"middle\"\r\n    icon={<Create />}\r\n    disabled={user?.user?.roleId !== 1}\r\n    onClick={handleCreateMDR}\r\n  />\r\n</Tooltip>\r\n        <Tooltip title=\"Update Project\">\r\n  <Button\r\n    size=\"middle\"\r\n    icon={<Edit />}\r\n    disabled={user?.user?.roleId !== 1}\r\n    onClick={() => projectUpdateModalShow(record)}\r\n  />\r\n</Tooltip>\r\n          <Tooltip title=\"Delete\">\r\n  <Button\r\n    size=\"middle\"\r\n    icon={<DeleteOutlined />}\r\n    disabled={user?.user?.roleId !== 1}\r\n    onClick={() => deleteModalShow(record)}\r\n  />\r\n</Tooltip>\r\n\r\n\r\n\r\n\r\n          {/* <Button\r\n            size=\"middle\"\r\n            icon={<EditOutlined />}\r\n            onClick={() => projectUpdateModalShow(record)}\r\n          /> */}\r\n\r\n          {/* <a onClick={() => deleteModalShow(record)} disabled={user?.user?.roleId !== 1}>Delete</a> */}\r\n      </Space>\r\n      \r\n    ),\r\n  },\r\n];\r\nconst handleDelete = async (record) => {\r\n  // Your delete logic here\r\n  const id = record.id\r\n  console.log(id);\r\n  const response = await axios.delete(\r\n    `http://127.0.0.1:8083/api/users?delete=3&recordId=${record.id}`,\r\n    {\r\n      headers: {\r\n        Authorization: user?.accessToken,\r\n        // Add other headers if needed\r\n      },\r\n    }\r\n  );\r\n  message.success(response.data.message)\r\n  deleteModalCancel()\r\n  fetchData()\r\n\r\n};\r\n\r\n\r\n  const handleStartDateChange = (date) => {\r\n    setStartDate(date);\r\n  };\r\n\r\n  const handleEndDateChange = (date) => {\r\n    setEndDate(date);\r\n  };\r\n  const fetchClients = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://127.0.0.1:8083/api/clients?companyId=${user?.user?.companyId}`,\r\n        {\r\n          headers: {\r\n            Authorization: user?.accessToken,\r\n          },\r\n        }\r\n      );\r\n  \r\n      // Use Set to store unique titles\r\n      const uniqueTitlesSet = new Set();\r\n      const optionName = {} // Initialize the object if not already done\r\n\r\n      var options = response?.data.reduce((acc, item) => {\r\n        // Check if the title is not in the Set\r\n        if (!uniqueTitlesSet.has(item.companyName)) {\r\n          // Add title to the Set\r\n          uniqueTitlesSet.add(item.com);\r\n  \r\n          // Push the option to the result array\r\n          acc.push({ value: item.id, label: item.companyName, name: item.companyName });\r\n          optionName[item.id] = item.companyName; // Add the key-value pair\r\n        }\r\n  \r\n        return acc;\r\n      }, []);\r\n     \r\n  \r\n      console.log(options,'options Aye hain');\r\n      console.log(optionName,'optionName Aye hain');\r\n      \r\n      setClients(options); // Assuming the response.data is an array of projects\r\n      setClientName(optionName); // Assuming the response.data is an array of projects\r\n\r\n    } catch (error) {\r\n      console.error(\"Error fetching departments:\", error?.message);\r\n    }\r\n  };\r\n\r\n  const handleUpdate=async()=>{\r\n    try {\r\n      const response  = await axios.put\r\n      (`http://127.0.0.1:8083/api/projects?companyId=${user?.user.companyId}&id=${updateForm.getFieldValue(\"id\")}`,\r\n      {\r\n        title:updateForm.getFieldValue(\"title\"),\r\n        code:updateForm.getFieldValue(\"code\"),\r\n      },\r\n      {\r\n        headers: {\r\n          Authorization: user?.accessToken,\r\n          // Add other headers if needed\r\n        },\r\n      }\r\n    )\r\n      message.success(response.data.message)\r\n      projectUpdateModalCancel()\r\n      fetchData()\r\n    } catch (error) {\r\n            console.error(\"Error updating departments:\", error?.message);\r\n    }\r\n  }\r\n\r\n  const projectModalShow = () => {\r\n\r\n    setProjectModalVisible(true);\r\n  };\r\n\r\n  const projectModalCancel = () => {\r\n    setCode(\"\");\r\n    setStatus(\"\");\r\n    setProjName(\"\");\r\n    setClientEmail(\"\")\r\n    setDepartmentName(\"\")\r\n    setDepartmentId([]);\r\n    setProjectModalVisible(false);\r\n  };\r\n\r\n  const permissionModalShow = () => {\r\n    setPermissionModalVisible(true);\r\n  };\r\n  const permissionModalCancel = () => {\r\n    setPermissionModalVisible(false);\r\n  };\r\n  const addProject = async () => {\r\nif (!projName || !clientEmail ) {\r\n    // If any required field is missing, display a validation error notification\r\n    notification.error({\r\n      message: 'Validation Error',\r\n      description: 'Please fill in all required fields.',\r\n      style: {\r\n        backgroundColor: '#f5222d', // Red color background\r\n        color: '#fff', // White text color\r\n      },\r\n    });\r\n    return; // Exit early if validation fails\r\n  }\r\n    // console.log(selectedDepartments,'selectedDepartments');\r\n    // console.log(departmentInfo,\"info agayi yaha bhi\");\r\n    const mappedDepartments = selectedDepartments.map(departmentId => {\r\n      const department = departmentInfo.find(department => department.id === departmentId);\r\n      return {\r\n          suffix: department ? department.suffix : null,\r\n          title: department ? department.title : null\r\n      };\r\n  });\r\n  // console.log(mappedDepartments,\"department bhi agaye\");\r\n    try {\r\n      const response = await axios.post(\r\n        \"http://127.0.0.1:8083/api/projects/\",\r\n        {\r\n          title: projName,\r\n          departmentId:selectedDepartments,\r\n          departments:mappedDepartments,\r\n          status:\"Initialized\",\r\n          noOfUsers:0,\r\n          clientId:clientEmail,\r\n          code,\r\n          companyId: user?.user?.companyId,\r\n          authorId: user?.user?.id,\r\n          authorName: `${user?.user?.firstName} ${user?.user?.lastName}`,\r\n          startedDate,\r\n          endedDate\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: user?.accessToken,\r\n            // Add other headers if needed\r\n          },\r\n        }\r\n      );\r\n      // Handle the response as needed\r\n      console.log(response);\r\n\r\n    //   notification.success({\r\n    //     message: `${response?.data?.message}`,\r\n    //     style: {\r\n    //       backgroundColor: '#52c41a', // Red color background\r\n    //       color: '#fff', // White text color\r\n    //     },\r\n    //   },\r\n    // )\r\n\r\n      setProjectModalVisible(false);      \r\n      fetchData();\r\n\r\n    notification.success({\r\n      message: 'Successfully Created',\r\n      description: `${response.data.message}`,\r\n      style: {\r\n        backgroundColor: '#52c41a', // Green color background\r\n        color: '#fff', // White text color\r\n      },\r\n    });\r\n  } catch (error) {\r\n    if (error.response?.status === 409) {\r\n      // Conflict error (HTTP 409)\r\n      notification.error({\r\n        message: 'Conflict Error',\r\n        description: 'A project with this name or code already exists. Please choose a different name or code.',\r\n        style: {\r\n          backgroundColor: '#f5222d', // Red color background\r\n          color: '#fff', // White text color\r\n        },\r\n      });\r\n    } else {\r\n      // Handle other errors\r\n      notification.error({\r\n        message: 'Error',\r\n        description: 'An error occurred while adding the project. Please try again.',\r\n        style: {\r\n          backgroundColor: '#f5222d', // Red color background\r\n          color: '#fff', // White text color\r\n        },\r\n      });\r\n    }\r\n  }\r\n  };\r\n  // useEffect(()=>{\r\n  //   setCode(\"\");\r\n  //   setStatus(\"\");\r\n  //   setProjName(\"\");\r\n  //   setClientEmail(\"\");\r\n  //   setDepartmentId([]);\r\n  // },[projectModalVisible])\r\n  \r\n  const fetchProgress = async()=>{\r\n    try {\r\n      const response = await axios.get(\r\n        `http://127.0.0.1:8083/api/projects/progress?companyId=${user?.user.companyId}`,\r\n        \r\n        {\r\n          headers: {\r\n            Authorization: user?.accessToken,\r\n            // Add other headers if needed\r\n          },\r\n        }\r\n      );\r\n      // Handle the response as needed\r\n      console.log(response.data,'projectIds');\r\n      setProgresses(response.data.documentProgressResults)\r\n      console.log(progresses,\"progresses\");\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n  }\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://127.0.0.1:8083/api/projects?companyId=${user?.user?.companyId}&roleId=${user?.user?.roleId}&id=${user?.user.id}&firstName=${user?.user.firstName}`,\r\n        {\r\n          headers: {\r\n            Authorization: user?.accessToken,\r\n            // Add other headers if needed\r\n          },\r\n        }\r\n        \r\n      );\r\n      \r\n      console.log('Project response data',response.data);\r\n      const formattedData = response.data.map(project => {\r\n        // Assuming project.startedDate and project.endedDate are DateTime strings\r\n        const formattedStartDate = new Date(project.startedDate).toLocaleDateString('en-GB');\r\n        const formattedEndDate = new Date(project.endedDate).toLocaleDateString('en-GB');\r\n        console.log(project.clientId,\"Yaha aya\");\r\n        \r\n\r\n        // Create a new object with formatted dates\r\n        return {\r\n          ...project,\r\n          startedDate: formattedStartDate,\r\n          endedDate: formattedEndDate,\r\n        };\r\n      });\r\n      console.log('Project response data',formattedData);\r\n\r\n      const userId = user?.user.departmentId\r\n      const roleId = user?.user.roleId\r\n\r\n      console.log(userId,'userId');\r\n      const filter = formattedData.filter(item=>item.removed == false)\r\n        setData(filter)\r\n      setDataArray(formattedData)\r\n      const options = [];\r\n      for (const item of response?.data) {\r\n        options.push({ value: item?.id, label: item?.title });\r\n      }\r\n      console.log(options);\r\n      setProjects(options); // Assuming the response.data is an array of projects\r\n    } catch (error) {\r\n      console.error(\"Error fetching projects:\", error?.message);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const projectUpdateModalShow = (record) => {\r\n    setProjectToUpdate(record)\r\n\r\n    // Populate the form fields with the userToUpdate object when the modal is opened\r\n    updateForm.setFieldsValue({\r\n      id:record.id,\r\n      title: record.title,\r\n      code: record.code,\r\n    });\r\n    \r\n    setProjectUpdate(true);\r\n  };\r\n\r\n  const projectUpdateModalCancel = () => {\r\n    setProjectUpdate(false);\r\n  };\r\n\r\n\r\n  const fetchDepartments = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://127.0.0.1:8083/api/departments?companyId=${user?.user?.companyId}`,\r\n        {\r\n          headers: {\r\n            Authorization: user?.accessToken,\r\n            // Add other headers if needed\r\n          },\r\n        }\r\n      );\r\n      console.log(response.data,\"data agaya\");\r\n      const options = [];\r\n      const option = []\r\n      for (const item of response?.data) {\r\n        options.push({ value: item?.id, label: item?.title });\r\n        option.push({id:item?.id,title:item?.title,suffix:item?.suffix});\r\n      }\r\n      setDepartmentInfo(option)\r\n      setDepartmentOptions(options)\r\n    } catch (error) {\r\n      console.error(\"Error fetching departments:\", error?.message);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    setUser(JSON.parse(localStorage?.getItem(\"user\")));\r\n    // Fetch data when the component mounts\r\n    fetchClients();\r\n    fetchDepartments();\r\n    fetchData();\r\n    // fetchProgress()\r\n  }, []);\r\n  var usedNumbers = [];\r\n\r\n  function generateUnique4DigitNumber(usedNumbers) {\r\n    while (true) {\r\n        const number = Math.floor(Math.random() * 9000) + 1000; // Generate a random 4-digit number\r\n        if (!usedNumbers.includes(number)) {\r\n            usedNumbers.push(number);\r\n            return number;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        title=\"Add Project\"\r\n        width={416}\r\n        centered\r\n        visible={projectModalVisible}\r\n        onCancel={projectModalCancel}\r\n        footer={null}\r\n        closeIcon={\r\n          <RiCloseFill className=\"remix-icon text-color-black-100\" size={24} />\r\n        }\r\n      >\r\n        <Form layout=\"vertical\" name=\"basic\" onFinish={handleSubmit} form={projectForm}>\r\n        <Form.Item label=\"Project Code\" name=\"projCode\" rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please Add Project Code\",\r\n                  },\r\n                ]}>\r\n          \r\n            <Input\r\n              value={projCode}\r\n              onChange={(e) => setCode(e.target.value)}\r\n            />\r\n          </Form.Item>         \r\n           <Form.Item label=\"Project Name\" name=\"projName\" rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please Add Project Name\",\r\n                  },\r\n                ]}>\r\n            <Input\r\n              value={projName}\r\n              onChange={(e) => setProjName(e.target.value)}\r\n            />\r\n          </Form.Item>\r\n \r\n            <Form.Item\r\n                label=\"Client\"\r\n                name=\"clientEmail\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please select Client\",\r\n                  },\r\n                ]}\r\n              >\r\n              <Select\r\n\r\n                  options={clients}\r\n                  value={clientEmail}\r\n                  onChange={(value) => setClientEmail(value)}\r\n                />  \r\n                </Form.Item>\r\n\r\n\r\n                <Form.Item\r\n                label=\"Departments\"\r\n                name=\"departmentIds\"\r\n                rules={[{ required: true, message: 'Please select at least one department' }]}\r\n              >\r\n                <Checkbox.Group options={departmentOptions} value={selectedDepartments} onChange={setSelectedDepartments} />\r\n              </Form.Item>\r\n                \r\n\r\n      <Form.Item label=\"Start Date\" name=\"startedDate\" rules={[{ required: true, message: 'Please select start date' }]}>\r\n        <DatePicker style={{ width: '100%' }} onChange={handleStartDateChange} />\r\n      </Form.Item>\r\n\r\n      <Form.Item label=\"End Date\" name=\"endedDate\" rules={[{ required: true, message: 'Please select end date' }]}>\r\n        <DatePicker style={{ width: '100%' }} onChange={handleEndDateChange} />\r\n      </Form.Item>\r\n         \r\n          <Row>\r\n            <Col md={12} span={24} className=\"hp-pr-sm-0 hp-pr-12\">\r\n              <Button\r\n                block\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n                // onClick={() => addProject()}\r\n              >\r\n                Add\r\n              </Button>\r\n            </Col>\r\n\r\n            <Col md={12} span={24} className=\"hp-mt-sm-12 hp-pl-sm-0 hp-pl-12\">\r\n              <Button block onClick={projectModalCancel}>\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </Modal>\r\n\r\n\r\n      <Modal\r\n      title=\"Update Project\"\r\n      width={416}\r\n      centered\r\n      visible={projectUpdate}\r\n      onCancel={projectUpdateModalCancel}\r\n      footer={null}\r\n      closeIcon={<RiCloseFill className=\"remix-icon text-color-black-100\" size={24} />}\r\n    >\r\n      <Form\r\n        form={updateForm}\r\n        layout=\"vertical\"\r\n        onFinish={handleUpdate} // Function to handle form submission\r\n      >\r\n        <Form.Item\r\n          label=\"Title\"\r\n          name=\"title\"\r\n          rules={[{ required: true, message: 'Please enter the project title' }]}\r\n        >\r\n          <Input placeholder=\"Enter Project title\" onChange={(e) => updateForm.setFieldsValue({ title: e.target.value })} />\r\n        </Form.Item>\r\n        \r\n        <Form.Item\r\n          label=\"Project Code\"\r\n          name=\"code\"\r\n          rules={[{ required: true, message: 'Please enter Project code' }]}\r\n        >\r\n          <Input placeholder=\"Enter Project code\" onChange={(e) => updateForm.setFieldsValue({ code: e.target.value })} />\r\n        </Form.Item>\r\n\r\n\r\n        <Form.Item>\r\n          <Button type=\"primary\" htmlType=\"submit\" block>\r\n            Update\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </Modal>\r\n\r\n      <Modal\r\n  title=\"Delete Project\"\r\n  width={416}\r\n  centered\r\n  visible={deleteModalVisible}\r\n  onCancel={deleteModalCancel}\r\n  footer={null}\r\n  closeIcon={\r\n    <RiCloseFill className=\"remix-icon text-color-black-100\" size={24} />\r\n  }\r\n>\r\n  <div>\r\n    <p>Are you sure you want to delete this?</p>\r\n  </div>\r\n  <Row>\r\n    <Col md={12} span={24} className=\"hp-pr-sm-0 hp-pr-12\">\r\n      <Button\r\n        block\r\n        type=\"primary\"\r\n        danger\r\n        onClick={() => handleDelete(record)}\r\n      >\r\n        Delete\r\n      </Button>\r\n    </Col>\r\n    <Col md={12} span={24} className=\"hp-mt-sm-12 hp-pl-sm-0 hp-pl-12\">\r\n      <Button block onClick={deleteModalCancel}>\r\n        Cancel\r\n      </Button>\r\n    </Col>\r\n  </Row>\r\n</Modal>\r\n\r\n      <Modal\r\n        title=\"Document Permissions\"\r\n        width={416}\r\n        centered\r\n        visible={permissionModalVisible}\r\n        onCancel={permissionModalCancel}\r\n        footer={null}\r\n        closeIcon={\r\n          <RiCloseFill className=\"remix-icon text-color-black-100\" size={24} />\r\n        }\r\n      >\r\n        <Form layout=\"vertical\" name=\"basic\">\r\n          <Form.Item label=\"Project Name\" name=\"projectId\">\r\n            <Select\r\n              options={projectOptions}\r\n              value={projectId}\r\n              onChange={(e) => setProjectId(e)}\r\n            />\r\n          </Form.Item>\r\n\r\n          <Row>\r\n            <Col md={12} span={24} className=\"hp-pr-sm-0 hp-pr-12\">\r\n              <Button\r\n                block\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n                onClick={() => addProject()}\r\n              >\r\n                Add\r\n              </Button>\r\n            </Col>\r\n            <Col md={12} span={24} className=\"hp-mt-sm-12 hp-pl-sm-0 hp-pl-12\">\r\n              <Button block onClick={projectModalCancel}>\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </Modal>\r\n\r\n<div style={{ textAlign: \"right\", marginBottom: \"16px\" }}>\r\n  {user?.user?.roleId == 1 && (\r\n    <Button type=\"primary\" onClick={projectModalShow}>\r\n      Add Project\r\n    </Button>\r\n  )}\r\n</div>\r\n\r\n      <Table\r\n      bordered\r\n      size=\"middle\"\r\n      title={() => 'All Project Details'}\r\n      footer={() => 'You may filter Projects'} \r\n        columns={columns} \r\n        dataSource={transformData(data)} \r\n        // onRow={(record) => ({\r\n        //   onClick: () => rowClickHandler(record),\r\n        // })}\r\n      />      \r\n      <ProtectedAppPage />\r\n    </>\r\n  );\r\n}\r\nconst transformData = (originalData) => {\r\n  const groupedData = {};\r\n\r\n  // Group data by title\r\n  originalData.forEach((item) => {\r\n    const title = item.title;\r\n\r\n    if (!groupedData[title]) {\r\n      groupedData[title] = { ...item, departmentNames: [item.departmentName + ','] };\r\n    } else {\r\n      groupedData[title].departmentNames.push(item.departmentName + ',');\r\n    }\r\n  });\r\n\r\n  // Convert the grouped data into an array and join department names with spaces\r\n  const transformedData = Object.values(groupedData).map((item) => ({\r\n    ...item,\r\n    departmentName: item.departmentNames.join(''), // Join without spaces\r\n  }));\r\n\r\n  return transformedData;\r\n};\r\n","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M16 9v10H8V9zm-1.5-6h-5l-1 1H5v2h14V4h-3.5zM18 7H6v12c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2z\"\n}), 'DeleteOutlined');"],"names":["ProtectedAppPage","_localStorage","isLogIn","localStorage","getItem","console","log","_jsx","Redirect","to","_ref","percentage","Row","justify","align","style","width","children","Progress","percent","size","createSvgIcon","d","Projects","_user$user12","searchText","setSearchText","useState","searchedColumn","setSearchedColumn","searchInput","useRef","progresses","setProgresses","selectedDepartments","setSelectedDepartments","departmentName","setDepartmentName","projectModalVisible","setProjectModalVisible","permissionModalVisible","setPermissionModalVisible","projName","setProjName","projCode","setProjCode","clientEmail","setClientEmail","startedDate","setStartDate","endedDate","setEndDate","departmentId","setDepartmentId","status","setStatus","code","setCode","user","setUser","JSON","parse","data","setData","dataArray","setDataArray","deleteModalVisible","setDeleteModalVisible","record","setRecord","api","contextHolder","notification","useNotification","projectForm","Form","useForm","departmentOptions","setDepartmentOptions","departmentInfo","setDepartmentInfo","projectOptions","setProjects","clients","setClients","clientName","setClientName","form","projectUpdate","setProjectUpdate","projectToUpdate","setProjectToUpdate","projectId","setProjectId","history","useHistory","updateForm","handleCreateMDR","push","deleteModalCancel","handleSearch","selectedKeys","confirm","dataIndex","getColumnSearchProps","filterDropdown","setSelectedKeys","clearFilters","close","_jsxs","padding","Input","ref","placeholder","concat","value","onChange","e","target","onPressEnter","marginBottom","display","Space","Button","type","onClick","icon","SearchOutlined","handleReset","filterIcon","filtered","color","undefined","onFilter","toString","toLowerCase","includes","onFilterDropdownOpenChange","visible","setTimeout","_searchInput$current","current","select","render","text","Highlighter","highlightStyle","backgroundColor","searchWords","autoEscape","textToHighlight","columns","Menu","Item","title","key","sorter","a","b","Date","split","reverse","join","filters","_","ProgressComp","toFixed","_user$user","_user$user2","_user$user3","Tooltip","Create","disabled","roleId","Edit","projectUpdateModalShow","DeleteOutlined","deleteModalShow","projectModalCancel","addProject","async","error","message","description","mappedDepartments","map","department","find","id","suffix","_user$user5","_user$user6","_user$user7","_user$user8","response","axios","departments","noOfUsers","clientId","companyId","authorId","authorName","firstName","lastName","headers","Authorization","accessToken","fetchData","success","_error$response","_user$user9","_user$user10","formattedData","project","formattedStartDate","toLocaleDateString","formattedEndDate","userId","filter","item","removed","options","label","setFieldsValue","projectUpdateModalCancel","useEffect","_localStorage2","_user$user4","uniqueTitlesSet","Set","optionName","reduce","acc","has","companyName","add","com","name","fetchClients","_user$user11","option","fetchDepartments","_Fragment","Modal","centered","onCancel","footer","closeIcon","RiCloseFill","className","layout","onFinish","handleSubmit","validateFields","then","values","resetFields","rules","required","Select","Checkbox","Group","DatePicker","date","Col","md","span","block","htmlType","getFieldValue","danger","handleDelete","permissionModalCancel","textAlign","projectModalShow","Table","bordered","dataSource","transformData","originalData","groupedData","forEach","departmentNames","Object"],"sourceRoot":""}