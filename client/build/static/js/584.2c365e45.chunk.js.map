{"version":3,"file":"static/js/584.2c365e45.chunk.js","mappings":"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","sources":["view/pages/Protected.jsx","view/pages/treeview/MyTreeView.jsx","view/pages/documents/index.jsx","view/storage.js"],"sourcesContent":["import { useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nconst ProtectedAppPage = () => {\r\n  const isLogIn = localStorage?.getItem(\"user\");\r\n  console.log(isLogIn, \"loggin\");\r\n  if (!isLogIn) {\r\n    return <Redirect to=\"/pages/authentication/login\" />;\r\n  }\r\n\r\n  return null;\r\n};\r\nexport default ProtectedAppPage;\r\n","// // import {useState,useEffect} from 'react';\r\n// // import TreeView from '@material-ui/lab/TreeView';\r\n// // import TreeItem from '@material-ui/lab/TreeItem';\r\n\r\n// // // const projects = [\r\n// // //   { id: 1, title: '2014-01-PM-REP-001', companyId: 1, departmentId: '1', projectId: '1' },\r\n// // //   { id: 2, title: '2014-01-PRO-REP-001', companyId: 1, departmentId: '2', projectId: '2' },\r\n// // //   { id: 3, title: '2014-01-PM-SOW-001', companyId: 1, departmentId: '3', projectId: '3' },\r\n// // //   { id: 4, title: '2014-01-PM-SP-002', companyId: 1, departmentId: '3', projectId: '3' },\r\n// // //   { id: 5, title: '2014-01-PRO-REP-004', companyId: 1, departmentId: '4', projectId: '4' },\r\n// // //   { id: 6, title: '2014-01-PRO-SOW-002', companyId: 1, departmentId: '4', projectId: '4' },\r\n// // //   { id: 7, title: '2014-01-PRO-SOW-001', companyId: 1, departmentId: '4', projectId: '4' },\r\n// // //   { id: 8, title: '2014-01-PRO-SP-003', companyId: 1, departmentId: '4', projectId: '4' },\r\n// // //   { id: 9, title: '2014-01-PIP-SOW-001', companyId: 1, departmentId: '5,6', projectId: '5' },\r\n// // //   { id: 10, title: '2014-01-PIP-SOW-002', companyId: 1, departmentId: '5,6', projectId: '5' },\r\n// // //   { id: 11, title: '2014-01-PM-SOW-001', companyId: 1, departmentId: '1', projectId: '1' },\r\n// // // ];\r\n\r\n// // // const data = [];\r\n\r\n// // // // Group projects by projectId\r\n// // // const groupedProjects = projects.reduce((acc, project) => {\r\n// // //   if (!acc[project.projectId]) {\r\n// // //     acc[project.projectId] = [];\r\n// // //   }\r\n// // //   acc[project.projectId].push(project.title);\r\n// // //   return acc;\r\n// // // }, {});\r\n\r\n// // // // Create parent nodes with children\r\n// // // for (const projectId in groupedProjects) {\r\n// // //   data.push({\r\n// // //     id: projectId,\r\n// // //     name: `Project ID: ${projectId}`,\r\n// // //     children: groupedProjects[projectId].map(title => ({ id: title, name: title })),\r\n// // //   });\r\n// // // }\r\n\r\n// // const projects = [\r\n// //   { id: 1, title: '2014-01-PM-REP-001', companyId: 1, departmentId: '1', projectId: '1' },\r\n// //   { id: 2, title: '2014-01-PRO-REP-001', companyId: 1, departmentId: '2', projectId: '2' },\r\n// //   { id: 3, title: '2014-01-PM-SOW-001', companyId: 1, departmentId: '3', projectId: '3' },\r\n// //   { id: 4, title: '2014-01-PM-SP-002', companyId: 1, departmentId: '3', projectId: '3' },\r\n// //   { id: 5, title: '2014-01-PRO-REP-004', companyId: 1, departmentId: '4', projectId: '4' },\r\n// //   { id: 6, title: '2014-01-PRO-SOW-002', companyId: 1, departmentId: '4', projectId: '4' },\r\n// //   { id: 7, title: '2014-01-PRO-SOW-001', companyId: 1, departmentId: '4', projectId: '4' },\r\n// //   { id: 8, title: '2014-01-PRO-SP-003', companyId: 1, departmentId: '4', projectId: '4' },\r\n// //   { id: 9, title: '2014-01-PIP-SOW-001', companyId: 1, departmentId: '5,6', projectId: '5' },\r\n// //   { id: 10, title: '2014-01-PIP-SOW-002', companyId: 1, departmentId: '5,6', projectId: '5' },\r\n// //   { id: 11, title: '2014-01-PM-SOW-001', companyId: 1, departmentId: '1', projectId: '1' },\r\n// // ];\r\n\r\n// // const data = [];\r\n\r\n// // // Group projects by projectId\r\n// // const groupedProjects = projects.reduce((acc, project) => {\r\n// //   if (!acc[project.projectId]) {\r\n// //     acc[project.projectId] = { children: [] };\r\n// //   }\r\n// //   const childNode = {\r\n// //     id: project.title,\r\n// //     name: project.title,\r\n// //     children: [{ id: `${project.title}-departmentId`, name: `Department ID: ${project.departmentId}` }],\r\n// //   };\r\n// //   acc[project.projectId].children.push(childNode);\r\n// //   return acc;\r\n// // }, {});\r\n\r\n// // // Create parent nodes with children\r\n// // for (const projectId in groupedProjects) {\r\n// //   const { children } = groupedProjects[projectId];\r\n// //   const projectNode = {\r\n// //     id: projectId,\r\n// //     name: `Project ID: ${projectId}`,\r\n// //     children: children,\r\n// //   };\r\n// //   data.push(projectNode);\r\n// // }\r\n\r\n\r\n// // // Function to render the tree nodes\r\n// // const renderTree = (nodes) => (\r\n// //   <TreeItem\r\n// //     key={nodes.id}\r\n// //     nodeId={nodes.id}\r\n// //     label={nodes.name}\r\n// //     onClick={() => console.log(`Node ${nodes.id} was clicked.`)}\r\n// //   >\r\n// //     {Array.isArray(nodes.children) ? nodes.children.map((node) => renderTree(node)) : null}\r\n// //   </TreeItem>\r\n// // );\r\n\r\n// // // Function component for the TreeView\r\n// // const MyTreeView = () => {\r\n// //   return <TreeView>{data.map((node) => renderTree(node))}</TreeView>;\r\n// // };\r\n\r\n// // export default MyTreeView;\r\n\r\n\r\n\r\n\r\n\r\n// // import React from 'react';\r\n// // import TreeView from '@material-ui/lab/TreeView';\r\n// // import TreeItem from '@material-ui/lab/TreeItem';\r\n// // import { makeStyles } from '@material-ui/core/styles';\r\n\r\n// // const useStyles = makeStyles({\r\n// //   root: {\r\n// //     height: 240,\r\n// //     flexGrow: 1,\r\n// //     maxWidth: 400,\r\n// //     overflowY: 'auto',\r\n// //   },\r\n// //   projectNode: {\r\n// //     color: 'blue',\r\n// //     fontWeight: 'bold',\r\n// //   },\r\n// //   titleNode: {\r\n// //     color: 'green',\r\n// //     fontStyle: 'italic',\r\n// //   },\r\n// //   departmentIdNode: {\r\n// //     color: 'red',\r\n// //   },\r\n// // });\r\n\r\n// // const projects = [\r\n// //   { id: 1, title: '2014-01-PM-REP-001', companyId: 1, departmentId: '1', projectId: '1', mdr:\"1\"},\r\n// //   { id: 2, title: '2014-01-PRO-REP-001', companyId: 1, departmentId: '2', projectId: '2', mdr:\"2\" },\r\n// //   { id: 3, title: '2014-01-PM-SOW-001', companyId: 1, departmentId: '3', projectId: '3', mdr:\"3\" },\r\n// //   { id: 4, title: '2014-01-PM-SP-002', companyId: 1, departmentId: '3', projectId: '3', mdr:\"3\" },\r\n// //   { id: 5, title: '2014-01-PRO-REP-004', companyId: 1, departmentId: '4', projectId: '4' , mdr:\"4\"},\r\n// //   { id: 5, title: '2014-01-PRO-REP-004', companyId: 1, departmentId: '4', projectId: '4', mdr:\"4\" },\r\n// //   { id: 6, title: '2014-01-PRO-SOW-002', companyId: 1, departmentId: '4', projectId: '4', mdr:\"4\" },\r\n// //   { id: 7, title: '2014-01-PRO-SOW-001', companyId: 1, departmentId: '4', projectId: '4', mdr:\"4\" },\r\n// //   { id: 8, title: '2014-01-PRO-SP-003', companyId: 1, departmentId: '4', projectId: '4', mdr:\"4\" },\r\n// //   { id: 9, title: '2014-01-PIP-SOW-001', companyId: 1, departmentId: '5,6', projectId: '5' , mdr:\"5\"},\r\n// //   { id: 10, title: '2014-01-PIP-SOW-002', companyId: 1, departmentId: '5,6', projectId: '5', mdr:\"5\" },\r\n// //   { id: 11, title: '2014-01-PM-SOW-001', companyId: 1, departmentId: '1', projectId: '1' , mdr:\"1\"},\r\n// // ];\r\n\r\n// // const data = [];\r\n\r\n// // // Group projects by projectId\r\n// // const groupedProjects = projects.reduce((acc, project) => {\r\n// //   if (!acc[project.projectId]) {\r\n// //     acc[project.projectId] = { children: [] };\r\n// //   }\r\n// //   const childNode = {\r\n// //     id: project.title,\r\n// //     name: project.title,\r\n// //     children: [{ id: `${project.title}-departmentId`, name: `Department ID: ${project.departmentId}` }],\r\n// //   };\r\n// //   acc[project.projectId].children.push(childNode);\r\n// //   return acc;\r\n// // }, {});\r\n\r\n// // // Create parent nodes with children\r\n// // for (const projectId in groupedProjects) {\r\n// //   const { children } = groupedProjects[projectId];\r\n// //   const projectNode = {\r\n// //     id: projectId,\r\n// //     name: `Project ID: ${projectId}`,\r\n// //     children: children,\r\n// //   };\r\n// //   data.push(projectNode);\r\n// // }\r\n\r\n// // const MyTreeView = () => {\r\n// //   const classes = useStyles();\r\n\r\n// //   const renderTree = (nodes) => {\r\n// //     if (!nodes.children) return null;\r\n\r\n// //     return (\r\n// //       <TreeItem\r\n// //         key={nodes.id}\r\n// //         nodeId={nodes.id}\r\n// //         label={nodes.name}\r\n// //         className={\r\n// //           nodes.id.startsWith('Project') ? classes.projectNode :\r\n// //           nodes.id.endsWith('departmentId') ? classes.departmentIdNode :\r\n// //           classes.titleNode\r\n// //         }\r\n// //         onClick={() => console.log(`Node ${nodes.id} was clicked.`)}\r\n// //       >\r\n// //         {nodes.children.map((node) => (\r\n// //           <TreeItem\r\n// //             key={node.id}\r\n// //             nodeId={node.id}\r\n// //             label={node.name}\r\n// //             className={classes.titleNode}\r\n// //             onClick={() => console.log(`Node ${node.id} was clicked.`)}\r\n// //           />\r\n// //         ))}\r\n// //       </TreeItem>\r\n// //     );\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div className={classes.root}>\r\n// //       <TreeView>\r\n// //         {data.map((node) => renderTree(node))}\r\n// //       </TreeView>\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default MyTreeView;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // import React from 'react';\r\n// // import TreeView from '@material-ui/lab/TreeView';\r\n// // import TreeItem from '@material-ui/lab/TreeItem';\r\n// // import { makeStyles } from '@material-ui/core/styles';\r\n\r\n// // const useStyles = makeStyles({\r\n// //   root: {\r\n// //     height: 240,\r\n// //     flexGrow: 1,\r\n// //     maxWidth: 400,\r\n// //     overflowY: 'auto',\r\n// //   },\r\n// //   projectNode: {\r\n// //     color: 'blue',\r\n// //     fontWeight: 'bold',\r\n// //   },\r\n// //   titleNode: {\r\n// //     color: 'green',\r\n// //     fontStyle: 'italic',\r\n// //   },\r\n// //   departmentIdNode: {\r\n// //     color: 'red',\r\n// //   },\r\n// // });\r\n\r\n// // const projects = [\r\n// //   { id: 1, title: '2014-01-PM-REP-001', companyId: 1, departmentId: '1', projectId: '1', mdr: \"1\" },\r\n// //   { id: 2, title: '2014-01-PRO-REP-001', companyId: 1, departmentId: '2', projectId: '2', mdr: \"2\" },\r\n// //   { id: 3, title: '2014-01-PM-SOW-001', companyId: 1, departmentId: '3', projectId: '3', mdr: \"3\" },\r\n// //   { id: 4, title: '2014-01-PM-SP-002', companyId: 1, departmentId: '3', projectId: '3', mdr: \"3\" },\r\n// //   { id: 5, title: '2014-01-PRO-REP-004', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n// //   { id: 6, title: '2014-01-PRO-SOW-002', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n// //   { id: 7, title: '2014-01-PRO-SOW-001', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n// //   { id: 8, title: '2014-01-PRO-SP-003', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n// //   { id: 9, title: '2014-01-PIP-SOW-001', companyId: 1, departmentId: '5,6', projectId: '5', mdr: \"5\" },\r\n// //   { id: 10, title: '2014-01-PIP-SOW-002', companyId: 1, departmentId: '5,6', projectId: '5', mdr: \"5\" },\r\n// //   { id: 11, title: '2014-01-PM-SOW-001', companyId: 1, departmentId: '1', projectId: '1', mdr: \"1\" },\r\n// // ];\r\n\r\n// // const data = [];\r\n\r\n// // // Group projects by projectId\r\n// // const groupedProjects = projects.reduce((acc, project) => {\r\n// //   if (!acc[project.projectId]) {\r\n// //     acc[project.projectId] = { children: [] };\r\n// //   }\r\n// //   const childNode = {\r\n// //     id: `${project.projectId}-mdr`,\r\n// //     name: `MDR: ${project.mdr}`,\r\n// //   };\r\n// //   acc[project.projectId].children.push(childNode);\r\n// //   return acc;\r\n// // }, {});\r\n\r\n// // // Create parent nodes with children\r\n// // for (const projectId in groupedProjects) {\r\n// //   const { children } = groupedProjects[projectId];\r\n// //   const projectNode = {\r\n// //     id: projectId,\r\n// //     name: `Project ID: ${projectId}`,\r\n// //     children: children,\r\n// //   };\r\n// //   data.push(projectNode);\r\n// // }\r\n\r\n// // const MyTreeView = () => {\r\n// //   const classes = useStyles();\r\n\r\n// //   const renderTree = (nodes) => {\r\n// //     if (!nodes.children) return null;\r\n\r\n// //     return (\r\n// //       <TreeItem\r\n// //         key={nodes.id}\r\n// //         nodeId={nodes.id}\r\n// //         label={nodes.name}\r\n// //         className={\r\n// //           nodes.id.startsWith('Project') ? classes.projectNode :\r\n// //           nodes.id.endsWith('departmentId') ? classes.departmentIdNode :\r\n// //           classes.titleNode\r\n// //         }\r\n// //         onClick={() => console.log(`Node ${nodes.id} was clicked.`)}\r\n// //       >\r\n// //         {nodes.children.map((node) => (\r\n// //           <TreeItem\r\n// //             key={node.id}\r\n// //             nodeId={node.id}\r\n// //             label={node.name}\r\n// //             className={classes.titleNode}\r\n// //             onClick={() => console.log(`Node ${node.id} was clicked.`)}\r\n// //           />\r\n// //         ))}\r\n// //       </TreeItem>\r\n// //     );\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div className={classes.root}>\r\n// //       <TreeView>\r\n// //         {data.map((node) => renderTree(node))}\r\n// //       </TreeView>\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default MyTreeView;\r\n\r\n\r\n\r\n\r\n// // import React from 'react';\r\n// // import TreeView from '@material-ui/lab/TreeView';\r\n// // import TreeItem from '@material-ui/lab/TreeItem';\r\n// // import { makeStyles } from '@material-ui/core/styles';\r\n\r\n// // const useStyles = makeStyles({\r\n// //   root: {\r\n// //     height: 240,\r\n// //     flexGrow: 1,\r\n// //     maxWidth: 400,\r\n// //     overflowY: 'auto',\r\n// //   },\r\n// //   projectNode: {\r\n// //     color: 'blue',\r\n// //     fontWeight: 'bold',\r\n// //   },\r\n// //   titleNode: {\r\n// //     color: 'green',\r\n// //     fontStyle: 'italic',\r\n// //   },\r\n// //   departmentIdNode: {\r\n// //     color: 'red',\r\n// //   },\r\n// // });\r\n\r\n// // const projects = [\r\n// //   { id: 1, title: '2014-01-PM-REP-001', companyId: 1, departmentId: '1', projectId: '1', mdr: \"1\" },\r\n// //   { id: 2, title: '2014-01-PRO-REP-001', companyId: 1, departmentId: '2', projectId: '2', mdr: \"2\" },\r\n// //   { id: 3, title: '2014-01-PM-SOW-001', companyId: 1, departmentId: '3', projectId: '3', mdr: \"3\" },\r\n// //   { id: 4, title: '2014-01-PM-SP-002', companyId: 1, departmentId: '3', projectId: '3', mdr: \"3\" },\r\n// //   { id: 5, title: '2014-01-PRO-REP-004', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n// //   { id: 6, title: '2014-01-PRO-SOW-002', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n// //   { id: 7, title: '2014-01-PRO-SOW-001', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n// //   { id: 8, title: '2014-01-PRO-SP-003', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n// //   { id: 9, title: '2014-01-PIP-SOW-001', companyId: 1, departmentId: '5,6', projectId: '5', mdr: \"5\" },\r\n// //   { id: 10, title: '2014-01-PIP-SOW-002', companyId: 1, departmentId: '5,6', projectId: '5', mdr: \"5\" },\r\n// //   { id: 11, title: '2014-01-PM-SOW-001', companyId: 1, departmentId: '1', projectId: '1', mdr: \"1\" },\r\n// // ];\r\n\r\n// // const data = {};\r\n\r\n// // // Group projects by projectId and unique mdr\r\n// // projects.forEach(project => {\r\n// //   if (!data[project.projectId]) {\r\n// //     data[project.projectId] = { projectTitle: project.title, mdr: project.mdr };\r\n// //   }\r\n// // });\r\n\r\n// // const MyTreeView = () => {\r\n// //   const classes = useStyles();\r\n\r\n// //   return (\r\n// //     <div className={classes.root}>\r\n// //       <TreeView>\r\n// //         {Object.entries(data).map(([projectId, project]) => (\r\n// //           <TreeItem\r\n// //             key={projectId}\r\n// //             nodeId={projectId}\r\n// //             label={`Project ID: ${projectId}`}\r\n// //             className={classes.projectNode}\r\n// //             onClick={() => console.log(`Project ${projectId} was clicked.`)}\r\n// //           >\r\n// //             <TreeItem\r\n// //               key={`${projectId}-mdr`}\r\n// //               nodeId={`${projectId}-mdr`}\r\n// //               label={`MDR: ${project.mdr}`}\r\n// //               className={classes.titleNode}\r\n// //               onClick={() => console.log(`MDR ${project.mdr} for project ${projectId} was clicked.`)}\r\n// //             />\r\n// //           </TreeItem>\r\n// //         ))}\r\n// //       </TreeView>\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default MyTreeView;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // import React from 'react';\r\n// // import TreeView from '@material-ui/lab/TreeView';\r\n// // import TreeItem from '@material-ui/lab/TreeItem';\r\n// // import { makeStyles } from '@material-ui/core/styles';\r\n\r\n// // const useStyles = makeStyles({\r\n// //   root: {\r\n// //     height: 240,\r\n// //     flexGrow: 1,\r\n// //     maxWidth: 400,\r\n// //     overflowY: 'auto',\r\n// //   },\r\n// //   projectNode: {\r\n// //     color: 'blue',\r\n// //     fontWeight: 'bold',\r\n// //   },\r\n// //   mdrNode: {\r\n// //     color: 'green',\r\n// //     fontStyle: 'italic',\r\n// //   },\r\n// //   departmentIdNode: {\r\n// //     color: 'red',\r\n// //   },\r\n// // });\r\n\r\n// // const projects = [\r\n// //   { id: 1, title: '2014-01-PM-REP-001', companyId: 1, departmentId: '1', projectId: '1', mdr: \"1\" },\r\n// //   { id: 2, title: '2014-01-PRO-REP-001', companyId: 1, departmentId: '2', projectId: '2', mdr: \"2\" },\r\n// //   { id: 3, title: '2014-01-PM-SOW-001', companyId: 1, departmentId: '3', projectId: '3', mdr: \"3\" },\r\n// //   { id: 4, title: '2014-01-PM-SP-002', companyId: 1, departmentId: '3', projectId: '3', mdr: \"3\" },\r\n// //   { id: 5, title: '2014-01-PRO-REP-004', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n// //   { id: 6, title: '2014-01-PRO-SOW-002', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n// //   { id: 7, title: '2014-01-PRO-SOW-001', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n// //   { id: 8, title: '2014-01-PRO-SP-003', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n// //   { id: 9, title: '2014-01-PIP-SOW-001', companyId: 1, departmentId: '5,6', projectId: '5', mdr: \"5\" },\r\n// //   { id: 10, title: '2014-01-PIP-SOW-002', companyId: 1, departmentId: '5,6', projectId: '5', mdr: \"5\" },\r\n// //   { id: 11, title: '2014-01-PM-SOW-001', companyId: 1, departmentId: '1', projectId: '1', mdr: \"1\" },\r\n// // ];\r\n\r\n// // const data = {};\r\n\r\n// // // Group projects by projectId and unique mdr\r\n// // projects.forEach(project => {\r\n// //   if (!data[project.projectId]) {\r\n// //     data[project.projectId] = {};\r\n// //   }\r\n// //   if (!data[project.projectId][project.mdr]) {\r\n// //     data[project.projectId][project.mdr] = [];\r\n// //   }\r\n// //   data[project.projectId][project.mdr].push(project.departmentId);\r\n// // });\r\n\r\n// // const MyTreeView = () => {\r\n// //   const classes = useStyles();\r\n\r\n// //   return (\r\n// //     <div className={classes.root}>\r\n// //       <TreeView>\r\n// //         {Object.entries(data).map(([projectId, mdrs]) => (\r\n// //           <TreeItem\r\n// //             key={projectId}\r\n// //             nodeId={projectId}\r\n// //             label={`Project ID: ${projectId}`}\r\n// //             className={classes.projectNode}\r\n// //             onClick={() => console.log(`Project ${projectId} was clicked.`)}\r\n// //           >\r\n// //             {Object.entries(mdrs).map(([mdr, departments]) => (\r\n// //               <TreeItem\r\n// //                 key={`${projectId}-${mdr}`}\r\n// //                 nodeId={`${projectId}-${mdr}`}\r\n// //                 label={`MDR: ${mdr}`}\r\n// //                 className={classes.mdrNode}\r\n// //                 onClick={() => console.log(`MDR ${mdr} for Project ${projectId} was clicked.`)}\r\n// //               >\r\n// //                 {departments.map((department, index) => (\r\n// //                   <TreeItem\r\n// //                     key={`${projectId}-${mdr}-${index}`}\r\n// //                     nodeId={`${projectId}-${mdr}-${index}`}\r\n// //                     label={`Department ID: ${department}`}\r\n// //                     className={classes.departmentIdNode}\r\n// //                     onClick={() => console.log(`Department ${department} for MDR ${mdr} in Project ${projectId} was clicked.`)}\r\n// //                   />\r\n// //                 ))}\r\n// //               </TreeItem>\r\n// //             ))}\r\n// //           </TreeItem>\r\n// //         ))}\r\n// //       </TreeView>\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default MyTreeView;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // import React from 'react';\r\n// // import TreeView from '@material-ui/lab/TreeView';\r\n// // import TreeItem from '@material-ui/lab/TreeItem';\r\n// // import { makeStyles } from '@material-ui/core/styles';\r\n\r\n// // const useStyles = makeStyles({\r\n// //   root: {\r\n// //     height: 240,\r\n// //     flexGrow: 1,\r\n// //     maxWidth: 400,\r\n// //     overflowY: 'auto',\r\n// //   },\r\n// //   projectNode: {\r\n// //     color: 'blue',\r\n// //     fontWeight: 'bold',\r\n// //   },\r\n// //   mdrNode: {\r\n// //     color: 'green',\r\n// //     fontStyle: 'italic',\r\n// //   },\r\n// //   departmentIdNode: {\r\n// //     color: 'red',\r\n// //   },\r\n// // });\r\n\r\n// // const projects = [\r\n// //   { id: 1, title: '2014-01-PM-REP-001', companyId: 1, departmentId: '1', projectId: '1', mdr: \"1\" },\r\n// //   { id: 2, title: '2014-01-PRO-REP-001', companyId: 1, departmentId: '2', projectId: '2', mdr: \"2\" },\r\n// //   { id: 3, title: '2014-01-PM-SOW-001', companyId: 1, departmentId: '3', projectId: '3', mdr: \"3\" },\r\n// //   { id: 4, title: '2014-01-PM-SP-002', companyId: 1, departmentId: '3', projectId: '3', mdr: \"3\" },\r\n// //   { id: 5, title: '2014-01-PRO-REP-004', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n// //   { id: 6, title: '2014-01-PRO-SOW-002', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n// //   { id: 7, title: '2014-01-PRO-SOW-001', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n// //   { id: 8, title: '2014-01-PRO-SP-003', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n// //   { id: 9, title: '2014-01-PIP-SOW-001', companyId: 1, departmentId: '5,6', projectId: '5', mdr: \"5\" },\r\n// //   { id: 10, title: '2014-01-PIP-SOW-002', companyId: 1, departmentId: '5,6', projectId: '5', mdr: \"5\" },\r\n// //   { id: 11, title: '2014-01-PM-SOW-001', companyId: 1, departmentId: '1', projectId: '1', mdr: \"1\" },\r\n// // ];\r\n\r\n// // const data = {};\r\n\r\n// // // Group projects by projectId and unique mdr\r\n// // projects.forEach(project => {\r\n// //   if (!data[project.projectId]) {\r\n// //     data[project.projectId] = {};\r\n// //   }\r\n// //   if (!data[project.projectId][project.mdr]) {\r\n// //     data[project.projectId][project.mdr] = [];\r\n// //   }\r\n// //   const departments = project.departmentId.split(',');\r\n// //   data[project.projectId][project.mdr].push(...departments);\r\n// // });\r\n\r\n// // const MyTreeView = () => {\r\n// //   const classes = useStyles();\r\n\r\n// //   return (\r\n// //     <div className={classes.root}>\r\n// //       <TreeView>\r\n// //         {Object.entries(data).map(([projectId, mdrs]) => (\r\n// //           <TreeItem\r\n// //             key={projectId}\r\n// //             nodeId={projectId}\r\n// //             label={`Project ID: ${projectId}`}\r\n// //             className={classes.projectNode}\r\n// //             onClick={() => console.log(`Project ${projectId} was clicked.`)}\r\n// //           >\r\n// //             {Object.entries(mdrs).map(([mdr, departments]) => (\r\n// //               <TreeItem\r\n// //                 key={`${projectId}-${mdr}`}\r\n// //                 nodeId={`${projectId}-${mdr}`}\r\n// //                 label={`MDR: ${mdr}`}\r\n// //                 className={classes.mdrNode}\r\n// //                 onClick={() => console.log(`MDR ${mdr} for Project ${projectId} was clicked.`)}\r\n// //               >\r\n// //                 {[...new Set(departments)].map((department, index) => (\r\n// //                   <TreeItem\r\n// //                     key={`${projectId}-${mdr}-${department}`}\r\n// //                     nodeId={`${projectId}-${mdr}-${department}`}\r\n// //                     label={`Department ID: ${department}`}\r\n// //                     className={classes.departmentIdNode}\r\n// //                     onClick={() => console.log(`Department ${department} for MDR ${mdr} in Project ${projectId} was clicked.`)}\r\n// //                   />\r\n// //                 ))}\r\n// //               </TreeItem>\r\n// //             ))}\r\n// //           </TreeItem>\r\n// //         ))}\r\n// //       </TreeView>\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default MyTreeView;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // import React from 'react';\r\n// // import TreeView from '@material-ui/lab/TreeView';\r\n// // import TreeItem from '@material-ui/lab/TreeItem';\r\n// // import { makeStyles } from '@material-ui/core/styles';\r\n\r\n// // const useStyles = makeStyles({\r\n// //   root: {\r\n// //     height: 240,\r\n// //     flexGrow: 1,\r\n// //     maxWidth: 400,\r\n// //     overflowY: 'auto',\r\n// //   },\r\n// //   projectNode: {\r\n// //     color: 'blue',\r\n// //     fontWeight: 'bold',\r\n// //   },\r\n// //   mdrNode: {\r\n// //     color: 'green',\r\n// //     fontStyle: 'italic',\r\n// //   },\r\n// //   departmentIdNode: {\r\n// //     color: 'red',\r\n// //   },\r\n// //   titleNode: {\r\n// //     color: 'black',\r\n// //   },\r\n// // });\r\n\r\n// // const projects = [\r\n// //   { id: 1, title: '2014-01-PM-REP-001', companyId: 1, departmentId: '1', projectId: '1', mdr: \"1\" },\r\n// //   { id: 2, title: '2014-01-PRO-REP-001', companyId: 1, departmentId: '2', projectId: '2', mdr: \"2\" },\r\n// //   { id: 3, title: '2014-01-PM-SOW-001', companyId: 1, departmentId: '3', projectId: '3', mdr: \"3\" },\r\n// //   { id: 4, title: '2014-01-PM-SP-002', companyId: 1, departmentId: '3', projectId: '3', mdr: \"3\" },\r\n// //   { id: 5, title: '2014-01-PRO-REP-004', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n// //   { id: 6, title: '2014-01-PRO-SOW-002', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n// //   { id: 7, title: '2014-01-PRO-SOW-001', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n// //   { id: 8, title: '2014-01-PRO-SP-003', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n// //   { id: 9, title: '2014-01-PIP-SOW-001', companyId: 1, departmentId: '5,6', projectId: '5', mdr: \"5\" },\r\n// //   { id: 10, title: '2014-01-PIP-SOW-002', companyId: 1, departmentId: '5,6', projectId: '5', mdr: \"5\" },\r\n// //   { id: 11, title: '2014-01-PM-SOW-001', companyId: 1, departmentId: '1', projectId: '1', mdr: \"1\" },\r\n// // ];\r\n\r\n// // const data = {};\r\n\r\n// // // Group projects by projectId, then by mdr, then by departmentId\r\n// // projects.forEach(project => {\r\n// //   if (!data[project.projectId]) {\r\n// //     data[project.projectId] = {};\r\n// //   }\r\n// //   if (!data[project.projectId][project.mdr]) {\r\n// //     data[project.projectId][project.mdr] = {};\r\n// //   }\r\n// //   const departmentIds = project.departmentId.split(',');\r\n// //   departmentIds.forEach(departmentId => {\r\n// //     if (!data[project.projectId][project.mdr][departmentId]) {\r\n// //       data[project.projectId][project.mdr][departmentId] = [];\r\n// //     }\r\n// //     data[project.projectId][project.mdr][departmentId].push(project.title);\r\n// //   });\r\n// // });\r\n\r\n// // const MyTreeView = () => {\r\n// //   const classes = useStyles();\r\n\r\n// //   return (\r\n// //     <div className={classes.root}>\r\n// //       <TreeView>\r\n// //         {Object.entries(data).map(([projectId, mdrs]) => (\r\n// //           <TreeItem\r\n// //             key={projectId}\r\n// //             nodeId={projectId}\r\n// //             label={`Project ID: ${projectId}`}\r\n// //             className={classes.projectNode}\r\n// //           >\r\n// //             {Object.entries(mdrs).map(([mdr, departments]) => (\r\n// //               <TreeItem\r\n// //                 key={`${projectId}-${mdr}`}\r\n// //                 nodeId={`${projectId}-${mdr}`}\r\n// //                 label={`MDR: ${mdr}`}\r\n// //                 className={classes.mdrNode}\r\n// //               >\r\n// //                 {Object.entries(departments).map(([departmentId, titles]) => (\r\n// //                   <TreeItem\r\n// //                     key={`${projectId}-${mdr}-${departmentId}`}\r\n// //                     nodeId={`${projectId}-${mdr}-${departmentId}`}\r\n// //                     label={`Department ID: ${departmentId}`}\r\n// //                     className={classes.departmentIdNode}\r\n// //                   >\r\n// //                     {titles.map((title, index) => (\r\n// //                       <TreeItem\r\n// //                         key={`${projectId}-${mdr}-${departmentId}-${index}`}\r\n// //                         nodeId={`${projectId}-${mdr}-${departmentId}-${index}`}\r\n// //                         label={`Title: ${title}`}\r\n// //                         className={classes.titleNode}\r\n// //                       />\r\n// //                     ))}\r\n// //                   </TreeItem>\r\n// //                 ))}\r\n// //               </TreeItem>\r\n// //             ))}\r\n// //           </TreeItem>\r\n// //         ))}\r\n// //       </TreeView>\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default MyTreeView;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // import React from 'react';\r\n// // import TreeView from '@material-ui/lab/TreeView';\r\n// // import TreeItem from '@material-ui/lab/TreeItem';\r\n// // import { makeStyles } from '@material-ui/core/styles';\r\n\r\n// // const useStyles = makeStyles({\r\n// //   root: {\r\n// //     flexGrow: 1,\r\n// //     maxWidth: 400,\r\n// //   },\r\n// //   projectNode: {\r\n// //     color: 'blue',\r\n// //     fontWeight: 'bold',\r\n// //   },\r\n// //   mdrNode: {\r\n// //     color: 'green',\r\n// //     fontStyle: 'italic',\r\n// //   },\r\n// //   departmentIdNode: {\r\n// //     color: 'red',\r\n// //   },\r\n// //   titleNode: {\r\n// //     color: 'black',\r\n// //   },\r\n// // });\r\n\r\n// // const projects = [\r\n// //   { id: 1, title: '2014-01-PM-REP-001', companyId: 1, departmentId: '1', projectId: '1', mdr: \"1\" },\r\n// //   { id: 2, title: '2014-01-PRO-REP-001', companyId: 1, departmentId: '2', projectId: '2', mdr: \"2\" },\r\n// //   { id: 3, title: '2014-01-PM-SOW-001', companyId: 1, departmentId: '3', projectId: '3', mdr: \"3\" },\r\n// //   { id: 4, title: '2014-01-PM-SP-002', companyId: 1, departmentId: '3', projectId: '3', mdr: \"3\" },\r\n// //   { id: 5, title: '2014-01-PRO-REP-004', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n// //   { id: 6, title: '2014-01-PRO-SOW-002', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n// //   { id: 7, title: '2014-01-PRO-SOW-001', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n// //   { id: 8, title: '2014-01-PRO-SP-003', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n// //   { id: 9, title: '2014-01-PIP-SOW-001', companyId: 1, departmentId: '5,6', projectId: '5', mdr: \"5\" },\r\n// //   { id: 10, title: '2014-01-PIP-SOW-002', companyId: 1, departmentId: '5,6', projectId: '5', mdr: \"5\" },\r\n// //   { id: 11, title: '2014-01-PM-SOW-001', companyId: 1, departmentId: '1', projectId: '1', mdr: \"1\" },\r\n// // ];\r\n\r\n// // const data = {};\r\n\r\n// // // Group projects by projectId, then by mdr, then by departmentId\r\n// // projects.forEach(project => {\r\n// //   if (!data[project.projectId]) {\r\n// //     data[project.projectId] = {};\r\n// //   }\r\n// //   if (!data[project.projectId][project.mdr]) {\r\n// //     data[project.projectId][project.mdr] = {};\r\n// //   }\r\n// //   const departmentIds = project.departmentId.split(',');\r\n// //   departmentIds.forEach(departmentId => {\r\n// //     if (!data[project.projectId][project.mdr][departmentId]) {\r\n// //       data[project.projectId][project.mdr][departmentId] = [];\r\n// //     }\r\n// //     data[project.projectId][project.mdr][departmentId].push(project.title);\r\n// //   });\r\n// // });\r\n\r\n// // const MyTreeView = () => {\r\n// //   const classes = useStyles();\r\n\r\n// //   return (\r\n// //     <div className={classes.root}>\r\n// //       <TreeView>\r\n// //         {Object.entries(data).map(([projectId, mdrs]) => (\r\n// //           <TreeItem\r\n// //             key={projectId}\r\n// //             nodeId={projectId}\r\n// //             label={`Project ID: ${projectId}`}\r\n// //             className={classes.projectNode}\r\n// //           >\r\n// //             {Object.entries(mdrs).map(([mdr, departments]) => (\r\n// //               <TreeItem\r\n// //                 key={`${projectId}-${mdr}`}\r\n// //                 nodeId={`${projectId}-${mdr}`}\r\n// //                 label={`MDR: ${mdr}`}\r\n// //                 className={classes.mdrNode}\r\n// //               >\r\n// //                 {Object.entries(departments).map(([departmentId, titles]) => (\r\n// //                   <TreeItem\r\n// //                     key={`${projectId}-${mdr}-${departmentId}`}\r\n// //                     nodeId={`${projectId}-${mdr}-${departmentId}`}\r\n// //                     label={`Department ID: ${departmentId}`}\r\n// //                     className={classes.departmentIdNode}\r\n// //                   >\r\n// //                     {titles.map((title, index) => (\r\n// //                       <TreeItem\r\n// //                         key={`${projectId}-${mdr}-${departmentId}-${index}`}\r\n// //                         nodeId={`${projectId}-${mdr}-${departmentId}-${index}`}\r\n// //                         label={`Title: ${title}`}\r\n// //                         className={classes.titleNode}\r\n// //                       />\r\n// //                     ))}\r\n// //                   </TreeItem>\r\n// //                 ))}\r\n// //               </TreeItem>\r\n// //             ))}\r\n// //           </TreeItem>\r\n// //         ))}\r\n// //       </TreeView>\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default MyTreeView;\r\n\r\n\r\n\r\n\r\n// // import React from 'react';\r\n// // import TreeView from '@material-ui/lab/TreeView';\r\n// // import TreeItem from '@material-ui/lab/TreeItem';\r\n// // import { makeStyles } from '@material-ui/core/styles';\r\n// // import DescriptionIcon from '@mui/icons-material/Description';\r\n// // import FolderIcon from '@mui/icons-material/Folder';\r\n// // import FolderSpecialIcon from '@mui/icons-material/FolderSpecial';\r\n// // import InsertDriveFileIcon from '@mui/icons-material/InsertDriveFile';\r\n\r\n// // const useStyles = makeStyles({\r\n// //   root: {\r\n// //     flexGrow: 1,\r\n// //     maxWidth: 400,\r\n// //   },\r\n// //   projectNode: {\r\n// //     color: 'blue',\r\n// //     fontWeight: 'bold',\r\n// //   },\r\n// //   mdrNode: {\r\n// //     color: 'green',\r\n// //     fontStyle: 'italic',\r\n// //   },\r\n// //   departmentIdNode: {\r\n// //     color: 'red',\r\n// //   },\r\n// //   titleNode: {\r\n// //     color: 'black',\r\n// //   },\r\n// // });\r\n\r\n// // const projects = [\r\n// //   { id: 1, title: '2014-01-PM-REP-001', companyId: 1, departmentId: '1', projectId: '1', mdr: \"1\" },\r\n// //   { id: 2, title: '2014-01-PRO-REP-001', companyId: 1, departmentId: '2', projectId: '2', mdr: \"2\" },\r\n// //   { id: 3, title: '2014-01-PM-SOW-001', companyId: 1, departmentId: '3', projectId: '3', mdr: \"3\" },\r\n// //   { id: 4, title: '2014-01-PM-SP-002', companyId: 1, departmentId: '3', projectId: '3', mdr: \"3\" },\r\n// //   { id: 5, title: '2014-01-PRO-REP-004', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n// //   { id: 6, title: '2014-01-PRO-SOW-002', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n// //   { id: 7, title: '2014-01-PRO-SOW-001', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n// //   { id: 8, title: '2014-01-PRO-SP-003', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n// //   { id: 9, title: '2014-01-PIP-SOW-001', companyId: 1, departmentId: '5,6', projectId: '5', mdr: \"5\" },\r\n// //   { id: 10, title: '2014-01-PIP-SOW-002', companyId: 1, departmentId: '5,6', projectId: '5', mdr: \"5\" },\r\n// //   { id: 11, title: '2014-01-PM-SOW-001', companyId: 1, departmentId: '1', projectId: '1', mdr: \"1\" },\r\n// // ];\r\n\r\n// // const data = {};\r\n\r\n// // projects.forEach(project => {\r\n// //   if (!data[project.projectId]) {\r\n// //     data[project.projectId] = {};\r\n// //   }\r\n// //   if (!data[project.projectId][project.mdr]) {\r\n// //     data[project.projectId][project.mdr] = {};\r\n// //   }\r\n// //   const departmentIds = project.departmentId.split(',');\r\n// //   departmentIds.forEach(departmentId => {\r\n// //     if (!data[project.projectId][project.mdr][departmentId]) {\r\n// //       data[project.projectId][project.mdr][departmentId] = [];\r\n// //     }\r\n// //     data[project.projectId][project.mdr][departmentId].push(project.title);\r\n// //   });\r\n// // });\r\n\r\n// // const MyTreeView = () => {\r\n// //   const classes = useStyles();\r\n\r\n// //   return (\r\n// //     <div className={classes.root}>\r\n// //       <TreeView>\r\n// //         {Object.entries(data).map(([projectId, mdrs]) => (\r\n// //           <TreeItem\r\n// //             key={projectId}\r\n// //             nodeId={projectId}\r\n// //             label={`Project ID: ${projectId}`}\r\n// //             className={classes.projectNode}\r\n// //             icon={<FolderIcon />}\r\n// //           >\r\n// //             {Object.entries(mdrs).map(([mdr, departments]) => (\r\n// //               <TreeItem\r\n// //                 key={`${projectId}-${mdr}`}\r\n// //                 nodeId={`${projectId}-${mdr}`}\r\n// //                 label={`MDR: ${mdr}`}\r\n// //                 className={classes.mdrNode}\r\n// //                 icon={<FolderSpecialIcon />}\r\n// //               >\r\n// //                 {Object.entries(departments).map(([departmentId, titles]) => (\r\n// //                   <TreeItem\r\n// //                     key={`${projectId}-${mdr}-${departmentId}`}\r\n// //                     nodeId={`${projectId}-${mdr}-${departmentId}`}\r\n// //                     label={`Department ID: ${departmentId}`}\r\n// //                     className={classes.departmentIdNode}\r\n// //                     icon={<FolderIcon />}\r\n// //                   >\r\n// //                     {titles.map((title, index) => (\r\n// //                       <TreeItem\r\n// //                         key={`${projectId}-${mdr}-${departmentId}-${index}`}\r\n// //                         nodeId={`${projectId}-${mdr}-${departmentId}-${index}`}\r\n// //                         label={`Title: ${title}`}\r\n// //                         className={classes.titleNode}\r\n// //                         icon={<DescriptionIcon />}\r\n// //                       />\r\n// //                     ))}\r\n// //                   </TreeItem>\r\n// //                 ))}\r\n// //               </TreeItem>\r\n// //             ))}\r\n// //           </TreeItem>\r\n// //         ))}\r\n// //       </TreeView>\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default MyTreeView;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // import React from 'react';\r\n// // import TreeView from '@material-ui/lab/TreeView';\r\n// // import TreeItem from '@material-ui/lab/TreeItem';\r\n// // import { makeStyles } from '@material-ui/core/styles';\r\n// // import DescriptionIcon from '@mui/icons-material/Description';\r\n// // import FolderIcon from '@mui/icons-material/Folder';\r\n// // import FolderSpecialIcon from '@mui/icons-material/FolderSpecial';\r\n// // import InsertDriveFileIcon from '@mui/icons-material/InsertDriveFile';\r\n// // import Button from '@mui/material/Button';\r\n\r\n// // const useStyles = makeStyles({\r\n// //   root: {\r\n// //     flexGrow: 1,\r\n// //     maxWidth: 1000,\r\n// //   },\r\n// //   projectNode: {\r\n// //     color: 'blue',\r\n// //     fontWeight: 'bold',\r\n// //   },\r\n// //   mdrNode: {\r\n// //     color: 'green',\r\n// //     fontStyle: 'italic',\r\n// //   },\r\n// //   departmentIdNode: {\r\n// //     color: 'red',\r\n// //   },\r\n// //   titleNode: {\r\n// //     color: 'black',\r\n// //   },\r\n// // });\r\n\r\n// // const projects = [\r\n// //   { id: 1, title: '2014-01-PM-REP-001', companyId: 1, departmentId: '1', projectId: '1', mdr: \"1\" },\r\n// //   { id: 2, title: '2014-01-PRO-REP-001', companyId: 1, departmentId: '2', projectId: '2', mdr: \"2\" },\r\n// //   { id: 3, title: '2014-01-PM-SOW-001', companyId: 1, departmentId: '3', projectId: '3', mdr: \"3\" },\r\n// //   { id: 4, title: '2014-01-PM-SP-002', companyId: 1, departmentId: '3', projectId: '3', mdr: \"3\" },\r\n// //   { id: 5, title: '2014-01-PRO-REP-004', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n// //   { id: 6, title: '2014-01-PRO-SOW-002', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n// //   { id: 7, title: '2014-01-PRO-SOW-001', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n// //   { id: 8, title: '2014-01-PRO-SP-003', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n// //   { id: 9, title: '2014-01-PIP-SOW-001', companyId: 1, departmentId: '5,6', projectId: '5', mdr: \"5\" },\r\n// //   { id: 10, title: '2014-01-PIP-SOW-002', companyId: 1, departmentId: '5,6', projectId: '5', mdr: \"5\" },\r\n// //   { id: 11, title: '2014-01-PM-SOW-001', companyId: 1, departmentId: '1', projectId: '1', mdr: \"1\" },\r\n// // ];\r\n\r\n// // const data = {};\r\n\r\n// // projects.forEach(project => {\r\n// //   if (!data[project.projectId]) {\r\n// //     data[project.projectId] = {};\r\n// //   }\r\n// //   if (!data[project.projectId][project.mdr]) {\r\n// //     data[project.projectId][project.mdr] = {};\r\n// //   }\r\n// //   const departmentIds = project.departmentId.split(',');\r\n// //   departmentIds.forEach(departmentId => {\r\n// //     if (!data[project.projectId][project.mdr][departmentId]) {\r\n// //       data[project.projectId][project.mdr][departmentId] = [];\r\n// //     }\r\n// //     data[project.projectId][project.mdr][departmentId].push(project.title);\r\n// //   });\r\n// // });\r\n\r\n// // const MyTreeView = () => {\r\n// //   const classes = useStyles();\r\n\r\n// //   const handleOpenDocument = (title) => {\r\n// //     // Handle open document logic here\r\n// //     console.log(`Opening document: ${title}`);\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div className={classes.root}>\r\n// //       <TreeView>\r\n// //         {Object.entries(data).map(([projectId, mdrs]) => (\r\n// //           <TreeItem\r\n// //             key={projectId}\r\n// //             nodeId={projectId}\r\n// //             label={`Project ID: ${projectId}`}\r\n// //             className={classes.projectNode}\r\n// //             icon={<FolderIcon />}\r\n// //           >\r\n// //             {Object.entries(mdrs).map(([mdr, departments]) => (\r\n// //               <TreeItem\r\n// //                 key={`${projectId}-${mdr}`}\r\n// //                 nodeId={`${projectId}-${mdr}`}\r\n// //                 label={`MDR: ${mdr}`}\r\n// //                 className={classes.mdrNode}\r\n// //                 icon={<FolderSpecialIcon />}\r\n// //               >\r\n// //                 {Object.entries(departments).map(([departmentId, titles]) => (\r\n// //                   <TreeItem\r\n// //                     key={`${projectId}-${mdr}-${departmentId}`}\r\n// //                     nodeId={`${projectId}-${mdr}-${departmentId}`}\r\n// //                     label={`Department ID: ${departmentId}`}\r\n// //                     className={classes.departmentIdNode}\r\n// //                     icon={<FolderIcon />}\r\n// //                   >\r\n// //                     {titles.map((title, titleIndex) => (\r\n// //                       <TreeItem\r\n// //                         key={`${projectId}-${mdr}-${departmentId}-${titleIndex}`}\r\n// //                         nodeId={`${projectId}-${mdr}-${departmentId}-${titleIndex}`}\r\n// //                         label={`Title: ${title}`}\r\n// //                         className={classes.titleNode}\r\n// //                         icon={<DescriptionIcon />}\r\n// //                       >\r\n// //                         <div>\r\n// //                           <span>Status: Ongoing</span>\r\n// //                           <Button onClick={() => handleOpenDocument(title)} variant=\"outlined\" color=\"primary\">Open Document</Button>\r\n// //                         </div>\r\n// //                       </TreeItem>\r\n// //                     ))}\r\n// //                   </TreeItem>\r\n// //                 ))}\r\n// //               </TreeItem>\r\n// //             ))}\r\n// //           </TreeItem>\r\n// //         ))}\r\n// //       </TreeView>\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default MyTreeView;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // import React from 'react';\r\n// // import TreeView from '@material-ui/lab/TreeView';\r\n// // import TreeItem from '@material-ui/lab/TreeItem';\r\n// // import { makeStyles } from '@material-ui/core/styles';\r\n// // import DescriptionIcon from '@mui/icons-material/Description';\r\n// // import FolderIcon from '@mui/icons-material/Folder';\r\n// // import FolderSpecialIcon from '@mui/icons-material/FolderSpecial';\r\n// // import InsertDriveFileIcon from '@mui/icons-material/InsertDriveFile';\r\n// // import Button from '@mui/material/Button';\r\n\r\n// // const useStyles = makeStyles({\r\n// //   root: {\r\n// //     flexGrow: 1,\r\n// //     maxWidth: 400,\r\n// //   },\r\n// //   projectNode: {\r\n// //     backgroundColor: '#f0f0f0',\r\n// //     fontSize: '18px',\r\n// //     padding: '8px',\r\n// //     borderRadius: '4px',\r\n// //     marginBottom: '8px',\r\n// //     transition: 'background-color 0.3s ease',\r\n// //     '&:hover': {\r\n// //       backgroundColor: '#e0e0e0',\r\n// //     },\r\n// //   },\r\n// //   mdrNode: {\r\n// //     backgroundColor: '#e8f5e9',\r\n// //     fontSize: '16px',\r\n// //     padding: '6px',\r\n// //     borderRadius: '4px',\r\n// //     marginLeft: '16px',\r\n// //     marginBottom: '6px',\r\n// //     transition: 'background-color 0.3s ease',\r\n// //     '&:hover': {\r\n// //       backgroundColor: '#c8e6c9',\r\n// //     },\r\n// //   },\r\n// //   departmentIdNode: {\r\n// //     backgroundColor: '#e3f2fd',\r\n// //     fontSize: '14px',\r\n// //     padding: '4px',\r\n// //     borderRadius: '4px',\r\n// //     marginLeft: '16px',\r\n// //     marginBottom: '4px',\r\n// //     transition: 'background-color 0.3s ease',\r\n// //     '&:hover': {\r\n// //       backgroundColor: '#bbdefb',\r\n// //     },\r\n// //   },\r\n// //   titleNode: {\r\n// //     backgroundColor: '#fff9c4',\r\n// //     fontSize: '12px',\r\n// //     padding: '2px',\r\n// //     borderRadius: '4px',\r\n// //     marginLeft: '16px',\r\n// //     transition: 'background-color 0.3s ease',\r\n// //     '&:hover': {\r\n// //       backgroundColor: '#ffee58',\r\n// //     },\r\n// //   },\r\n// //   icon: {\r\n// //     marginRight: '8px',\r\n// //   },\r\n// // });\r\n\r\n// // const projects = [\r\n// //   { id: 1, title: '2014-01-PM-REP-001', companyId: 1, departmentId: '1', projectId: '1', mdr: \"1\" },\r\n// //   { id: 2, title: '2014-01-PRO-REP-001', companyId: 1, departmentId: '2', projectId: '2', mdr: \"2\" },\r\n// //   { id: 3, title: '2014-01-PM-SOW-001', companyId: 1, departmentId: '3', projectId: '3', mdr: \"3\" },\r\n// //   { id: 4, title: '2014-01-PM-SP-002', companyId: 1, departmentId: '3', projectId: '3', mdr: \"3\" },\r\n// //   { id: 5, title: '2014-01-PRO-REP-004', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n// //   { id: 6, title: '2014-01-PRO-SOW-002', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n// //   { id: 7, title: '2014-01-PRO-SOW-001', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n// //   { id: 8, title: '2014-01-PRO-SP-003', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n// //   { id: 9, title: '2014-01-PIP-SOW-001', companyId: 1, departmentId: '5,6', projectId: '5', mdr: \"5\" },\r\n// //   { id: 10, title: '2014-01-PIP-SOW-002', companyId: 1, departmentId: '5,6', projectId: '5', mdr: \"5\" },\r\n// //   { id: 11, title: '2014-01-PM-SOW-001', companyId: 1, departmentId: '1', projectId: '1', mdr: \"1\" },\r\n// // ];\r\n\r\n// // const data = {};\r\n\r\n// // projects.forEach(project => {\r\n// //   if (!data[project.projectId]) {\r\n// //     data[project.projectId] = {};\r\n// //   }\r\n// //   if (!data[project.projectId][project.mdr]) {\r\n// //     data[project.projectId][project.mdr] = {};\r\n// //   }\r\n// //   const departmentIds = project.departmentId.split(',');\r\n// //   departmentIds.forEach(departmentId => {\r\n// //     if (!data[project.projectId][project.mdr][departmentId]) {\r\n// //       data[project.projectId][project.mdr][departmentId] = [];\r\n// //     }\r\n// //     data[project.projectId][project.mdr][departmentId].push(project.title);\r\n// //   });\r\n// // });\r\n\r\n// // const MyTreeView = () => {\r\n// //   const classes = useStyles();\r\n\r\n// //   const handleOpenDocument = (title) => {\r\n// //     // Handle open document logic here\r\n// //     console.log(`Opening document: ${title}`);\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div className={classes.root}>\r\n// //       <TreeView>\r\n// //         {Object.entries(data).map(([projectId, mdrs]) => (\r\n// //           <TreeItem\r\n// //             key={projectId}\r\n// //             nodeId={projectId}\r\n// //             label={`Project ID: ${projectId}`}\r\n// //             className={classes.projectNode}\r\n// //             icon={<FolderIcon className={classes.icon} />}\r\n// //           >\r\n// //             {Object.entries(mdrs).map(([mdr, departments]) => (\r\n// //               <TreeItem\r\n// //                 key={`${projectId}-${mdr}`}\r\n// //                 nodeId={`${projectId}-${mdr}`}\r\n// //                 label={`MDR: ${mdr}`}\r\n// //                 className={classes.mdrNode}\r\n// //                 icon={<FolderSpecialIcon className={classes.icon} />}\r\n// //               >\r\n// //                 {Object.entries(departments).map(([departmentId, titles]) => (\r\n// //                   <TreeItem\r\n// //                     key={`${projectId}-${mdr}-${departmentId}`}\r\n// //                     nodeId={`${projectId}-${mdr}-${departmentId}`}\r\n// //                     label={`Department ID: ${departmentId}`}\r\n// //                     className={classes.departmentIdNode}\r\n// //                     icon={<FolderIcon className={classes.icon} />}\r\n// //                   >\r\n// //                     {titles.map((title, titleIndex) => (\r\n// //                       <TreeItem\r\n// //                         key={`${projectId}-${mdr}-${departmentId}-${titleIndex}`}\r\n// //                         nodeId={`${projectId}-${mdr}-${departmentId}-${titleIndex}`}\r\n// //                         label={`Title: ${title}`}\r\n// //                         className={classes.titleNode}\r\n// //                         icon={<DescriptionIcon className={classes.icon} />}\r\n// //                       >\r\n// //                         <div>\r\n// //                           <span>Status: Ongoing</span>\r\n// //                           <Button onClick={() => handleOpenDocument(title)} variant=\"outlined\" color=\"primary\">Open Document</Button>\r\n// //                         </div>\r\n// //                       </TreeItem>\r\n// //                     ))}\r\n// //                   </TreeItem>\r\n// //                 ))}\r\n// //               </TreeItem>\r\n// //             ))}\r\n// //           </TreeItem>\r\n// //         ))}\r\n// //       </TreeView>\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default MyTreeView;\r\n\r\n\r\n\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport TreeView from '@material-ui/lab/TreeView';\r\nimport TreeItem from '@material-ui/lab/TreeItem';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DescriptionIcon from '@mui/icons-material/Description';\r\nimport FolderIcon from '@mui/icons-material/Folder';\r\nimport FolderSpecialIcon from '@mui/icons-material/FolderSpecial';\r\nimport FolderOpenIcon from '@mui/icons-material/Folder';\r\nimport InsertDriveFileIcon from '@mui/icons-material/InsertDriveFile';\r\nimport Button from '@mui/material/Button';\r\nimport axios from 'axios';\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    flexGrow: 5,\r\n    maxWidth: 1000,\r\n  },\r\n  projectNode: {\r\n    backgroundColor: '#f0f0f0',\r\n    fontSize: '24px',\r\n    padding: '12px',\r\n    borderRadius: '4px',\r\n    marginBottom: '12px',\r\n    transition: 'background-color 0.3s ease',\r\n    '&:hover': {\r\n      backgroundColor: '#f0f0f0',\r\n    },\r\n  },\r\n  mdrNode: {\r\n    backgroundColor: '#f0f0f0',\r\n    fontSize: '18px',\r\n    padding: '12px',\r\n    borderRadius: '4px',\r\n    marginLeft: '16px',\r\n    marginBottom: '12px',\r\n    transition: 'background-color 0.3s ease',\r\n    '&:hover': {\r\n      backgroundColor: '#f0f0f0',\r\n    },\r\n  },\r\n  departmentIdNode: {\r\n    backgroundColor: '#f0f0f0',\r\n    fontSize: '16px',\r\n    padding: '12px',\r\n    borderRadius: '4px',\r\n    marginLeft: '16px',\r\n    marginBottom: '12px',\r\n    transition: 'background-color 0.3s ease',\r\n    '&:hover': {\r\n      backgroundColor: '#f0f0f0',\r\n    },\r\n  },\r\n  titleNode: {\r\n    backgroundColor: '#f0f0f0',\r\n    fontSize: '12px',\r\n    padding: '8px',\r\n    borderRadius: '4px',\r\n    marginLeft: '16px',\r\n    transition: 'background-color 0.3s ease',\r\n    '&:hover': {\r\n      backgroundColor: '#f0f0f0',\r\n    },\r\n  },\r\n  icon: {\r\n    marginRight: '8px',\r\n  },\r\n  buttonContainer: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    marginTop: '8px',\r\n    padding: '12px',\r\n  },\r\n  status: {\r\n    marginRight: '12px',\r\n    fontSize: '20px',\r\n    fontWeight: 'bold',\r\n  },\r\n});\r\n\r\n\r\nconst projects = [\r\n  { id: 1, title: '2014-01-PM-REP-001', companyId: 1, departmentId: '1', projectId: '1', mdr: \"1\" },\r\n  { id: 2, title: '2014-01-PRO-REP-001', companyId: 1, departmentId: '2', projectId: '2', mdr: \"2\" },\r\n  { id: 3, title: '2014-01-PM-SOW-001', companyId: 1, departmentId: '3', projectId: '3', mdr: \"3\" },\r\n  { id: 4, title: '2014-01-PM-SP-002', companyId: 1, departmentId: '3', projectId: '3', mdr: \"3\" },\r\n  { id: 5, title: '2014-01-PRO-REP-004', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n  { id: 6, title: '2014-01-PRO-SOW-002', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n  { id: 7, title: '2014-01-PRO-SOW-001', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n  { id: 8, title: '2014-01-PRO-SP-003', companyId: 1, departmentId: '4', projectId: '4', mdr: \"4\" },\r\n  { id: 9, title: '2014-01-PIP-SOW-001', companyId: 1, departmentId: '5,6', projectId: '5', mdr: \"5\" },\r\n  { id: 10, title: '2014-01-PIP-SOW-002', companyId: 1, departmentId: '5,6', projectId: '5', mdr: \"5\" },\r\n  { id: 11, title: '2014-01-PM-SOW-001', companyId: 1, departmentId: '1,6', projectId: '6', mdr: \"6\" },\r\n  { id: 12, title: '2014-01-PM-REP-001', companyId: 1, departmentId: '1,2', projectId: '6', mdr: \"6\" },\r\n  { id: 13, title: '2014-01-PRO-REP-001', companyId: 1, departmentId: '2,3', projectId: '2', mdr: \"2\" },\r\n  { id: 14, title: '2014-01-PM-SOW-001', companyId: 1, departmentId: '5,6', projectId: '2', mdr: \"2\" },\r\n  { id: 15, title: '2014-01-PM-SP-002', companyId: 1, departmentId: '5', projectId: '5', mdr: \"5\" },\r\n  { id: 16, title: '2014-01-PRO-REP-004', companyId: 1, departmentId: '8,9', projectId: '6', mdr: \"46\" },\r\n  { id: 17, title: '2014-01-PRO-SOW-002', companyId: 1, departmentId: '9', projectId: '7', mdr: \"7\" },\r\n  { id: 18, title: '2014-01-PRO-SOW-001', companyId: 1, departmentId: '8', projectId: '7', mdr: \"7\" },\r\n  { id: 19, title: '2014-01-PRO-SP-003', companyId: 1, departmentId: '7,8', projectId: '7', mdr: \"7\" },\r\n  { id: 20, title: '2014-01-PIP-SOW-001', companyId: 1, departmentId: '5,6', projectId: '8', mdr: \"8\" },\r\n  { id: 21, title: '2014-01-PIP-SOW-002', companyId: 1, departmentId: '5,6', projectId: '8', mdr: \"8\" },\r\n  { id: 22, title: '2014-01-PM-SOW-001', companyId: 1, departmentId: '7', projectId: '9', mdr: \"9\" },  \r\n];\r\n\r\nconst data = {};\r\n\r\nprojects.forEach(project => {\r\n  if (!data[project.projectId]) {\r\n    data[project.projectId] = {};\r\n  }\r\n  if (!data[project.projectId][project.mdr]) {\r\n    data[project.projectId][project.mdr] = {};\r\n  }\r\n  const departmentIds = project.departmentId.split(',');\r\n  departmentIds.forEach(departmentId => {\r\n    if (!data[project.projectId][project.mdr][departmentId]) {\r\n      data[project.projectId][project.mdr][departmentId] = [];\r\n    }\r\n    data[project.projectId][project.mdr][departmentId].push(project.title);\r\n  });\r\n});\r\n\r\nconst MyTreeView = () => {\r\n\r\n  const [information,setInformation]=useState()\r\n  const [user, setUser] = useState(JSON.parse(localStorage?.getItem(\"user\")));\r\n\r\n//   console.log(\"user\",user)\r\n  // const fetchInformation = async () => {\r\n  //   try {\r\n  //     const response = await axios.get(\r\n  //       `http://54.81.250.98:8083/api/projects/information?companyId=${user?.user?.companyId}`,\r\n  //       {\r\n  //         headers: {\r\n  //           Authorization: user?.accessToken,\r\n  //         },\r\n  //       }\r\n  //     )\r\n        \r\n  //     console.log('Information response data',response.data);\r\n  //     setInformation(response.data); // Assuming the response.data is an array of projects\r\n  //   } catch (error) {\r\n  //     console.error(\"Error fetching projects:\", error?.message);\r\n  //   }\r\n  \r\n  useEffect(()=>{\r\n    // fetchInformation()\r\n  },[])\r\n  const classes = useStyles();\r\n\r\n  const handleOpenDocument = (title) => {\r\n    // Handle open document logic here\r\n    console.log(`Opening document: ${title}`);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <TreeView\r\n        defaultCollapseIcon={<FolderIcon />}\r\n        defaultExpandIcon={<FolderOpenIcon />}\r\n        defaultEndIcon={<DescriptionIcon />}\r\n      >\r\n        {Object.entries(data).map(([projectId, mdrs]) => (\r\n          <TreeItem\r\n            key={projectId}\r\n            nodeId={projectId}\r\n            label={`Project ID: ${projectId}`}\r\n            className={classes.projectNode}\r\n            icon={<FolderIcon className={classes.icon} />}\r\n            sx={{ display: 'inline-flex' }} // Display child nodes inline\r\n          >\r\n            {Object.entries(mdrs).map(([mdr, departments]) => (\r\n              <TreeItem\r\n                key={`${projectId}-${mdr}`}\r\n                nodeId={`${projectId}-${mdr}`}\r\n                label={`MDR: ${mdr}`}\r\n                className={classes.mdrNode}\r\n                icon={<FolderSpecialIcon className={classes.icon} />}\r\n                sx={{ display: 'inline-flex' }} // Display child nodes inline\r\n              >\r\n                {Object.entries(departments).map(([departmentId, titles]) => (\r\n                  <TreeItem\r\n                    key={`${projectId}-${mdr}-${departmentId}`}\r\n                    nodeId={`${projectId}-${mdr}-${departmentId}`}\r\n                    label={`Department ID: ${departmentId}`}\r\n                    className={classes.departmentIdNode}\r\n                    icon={<FolderIcon className={classes.icon} />}\r\n                    sx={{ display: 'inline-flex' }} // Display child nodes inline\r\n                  >\r\n                    {titles.map((title, titleIndex) => (\r\n                      <TreeItem\r\n                        key={`${projectId}-${mdr}-${departmentId}-${titleIndex}`}\r\n                        nodeId={`${projectId}-${mdr}-${departmentId}-${titleIndex}`}\r\n                        label={`Title: ${title}`}\r\n                        className={classes.titleNode}\r\n                        icon={<DescriptionIcon className={classes.icon} />}\r\n                        sx={{ display: 'inline-flex' }} \r\n                      >\r\n                        <div className={classes.buttonContainer}>\r\n                          <span className={classes.status}>Status: Ongoing</span>\r\n                          <Button onClick={() => handleOpenDocument(title)} variant=\"outlined\" color=\"primary\">Open Document</Button>\r\n                        </div>\r\n                      </TreeItem>\r\n                    ))}\r\n                  </TreeItem>\r\n                ))}\r\n              </TreeItem>\r\n            ))}\r\n          </TreeItem>\r\n        ))}\r\n      </TreeView>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MyTreeView;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { saveData, loadData, getAllKeys } from '../../storage';\r\nimport { useHistory } from 'react-router-dom'; \r\nimport MyTreeView from \"../treeview/MyTreeView\";\r\nimport {Row,Col,Divider,Form,Space,Table,Select,Tag,Input,DatePicker,TimePicker,Button,Modal,message,Upload,\r\n} from \"antd\";\r\nimport { Radio } from \"antd\";\r\nimport axios from \"axios\";\r\nimport { RiCloseFill, RiCalendarLine } from \"react-icons/ri\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { UploadOutlined } from \"@ant-design/icons\";\r\nimport ProtectedAppPage from \"../Protected\";\r\nimport ReactQuill from \"react-quill\";\r\nimport \"react-quill/dist/quill.snow.css\";\r\n\r\n\r\nconst uploadProps = {\r\n  name: \"file\",\r\n  action: \"https://run.mocky.io/v3/435e224c-44fb-4773-9faf-380c5e6a2188\",\r\n  headers: {\r\n    authorization: \"authorization-text\",\r\n  },\r\n  onChange(info) {\r\n    if (info.file.status !== \"uploading\") {\r\n      console.log(info.file, info.fileList);\r\n    }\r\n    if (info.file.status === \"done\") {\r\n      message.success(`${info.file.name} file uploaded successfully`);\r\n    } else if (info.file.status === \"error\") {\r\n      message.error(`${info.file.name} file upload failed.`);\r\n    }\r\n  },\r\n};\r\n\r\nexport default function Document() {\r\n  const BACKEND_URL = \"http://54.81.250.98:8083\"; // Update with your backend URL\r\n\r\n  const history = useHistory();\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Document Id\",\r\n      dataIndex: \"id\",\r\n      key: \"id\",\r\n    },\r\n    {\r\n      title: \"Document Name\",\r\n      dataIndex: \"title\",\r\n      key: \"title\",\r\n    }, {\r\n      title: \"Version\",\r\n      dataIndex: \"version\",\r\n      key: \"version\",\r\n    },\r\n    {\r\n      title: \"Dept Id\",\r\n      dataIndex: \"departmentId\",\r\n      key: \"departmentId\",\r\n    },\r\n    {\r\n      title: \"Project Id\",\r\n      dataIndex: \"projectId\",\r\n      key: \"projectId\",\r\n    },\r\n    {\r\n      title: \"MDR\",\r\n      dataIndex: \"title\",\r\n      key: \"title\",\r\n    },\r\n    // {\r\n    //   title: \".exe\",\r\n    //   dataIndex: \"extension\",\r\n    //   key: \"extension\",\r\n    // },\r\n    {\r\n      title: \"Status\",\r\n      dataIndex: \"status\",\r\n      key: \"status\",\r\n    },\r\n    {\r\n      title: \"Assigned To\",\r\n      dataIndex: \"assignedTo\",\r\n      key: \"assignedTo\",\r\n    },\r\n    {\r\n      title: \"Action\",\r\n      key: \"action\",\r\n      render: (_, record) => (\r\n        <Space size=\"middle\">\r\n          {user.user.roleId != 1 ? record.status=='Initialized'? (\r\n                    <Space size=\"middle\">\r\n\r\n            <input type=\"file\" onChange={(e)=>handleFileChange(e,record)}>\r\n             \r\n\r\n            </input>\r\n            <a onClick={() => assignModalShow(record)}>Assign Document</a>\r\n\r\n            </Space>\r\n\r\n            \r\n          ) : user.user.id == record.assignedTo ?(\r\n            <Space size=\"middle\">\r\n            <a onClick={() => handleOpen(record)}>Open</a>\r\n            \r\n            <input type=\"file\" onChange={(e)=>handleFileChange(e,record)}/>\r\n            </Space>\r\n\r\n          ): (\r\n            <>\r\n<a onClick={() => handleOpen(record)}>Open</a>\r\n              {/* <a onClick={() => history.push(`/pages/mypdf?documentId=${record.title}`)}>Open</a> */}\r\n              {/* <a onClick={() => statusModalShow(record)}>Add Status</a> */}\r\n            </>\r\n          ):record.status =='Initialized'?              <a onClick={() => assignModalShow(record)}>Assign Document</a>\r\n          :(\r\n            <>\r\n<a onClick={() => handleOpen(record)}>Open</a>\r\n              {/* <a onClick={() => history.push(`/pages/mypdf?documentId=${record.title}`)}>Open</a> */}\r\n              {/* <a onClick={() => statusModalShow(record)}>Add Status</a> */}\r\n            </>\r\n          )}\r\n        </Space>\r\n      ),\r\n    }\r\n  ];\r\n  const [assignModalVisible, setAssignModalVisible] = useState(false);\r\n  const [selectedDocument, setSelectedDocument] = useState(null);\r\n  const [documentModalVisible, setDocumentModalVisible] = useState(false);\r\n  const [docTitle, setDocTitle] = useState(\"\");\r\n  const [projectId, setProjectId] = useState(\"\");\r\n  const [departmentId, setDepartmentId] = useState(\"\");\r\n  const [extension, setExtension] = useState(\"\");\r\n  const [mdr, setMDR] = useState(\"\");\r\n  const [file, setFile] = useState(null);\r\n  const [textEditorValue, setTextEditorValue] = useState(\"\");\r\n  const [departmentOptions, setDepartments] = useState([]);\r\n  const [projectOptions, setProjects] = useState([]);\r\n  const [mdrOptions, setMdrData] = useState([]);\r\n  const [user, setUser] = useState(JSON.parse(localStorage?.getItem(\"user\")));\r\n  const [data, setData] = useState([]);\r\n  const [projectCode, setProjectCode] = useState(\"\");\r\n  const [areaCode, setAreaCode] = useState(\"\");\r\n  const [deptSuffix, setDeptSuffix] = useState(\"\");\r\n  const [departments,setDepartment] = useState([])\r\n  const [projects,setProject] = useState([])\r\n  const [showTreeView, setShowTreeView] = useState(false);\r\n  const [userOption, setUserDatalist] = useState([]);\r\n  const [assignedEmployees, setAssignedEmployees] = useState([]);\r\nconst [myrecord,setMyRecord]=useState({});\r\n\r\n  const assignModalShow = async (record) => {\r\n    console.log('recorddddd',record);\r\n    setMyRecord(record);\r\n    console.log('hellloooo',myrecord);\r\n    await  fetchUsers();\r\n   \r\n    setAssignModalVisible(true);\r\n\r\n  };\r\n\r\n  const assignModalCancel = () => {\r\n    setAssignModalVisible(false);\r\n  };\r\n\r\n  const handleProjectWiseClick = () => {\r\n    console.log(\"clicked\");\r\n    setShowTreeView(true);\r\n  };\r\n\r\n  const handleDocumentWiseClick = () => {\r\n    console.log(\"clicked\");\r\n    setShowTreeView(false);\r\n  };\r\n\r\n  \r\n \r\n  const documentModalShow = () => {\r\n    setDocumentModalVisible(true);\r\n  };\r\n  const handleOpen = async (record) => {\r\n   const responseData=await fetchAppRev(record.title);\r\n   console.log('helllooo',responseData);\r\n    // Replace 'John' with the actual doc's name\r\n    const docName = record.title;\r\n    const url= `${BACKEND_URL}/uploads/${docName}-${record.version}.pdf` \r\n    console.log(user.user.roleId,user.user.firstName,user);\r\n    let allowed='false';\r\nif(responseData){\r\nallowed='true';\r\n}\r\n    // Redirect to the external URL\r\n     window.location.href = `http://54.81.250.98:3001/react-pdf-highlighter/?docName=${docName}.pdf&url=${url}&allowed=${allowed}&user=${user.user.roleId} ${user.user.firstName}`;\r\n  };\r\n  const documentModalCancel = () => {\r\n    setMDR(\"\");\r\n    setDocTitle(\"\");\r\n    setExtension(\"\");\r\n    setProjectId(\"\");\r\n    setDepartmentId(\"\");\r\n    setTextEditorValue(\"\");\r\n    setDocumentModalVisible(false);\r\n  };\r\n  \r\n  const fetchAppRev = async (title) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://54.81.250.98:8083/api/documents/establishment?companyId=${user?.user?.companyId}&userId=${user.user.id}&docName=${title}`,\r\n        {\r\n          headers: {\r\n            Authorization: user?.accessToken,\r\n            // Add other headers if needed\r\n          },\r\n        }\r\n      );\r\n        \r\n\r\n\r\n      console.log(response.data,\"received\");\r\n      return response.data;\r\n    \r\n    } catch (error) {\r\n      console.error(\"Error fetching documents:\", error?.message);\r\n    }\r\n  };\r\n  const handleFileChange = async (e, record) => {\r\n    const formData = new FormData();\r\n\r\n    const uploadedFile = e.target.files[0];\r\n    console.log(record);\r\n    const title=record.title;\r\n    console.log(record.title,record.version);\r\n    if (uploadedFile.name === `${record.title}-${record.version}.pdf`) {\r\n      setFile(uploadedFile);\r\nconsole.log(formData,'formdata');\r\n      console.log('Uploaded file:', uploadedFile);\r\n\r\n      const obj = {\r\n        title: title,\r\n        companyId: user?.user?.companyId,\r\n        roleId: user?.user?.roleId,\r\n        userId: user?.user?.id,\r\n        userName: `${user?.user?.firstName} ${user?.user?.lastName}`,\r\n        \"file\": uploadedFile\r\n      };\r\n      Object.entries(obj).forEach(([key, value]) => {\r\n        formData.append(key, value);\r\n      });\r\n      try {\r\n       \r\n       \r\n\r\n        const response = await axios.post(\r\n          `http://54.81.250.98:8083/api/documents/upload`,        \r\n          formData,\r\n          {\r\n            headers: {\r\n              Authorization: user?.accessToken,\r\n              // Add other headers if needed\r\n            },\r\n          }\r\n        );\r\n        // Handle the response as needed\r\n        console.log(response);\r\n        message.success(response?.data?.message);\r\n       \r\n      } catch (error) {\r\n        // Handle errors\r\n  \r\n        message.error(error);\r\n      }\r\n\r\n    } else {\r\n      // Show an error message or take appropriate action\r\n      message.error('File name does not match '+ record.title);\r\n      // Clear the file input field\r\n      e.target.value = null;\r\n    }\r\n  };\r\n\r\n  const fetchUsers = async () => {\r\n\r\n    \r\n    try {\r\n      const response = await axios.get(\r\n        `http://54.81.250.98:8083/api/users?companyId=${user?.user?.companyId}&roleId=2`,\r\n        {\r\n          headers: {\r\n            Authorization: user?.accessToken,\r\n            // Add other headers if needed\r\n          },\r\n        }\r\n      );\r\n      console.log(response?.data, \"Users\");\r\n      const option = [];\r\nlet role='';\r\nif(user.user.roleId==1){\r\n  for (const item of response?.data) {\r\n    console.log(myrecord,myrecord.departmentId,item.departmentId);\r\n   if(item.roleId==2  && myrecord.departmentId.indexOf(item.departmentId) !== -1){\r\n    role =`Head of ${item.department}`\r\n    option.push({\r\n      value:item?.id,\r\n      label: `${item?.firstName} ${role} `,\r\n    });\r\n } \r\n//    if(item.roleId==4 && item.departmentId==user.user.departmentId){\r\n//      role = `Junior ${item.department}`\r\n//      option.push({\r\n//       value:item?.id,\r\n//       label: `${item?.firstName} ${role} `,\r\n//     });\r\n//   }\r\n//   if(item.roleId==5 && item.departmentId==user.user.departmentId){\r\n//     role ='Designer/Draughtsmen'\r\n//     option.push({\r\n//       value:item?.id,\r\n//       label: `${item?.firstName} ${role} `,\r\n//     });\r\n//  } \r\n   } }\r\nif(user.user.roleId==2 ){\r\n      for (const item of response?.data) {\r\n       if(item.roleId==3 && item.departmentId==user.user.departmentId){\r\n        role =`Senior Engineer ${item.department}`\r\n        option.push({\r\n          value:item?.id,\r\n          label: `${item?.firstName} ${role} `,\r\n        });\r\n     } \r\n  //    if(item.roleId==4 && item.departmentId==user.user.departmentId){\r\n  //      role = `Junior ${item.department}`\r\n  //      option.push({\r\n  //       value:item?.id,\r\n  //       label: `${item?.firstName} ${role} `,\r\n  //     });\r\n  //   }\r\n  //   if(item.roleId==5 && item.departmentId==user.user.departmentId){\r\n  //     role ='Designer/Draughtsmen'\r\n  //     option.push({\r\n  //       value:item?.id,\r\n  //       label: `${item?.firstName} ${role} `,\r\n  //     });\r\n  //  } \r\n       } }\r\n       if(user.user.roleId==3){\r\n        for (const item of response?.data) {\r\n      //    if(item.roleId==3 && item.departmentId==user.user.departmentId){\r\n      //     role =`Senior Engineer ${item.department}`\r\n      //     option.push({\r\n      //       value:item?.id,\r\n      //       label: `${item?.firstName} ${role} `,\r\n      //     });\r\n      //  } \r\n       if(item.roleId==4 && item.departmentId==user.user.departmentId){\r\n         role = `Junior ${item.department}`\r\n         option.push({\r\n          value:item?.id,\r\n          label: `${item?.firstName} ${role} `,\r\n        });\r\n      }\r\n      if(item.roleId==5 && item.departmentId==user.user.departmentId){\r\n        role ='Designer/Draughtsmen'\r\n        option.push({\r\n          value:item?.id,\r\n          label: `${item?.firstName} ${role} `,\r\n        });\r\n     } \r\n         } }\r\n         console.log(\"option\",option);\r\n      setUserDatalist(option);\r\n       // Assuming the response.data is an array of DocumentPermissions\r\n    } catch (error) {\r\n      console.error(\"Error fetching Users:\", error?.message);\r\n    }\r\n  };\r\n\r\n  const handleFile = (e) => {\r\n    const uploadedFile = e.target.files[0];\r\n    \r\n      setFile(uploadedFile);\r\n      console.log('Uploaded file:', uploadedFile);\r\n   \r\n  };\r\n\r\n\r\n  const addDocument = async () => {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append(\"file\", file);\r\n      const mdrObj = mdrOptions.find((item) => item?.value == mdr);\r\n      console.log(mdrObj, mdr, user);\r\n      const obj = {\r\n        title: docTitle,\r\n        departmentId: mdrObj?.departmentId,\r\n        projectId: mdrObj?.projectId,\r\n        masterDocumentId: mdr,\r\n        content: textEditorValue,\r\n        extension,\r\n        companyId: user?.user?.companyId,\r\n        roleId: user?.user?.roleId,\r\n        userId: user?.user?.id,\r\n        userName: `${user?.user?.firstName} ${user?.user?.lastName}`,\r\n      };\r\n      Object.entries(obj).forEach(([key, value]) => {\r\n        formData.append(key, value);\r\n      });\r\n      console.log(formData);\r\n      const response = await axios.post(\r\n        `http://54.81.250.98:8083/api/documents/?projectCode=${projectCode}&areaCode=${areaCode}&deptSuffix=${deptSuffix}`,        \r\n        formData,\r\n        {\r\n          headers: {\r\n            Authorization: user?.accessToken,\r\n            // Add other headers if needed\r\n          },\r\n        }\r\n      );\r\n      // Handle the response as needed\r\n      console.log(response);\r\n      message.success(response?.data?.message);\r\n     await fetchData();\r\n      documentModalCancel();\r\n    } catch (error) {\r\n      // Handle errors\r\n\r\n      if (error?.message == \"Request failed with status code 403\") {\r\n        message.error(\"Permission Denied to create document on this MDR\");\r\n      }\r\n    }\r\n  };\r\n  const fetchData = async () => {\r\n    \r\n    try {\r\n      const response = await axios.get(\r\n        `http://54.81.250.98:8083/api/documents?companyId=${user?.user?.companyId}&assignedBy=${user.user.roleId}&userId=${user.user.id}&department=${user.user.departmentId}`,\r\n        {\r\n          headers: {\r\n            Authorization: user?.accessToken,\r\n            // Add other headers if needed\r\n          },\r\n        }\r\n      );\r\n        \r\n\r\n\r\n      console.log(response.data,\"received\");\r\n      // Check if response.data is an array before including it in the setData call\r\n      const newData = Array.isArray(response.data) ? response.data : [];\r\n\r\n\r\n      setData([...newData]);\r\n    } catch (error) {\r\n      console.error(\"Error fetching documents:\", error?.message);\r\n    }\r\n  };\r\n  \r\n  const fetchDepartments = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://54.81.250.98:8083/api/departments?companyId=${user?.user?.companyId}`,\r\n        {\r\n          headers: {\r\n            Authorization: user?.accessToken,\r\n            // Add other headers if needed\r\n          },\r\n        }\r\n      );\r\n      setDepartment(response.data)\r\n      const options = [];\r\n      for (const item of response?.data) {\r\n        options.push({ value: item?.suffix, label: item?.suffix });\r\n      }\r\n      setDepartments(options); // Assuming the response.data is an array of projects\r\n    } catch (error) {\r\n      console.error(\"Error fetching departments:\", error?.message);\r\n    }\r\n  };\r\n  const fetchProjects = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://54.81.250.98:8083/api/projects?companyId=${user?.user?.companyId}`,\r\n        {\r\n          headers: {\r\n            Authorization: user?.accessToken,\r\n            // Add other headers if needed\r\n          },\r\n        }\r\n      );\r\n      setProject(response.data)\r\n      const options = [];\r\n      for (const item of response?.data) {\r\n        options.push({ value: item?.code, label: item?.code });\r\n      }\r\n      setProjects(options); // Assuming the response.data is an array of projects\r\n    } catch (error) {\r\n      console.error(\"Error fetching departments:\", error?.message);\r\n    }\r\n  };\r\n  const fetchMDR = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://54.81.250.98:8083/api/documents/mdr?companyId=${user?.user?.companyId}`,\r\n        {\r\n          headers: {\r\n            Authorization: user?.accessToken,\r\n            // Add other headers if needed\r\n          },\r\n        }\r\n      );\r\n      const options = [];\r\n      for (const item of response?.data) {\r\n        options.push({\r\n          value: item?.id,\r\n          label: item?.title,\r\n          projectId: item?.projectId,\r\n          departmentId: item?.departmentId,\r\n        });\r\n      }\r\n\r\n      setMdrData(options); // Assuming the response.data is an array of projects\r\n    } catch (error) {\r\n      console.error(\"Error fetching departments:\", error?.message);\r\n    }\r\n  };\r\n  const [statusModalVisible, setStatusModalVisible] = useState(false);\r\nconst [selectedStatus, setSelectedStatus] = useState(\"\");\r\nconst statusModalShow = (record) => {\r\n  setSelectedDocument(record);\r\n  setStatusModalVisible(true);\r\n};\r\n\r\nconst statusModalCancel = () => {\r\n  setSelectedStatus(\"\");\r\n  setStatusModalVisible(false);\r\n};\r\nconst [updatedData, setUpdatedData] = useState([]);\r\n\r\nconst handleStatusChange = () => {\r\n  // Check if the selected document is available\r\n  if (selectedDocument) {\r\n    // Perform your logic to update the status here\r\n    // You can use the selectedStatus along with the record data\r\n    // to update the status in the data array or make an API call\r\n\r\n    const updatedRecord = { ...selectedDocument, status: selectedStatus };\r\n\r\n    // Update the data array with the modified record\r\n    const updatedDataArray = data.map((item) =>\r\n      item.id === selectedDocument.id ? updatedRecord : item\r\n    );\r\n    console.log(selectedDocument)\r\n    saveData(selectedDocument.id, { 'status': selectedStatus });\r\n\r\n    // Load data from the specific key\r\n    const loadedData = loadData(selectedDocument.id);\r\n    console.log('status',loadedData);\r\n\r\n    // Trigger a re-render with the updated data\r\n    setUpdatedData(updatedDataArray);\r\n\r\n    // Close the status modal\r\n    statusModalCancel();\r\n  }\r\n};\r\n\r\n\r\nuseEffect(() => {\r\n  setUser(JSON.parse(localStorage?.getItem(\"user\")));\r\n  // Fetch data when the component mounts\r\n  fetchDepartments();\r\n  fetchProjects();\r\n  fetchMDR();\r\n  fetchData();\r\n  fetchUsers()\r\n}, [myrecord]); // Add updatedData as a dependency\r\n\r\nuseEffect(() => {\r\n  // Update the data state with the updatedData\r\n  setData(updatedData);\r\n}, [updatedData]);\r\nconst assignDoc = async(assignedEmployees,myrecord)=>{\r\n  try {\r\n    console.log('aaaa',myrecord.title);\r\n    // console.log(allUsers);\r\n    // const assignedUser = allUsers.find(user => user.id == assignedEmployees)      \r\n    // console.log(assignedUser);\r\n    const project = projectOptions.find((item) => item?.value == projectId);\r\n    const department = departmentOptions.find(\r\n      (item) => item?.value == departmentId\r\n    );\r\n    const response = await axios.put(\r\n      `http://54.81.250.98:8083/api/documents/?assignedTo=${assignedEmployees}&assignedBy=${user.user.roleId}&assignedFrom=${user.user.id}&docName=${myrecord.title}`,\r\n      {},\r\n      {\r\n        headers: {\r\n          Authorization: user?.accessToken,\r\n          // Add other headers if needed\r\n        },\r\n      }\r\n    );\r\n    setAssignModalVisible(false)\r\n    fetchData()\r\n  } catch (error) {\r\n    console.error(\"Error assigning documents:\", error);\r\n  }\r\n}\r\n\r\n  return (\r\n    <>\r\n    <Modal\r\n  title=\"Change Status\"\r\n  width={400}\r\n  centered\r\n  visible={statusModalVisible}\r\n  onCancel={statusModalCancel}\r\n  footer={null}\r\n  closeIcon={<RiCloseFill className=\"remix-icon text-color-black-100\" size={24} />}\r\n>\r\n  <Row justify=\"space-between\" align=\"center\">\r\n    <Col span={20}>\r\n      <Form layout=\"vertical\" name=\"basic\">\r\n        <Form.Item\r\n          label=\"Select Status\"\r\n          name=\"selectedStatus\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please select a status\",\r\n            },\r\n          ]}\r\n        >\r\n          <Select\r\n            options={[\r\n              { label: \"In-Progress\", value: \"in-progress\" },\r\n      { label: \"Hold\", value: \"hold\" },\r\n      { label: \"Pending Review (In-House)\", value: \"pending-review-in-house\" },\r\n      { label: \"Pending Approval (In-House)\", value: \"pending-approval-in-house\" },\r\n      { label: \"Reviewed (In-House)\", value: \"reviewed-in-house\" },\r\n      { label: \"Approved (In-House)\", value: \"approved-in-house\" },\r\n      { label: \"Pending Review (Client)\", value: \"pending-review-client\" },\r\n      { label: \"Pending Endorsement (Client)\", value: \"pending-endorsement-client\" },\r\n      { label: \"Endorsed (Client)\", value: \"endorsed-client\" },\r\n      { label: \"Document Ready to Publish\", value: \"ready-to-publish\" },\r\n            ]}\r\n            value={selectedStatus}\r\n            onChange={(value) => setSelectedStatus(value)}\r\n          />\r\n        </Form.Item>\r\n        {/* ... (your existing code) */}\r\n        <Row>\r\n          <Col md={12} span={24} className=\"hp-pr-sm-0 hp-pr-12\">\r\n            <Button\r\n              block\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              onClick={() => handleStatusChange(selectedStatus)}\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Col>\r\n          <Col md={12} span={24} className=\"hp-mt-sm-12 hp-pl-sm-0 hp-pl-12\">\r\n            <Button block onClick={statusModalCancel}>\r\n              Cancel\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n    </Col>\r\n  </Row>\r\n</Modal>\r\n\r\n\r\n<Modal\r\n        title=\"Assign Document\"\r\n        width={400}\r\n        centered\r\n        visible={assignModalVisible}\r\n        onCancel={assignModalCancel}\r\n        footer={null}\r\n        closeIcon={\r\n          <RiCloseFill className=\"remix-icon text-color-black-100\" size={24} />\r\n        }\r\n      >\r\n        <Row justify=\"space-between\" align=\"center\">\r\n          <Col span={20}>\r\n            <Form layout=\"vertical\" name=\"basic\">\r\n                <Form.Item\r\n                label=\"Assign Document to\"\r\n                name=\"assignDoc\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please Assign Document\",\r\n                  },\r\n                ]}\r\n              >\r\n              <Select\r\n                  options={userOption}\r\n                  value={assignedEmployees}\r\n                  onChange={(value) => setAssignedEmployees(value)}\r\n                />\r\n                </Form.Item>\r\n\r\n              <Row>           \r\n              <Col md={12} span={24} className=\"hp-pr-sm-0 hp-pr-12\">\r\n                  <Button block onClick={()=>assignDoc(assignedEmployees,myrecord)} type=\"primary\"htmlType=\"submit\">Assigned</Button>\r\n                </Col>\r\n              \r\n              </Row>\r\n            </Form>\r\n          </Col>\r\n        </Row>\r\n      </Modal>\r\n\r\n\r\n\r\n      <Modal\r\n        title=\"Upload Document\"\r\n        width={1000}\r\n        centered\r\n        visible={documentModalVisible}\r\n        onCancel={documentModalCancel}\r\n        footer={null}\r\n        closeIcon={\r\n          <RiCloseFill className=\"remix-icon text-color-black-100\" size={24} />\r\n        }\r\n      >\r\n        <Row justify=\"space-between\" align=\"center\">\r\n          <Col span={15}>\r\n            <ReactQuill\r\n              style={{ height: \"300px\" }}\r\n              theme=\"snow\"\r\n              value={textEditorValue}\r\n              onChange={setTextEditorValue}\r\n            />\r\n          </Col>\r\n          <Col span={7}>\r\n            <Form layout=\"vertical\" name=\"basic\">\r\n              <Form.Item\r\n                label=\"Document Title\"\r\n                name=\"docTitle\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please input your title\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  value={docTitle}\r\n                  onChange={(e) => setDocTitle(e.target.value)}\r\n                />\r\n              </Form.Item>\r\n\r\n\r\n              <Form.Item\r\n                label=\"MDR\"\r\n                name=\"mdr\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please select MDR\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Select\r\n                  options={mdrOptions}\r\n                  value={mdr}\r\n                  onChange={(value) => setMDR(value)}\r\n                />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                label=\"Project Code\"\r\n                name=\"projectCode\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please select Project Code\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Select\r\n                  options={projectOptions}\r\n                  value={projectCode}\r\n                  onChange={(value) => setProjectCode(value)}\r\n                />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                label=\"Area Code\"\r\n                name=\"areaCode\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please select Area Code\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Select\r\n            options={[\r\n              { label: \"01\", value: \"01\" },\r\n              { label: \"02\", value: \"02\" },\r\n\r\n            ]}\r\n                  value={areaCode}\r\n                  onChange={(value) => setAreaCode(value)}\r\n                />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                label=\"Department Suffix\"\r\n                name=\"deptSuffix\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please Add Department Suffix\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Select\r\n            options={departmentOptions}\r\n                  value={deptSuffix}\r\n                  onChange={(value) => setDeptSuffix(value)}\r\n                />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                label=\"Extension\"\r\n                name=\"extension\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please select Extention\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Select\r\n                  options={[\r\n                    { value: \".pdf\", label: \".pdf\" },\r\n                    { value: \".docx\", label: \".docx\" },\r\n                  ]}\r\n                  value={extension}\r\n                  onChange={(value) => setExtension(value)}\r\n                />\r\n              </Form.Item>\r\n\r\n              {/* <Upload {...uploadProps}>\r\n                <Button icon={<UploadOutlined />}>Click to Upload</Button>\r\n              </Upload> */}\r\n              <input type=\"file\" onChange={handleFile} />\r\n              <Row>\r\n                <Col md={12} span={24} className=\"hp-pr-sm-0 hp-pr-12\">\r\n                  <Button\r\n                    block\r\n                    type=\"primary\"\r\n                    htmlType=\"submit\"\r\n                    onClick={() => addDocument()}\r\n                  >\r\n                    Submit\r\n                  </Button>\r\n                </Col>\r\n\r\n                <Col\r\n                  md={12}\r\n                  span={24}\r\n                  className=\"hp-mt-sm-12 hp-pl-sm-0 hp-pl-12\"\r\n                >\r\n                  <Button block onClick={documentModalCancel}>\r\n                    Cancel\r\n                  </Button>\r\n                </Col>\r\n              </Row>\r\n            </Form>\r\n          </Col>\r\n        </Row>\r\n      </Modal>\r\n      <div style={{ textAlign: \"right\", marginBottom: \"16px\" ,padding:\"15px\", gap:\"15px\"}}>\r\n        <Button\r\n          type=\"primary\"\r\n          onClick={documentModalShow}\r\n          disabled={user?.user?.roleId == 3}\r\n        >\r\n          Add Documents\r\n        </Button>\r\n\r\n        <Button\r\n          type=\"primary\"\r\n          onClick={handleProjectWiseClick}\r\n          disabled={user?.user?.roleId == 3}\r\n        >Project Wise\r\n        </Button>\r\n\r\n        <Button\r\n          type=\"primary\"\r\n          onClick={handleDocumentWiseClick}\r\n          disabled={user?.user?.roleId == 3}\r\n        >Documents\r\n        </Button>\r\n      </div>\r\n      {\r\n        showTreeView?<MyTreeView />:      <div style={{ overflowX: \"auto\" }}>\r\n        <Table columns={columns} dataSource={data} /></div>\r\n      }\r\n      \r\n      <ProtectedAppPage />      \r\n    </>\r\n  );\r\n}\r\n","// Storage.js\r\n\r\n// Save data to a cookie\r\nexport const saveData = (key, newData) => {\r\n    // Load existing data from the cookie\r\n    const existingData = loadData(key) || {};\r\n  \r\n    // Merge existing data with new data\r\n    const mergedData = { ...existingData, ...newData };\r\n  \r\n    // Save the merged data to the cookie\r\n    document.cookie = `${key}=${JSON.stringify(mergedData)}; expires=Fri, 31 Dec 9999 23:59:59 GMT`;\r\n  };\r\n  \r\n  // Load data from a cookie\r\n  export const loadData = (key) => {\r\n    const cookieData = document.cookie\r\n      .split('; ')\r\n      .find((cookie) => cookie.startsWith(`${key}=`));\r\n  \r\n    return cookieData ? JSON.parse(cookieData.split('=')[1]) : null;\r\n  };\r\n  \r\n  // Get all keys from cookies\r\n  export const getAllKeys = (prefix) => {\r\n    return document.cookie\r\n      .split('; ')\r\n      .map((cookie) => cookie.split('=')[0])\r\n      .filter((key) => key.startsWith(prefix));\r\n  };\r\n  "],"names":["ProtectedAppPage","_localStorage","isLogIn","localStorage","getItem","console","log","_jsx","Redirect","to","useStyles","makeStyles","root","flexGrow","maxWidth","projectNode","backgroundColor","fontSize","padding","borderRadius","marginBottom","transition","mdrNode","marginLeft","departmentIdNode","titleNode","icon","marginRight","buttonContainer","display","alignItems","marginTop","status","fontWeight","data","id","title","companyId","departmentId","projectId","mdr","forEach","project","split","push","MyTreeView","information","setInformation","useState","user","setUser","JSON","parse","useEffect","classes","className","children","TreeView","defaultCollapseIcon","FolderIcon","defaultExpandIcon","FolderOpenIcon","defaultEndIcon","DescriptionIcon","Object","entries","map","_ref","mdrs","TreeItem","nodeId","label","concat","sx","_ref2","departments","FolderSpecialIcon","_ref3","titles","titleIndex","_jsxs","Button","onClick","handleOpenDocument","variant","color","Document","_user$user17","_user$user18","_user$user19","useHistory","columns","dataIndex","key","render","_","record","Space","size","roleId","type","onChange","e","handleFileChange","assignModalShow","assignedTo","handleOpen","_Fragment","assignModalVisible","setAssignModalVisible","selectedDocument","setSelectedDocument","documentModalVisible","setDocumentModalVisible","docTitle","setDocTitle","setProjectId","setDepartmentId","extension","setExtension","setMDR","file","setFile","textEditorValue","setTextEditorValue","departmentOptions","setDepartments","projectOptions","setProjects","mdrOptions","setMdrData","setData","projectCode","setProjectCode","areaCode","setAreaCode","deptSuffix","setDeptSuffix","setDepartment","projects","setProject","showTreeView","setShowTreeView","userOption","setUserDatalist","assignedEmployees","setAssignedEmployees","myrecord","setMyRecord","async","fetchUsers","responseData","fetchAppRev","docName","url","version","firstName","allowed","window","location","href","documentModalCancel","_user$user","response","axios","headers","Authorization","accessToken","error","message","formData","FormData","uploadedFile","target","files","name","_user$user2","_user$user3","_user$user4","_user$user5","_user$user6","obj","userId","userName","lastName","value","append","_response$data","success","_user$user7","option","role","item","indexOf","department","fetchData","_user$user13","newData","Array","isArray","statusModalVisible","setStatusModalVisible","selectedStatus","setSelectedStatus","statusModalCancel","updatedData","setUpdatedData","_localStorage2","_user$user14","options","suffix","fetchDepartments","_user$user15","code","fetchProjects","_user$user16","fetchMDR","Modal","width","centered","visible","onCancel","footer","closeIcon","RiCloseFill","Row","justify","align","Col","span","Form","layout","Item","rules","required","Select","md","block","htmlType","handleStatusChange","updatedRecord","updatedDataArray","saveData","loadedData","loadData","assignModalCancel","find","assignDoc","ReactQuill","style","height","theme","Input","_user$user8","_user$user9","_user$user10","_user$user11","_user$user12","_response$data2","mdrObj","masterDocumentId","content","addDocument","textAlign","gap","documentModalShow","disabled","handleProjectWiseClick","handleDocumentWiseClick","overflowX","Table","dataSource","mergedData","document","cookie","stringify","cookieData","startsWith"],"sourceRoot":""}