{"version":3,"file":"static/js/6231.66c9ce93.chunk.js","mappings":"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","sources":["view/pages/Protected.jsx","view/pages/mdr/Progress.jsx","../node_modules/@mui/icons-material/esm/OpenInFullSharp.js","view/pages/mdr/index.jsx"],"sourcesContent":["import { useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nconst ProtectedAppPage = () => {\r\n  const isLogIn = localStorage?.getItem(\"user\");\r\n  console.log(isLogIn, \"loggin\");\r\n  if (!isLogIn) {\r\n    return <Redirect to=\"/pages/authentication/login\" />;\r\n  }\r\n\r\n  return null;\r\n};\r\nexport default ProtectedAppPage;\r\n","import React from 'react';\r\nimport { Progress, Row } from 'antd';\r\n\r\nconst ProgressComp = ({ percentage }) => {\r\n  let strokeColor = '#ff0000'; // Default color is red\r\n  if (percentage > 75) {\r\n    strokeColor = '#1890ff'; // Blue for percent > 75\r\n  } else if (percentage > 50) {\r\n    strokeColor = '#fadb14'; // Yellow for percent > 50\r\n  }\r\n\r\n  return (\r\n    <Row justify=\"center\" align=\"middle\" style={{ width: 180 }}>\r\n      <Progress percent={percentage} steps={5} strokeColor={strokeColor} />\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default ProgressComp;\r\n","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M21 11V3h-8l3.29 3.29-10 10L3 13v8h8l-3.29-3.29 10-10z\"\n}), 'OpenInFullSharp');","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { useHistory } from 'react-router-dom'; \r\nimport { DownOutlined } from '@ant-design/icons';\r\nimport { SearchOutlined } from '@ant-design/icons';\r\nimport ExcelJS from \"exceljs\";\r\nimport Highlighter from 'react-highlight-words';\r\nimport Logo from \"./pec.png\";\r\nimport smallLogo from \"./novacon.png\";\r\n\r\nimport {\r\n  notification,\r\n  Row,\r\n  Col,\r\n  Divider,\r\n  Dropdown,\r\n  Form,\r\n  Space,\r\n  Table,\r\n  Menu,\r\n  Select,\r\n  Tag,\r\n  Input,\r\n  DatePicker,\r\n  TimePicker,\r\n  Button,\r\n  Modal,\r\n  message,\r\n  Upload,\r\n  Checkbox,\r\n  Typography,\r\n  Tooltip\r\n} from \"antd\";\r\nconst { Title, Text } = Typography;\r\nconst imageUrl = '..//..//..//assets/images/logo/novacon.png'\r\nimport { Radio } from \"antd\";\r\nimport axios from \"axios\";\r\nimport { RiCloseFill, RiCalendarLine } from \"react-icons/ri\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { UploadOutlined } from \"@ant-design/icons\";\r\n\r\nimport ReactQuill from \"react-quill\";\r\nimport \"react-quill/dist/quill.snow.css\";\r\nimport ProtectedAppPage from \"../Protected\";\r\nimport { useLocation } from 'react-router-dom';\r\nimport { string } from \"prop-types\";\r\nimport ProgressComp from \"./Progress\";\r\nimport { DeleteOutlined, DocumentScannerOutlined, EditOutlined, OpenInFull, OpenInFullOutlined, OpenInFullSharp, Update, UpdateSharp } from \"@mui/icons-material\";\r\nimport { version } from \"less\";\r\nimport { Edit } from \"iconsax-react\";\r\n\r\n\r\n\r\nconst uploadProps = {\r\n  name: \"file\",\r\n  action: \"https://run.mocky.io/v3/435e224c-44fb-4773-9faf-380c5e6a2188\",\r\n  headers: {\r\n    authorization: \"authorization-text\",\r\n  },\r\n  onChange(info) {\r\n    if (info.file.status !== \"uploading\") {\r\n      console.log(info.file, info.fileList);\r\n    }\r\n    if (info.file.status === \"done\") {\r\n      message.success(`${info.file.name} file uploaded successfully`);\r\n    } else if (info.file.status === \"error\") {\r\n      message.error(`${info.file.name} file upload failed.`);\r\n    }\r\n  },\r\n};\r\n\r\nexport default function MDR() {\r\n  const [searchText, setSearchText] = useState('');\r\n  const [searchedColumn, setSearchedColumn] = useState('');\r\n  const searchInput = useRef(null);\r\n  const [form] = Form.useForm();\r\n  const [updateForm] = Form.useForm();\r\n\r\n  const [documentModalVisible, setDocumentModalVisible] = useState(false);\r\n  const [assignModalVisible, setAssignModalVisible] = useState(false);\r\n  const [createModalVisible, setCreateModalVisible] = useState(false);\r\n  const [showModalVisible, setShowModalVisible] = useState(false);\r\n  const [editModalVisible, setEditModalVisible] = useState(false);\r\n  const [AssignForm] = Form.useForm();\r\n  const [CreateForm] = Form.useForm();\r\n\r\n\r\n  const [title, setTitle] = useState(\"\");\r\n  const [projectId, setProjectId] = useState(\"\");\r\n  const [departmentId, setDepartmentId] = useState(\"\");\r\n  const [mdrCode, setMdrCode] = useState(\"\");\r\n  const [noOfDocuments, setNoOfDocuments] = useState(\"\");\r\n  const [pro, setPro] = useState([]);\r\n  const [status, setStatus] = useState(\"\");\r\n  const [projectOptions, setProjects] = useState([]);\r\n  const [user, setUser] = useState(JSON.parse(localStorage?.getItem(\"user\")));\r\n  const [data, setData] = useState([]);\r\n  const [dataArray, setDataArray] = useState([]);\r\n\r\n  const [selectedDepartments, setSelectedDepartments] = useState([]);\r\n  const [selectedReviewer, setSelectedReviewer] = useState([]);\r\n  const [docData, setDocData] = useState([]);\r\n\r\n  const [assignedEmployees, setAssignedEmployees] = useState([]);\r\n  const [selectedApprover, setSelectedApprover] = useState([]);\r\n  const[allUsers,setAllUsers] = useState([])\r\n  const [mdrTemplateVisible, setMdrTemplateVisible] = useState(false);\r\n  const [departmentOptions,setDepartmentOptions] = useState([])\r\n\r\n  const [departmentOption,setDepartmentOption] = useState([])\r\n  const [userOptions, setUserData] = useState([]);\r\n  const [filteredUsers, setFilteredUsers] = useState([]);\r\n  const [userOptionForCSV, setUserOptions] = useState([]);\r\n\r\n  const [userOption, setUserDatalist] = useState([]);\r\n  const [record,setRecord] = useState()\r\n\r\n  const [updateModalVisible,   setUpdateModalVisible] =useState(false);\r\n  \r\n  const [deleteModalVisible, setDeleteModalVisible] = useState(false);\r\n\r\n  const [recordMdr,setRecordMdr] = useState()\r\n  const [recordMDR,setRecordMDR] = useState()\r\n\r\n  const [projectCode,setProjectCode] = useState()\r\n  const location = useLocation();\r\n  const { matchingRecord } = location.state || {}\r\n  const BACKEND_URL = \"http://54.81.250.98:8083\"; // Update with your backend URL\r\n\r\n  // console.log(matchingRecord,\"recordinggggg\");\r\n  // console.log(location,\"location\");\r\n\r\n  const handleSubmit = () => {\r\n    AssignForm.validateFields().then((values) => {\r\n      assignMDR(assignedEmployees,allUsers)\r\n      AssignForm.resetFields();\r\n    });\r\n  };\r\n\r\n  const handleCreateSubmit = () => {\r\n    CreateForm.validateFields().then((values) => {\r\n      // assignMDR(assignedEmployees,allUsers)\r\n      CreateForm.resetFields();\r\n    });\r\n  };\r\n\r\n  const handleUpdateSubmit = () => {\r\n    updateForm.validateFields().then((values) => {\r\n      handleUpdate()\r\n    updateForm.resetFields();\r\n    });\r\n  };\r\n\r\n\r\n  const handleUpdate=async()=>{\r\n    try {\r\n      const response  = await axios.put\r\n      (`http://54.81.250.98:8083/api/documents/mdr_update?companyId=${user?.user.companyId}&id=${updateForm.getFieldValue(\"id\")}`,\r\n      {\r\n        title:updateForm.getFieldValue(\"title\"),\r\n        mdrCode:updateForm.getFieldValue(\"mdrCode\"),\r\n      },\r\n      {\r\n        headers: {\r\n          Authorization: user?.accessToken,\r\n          // Add other headers if needed\r\n        },\r\n      }\r\n    )\r\n      message.success(response.data.message)\r\n      editModalCancel()\r\n      fetchData()\r\n    } catch (error) {\r\n      console.error(\"Error updating departments:\", error?.message);\r\n    }\r\n  }\r\n\r\n  const handleSearch = (selectedKeys, confirm, dataIndex) => {\r\n    confirm();\r\n    setSearchText(selectedKeys[0]);\r\n    setSearchedColumn(dataIndex);\r\n  };\r\n  const handleReset = (clearFilters) => {\r\n    clearFilters();\r\n    setSearchText('');\r\n  };\r\n  const handleDelete = async (record) => {\r\n    // Your delete logic here\r\n    const id = record.id\r\n    console.log(id);\r\n    const response = await axios.delete(\r\n      `http://54.81.250.98:8083/api/users?delete=4&recordId=${record.id}`,\r\n      {\r\n        headers: {\r\n          Authorization: user?.accessToken,\r\n          // Add other headers if needed\r\n        },\r\n      }\r\n    );\r\n    message.success(response.data.message)\r\n    deleteModalCancel()\r\n    fetchData()\r\n  \r\n  };\r\n\r\n  const getColumnSearchProps = (dataIndex) => ({\r\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters, close }) => (\r\n      <div style={{ padding: 8 }}>\r\n        <Input\r\n          ref={searchInput}\r\n          placeholder={`Search ${dataIndex}`}\r\n          value={selectedKeys[0]}\r\n          onChange={(e) => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n          onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n          style={{ marginBottom: 8, display: 'block' }}\r\n        />\r\n        <Space>\r\n          <Button\r\n            type=\"primary\"\r\n            onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n            icon={<SearchOutlined />}\r\n            size=\"small\"\r\n            style={{ width: 90 }}\r\n          >\r\n            Search\r\n          </Button>\r\n          <Button onClick={() => clearFilters && handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n            Reset\r\n          </Button>\r\n\r\n        </Space>\r\n      </div>\r\n    ),\r\n    filterIcon: (filtered) => (\r\n      <SearchOutlined style={{ color: filtered ? '#1677ff' : undefined }} />\r\n    ),\r\n    onFilter: (value, record) =>\r\n      record[dataIndex].toString().toLowerCase().includes(value.toLowerCase()),\r\n    onFilterDropdownOpenChange: (visible) => {\r\n      if (visible) {\r\n        setTimeout(() => searchInput.current?.select(), 100);\r\n      }\r\n    },\r\n    render: (text) =>\r\n      searchedColumn === dataIndex ? (\r\n        <Highlighter\r\n          highlightStyle={{\r\n            backgroundColor: '#ffc069',\r\n            padding: 0,\r\n          }}\r\n          searchWords={[searchText]}\r\n          autoEscape\r\n          textToHighlight={text ? text.toString() : ''}\r\n        />\r\n      ) : (\r\n        text\r\n      ),\r\n  });\r\n\r\n\r\n  const showMdrTemplate = () => {\r\n    setMdrTemplateVisible(true);\r\n  };\r\n\r\n  const hideMdrTemplate = () => {\r\n    setMdrTemplateVisible(false);\r\n  };\r\n\r\n  const serializedDepartmentOption = JSON.stringify(departmentOption);\r\n  // console.log(\"serialized\",serializedDepartmentOption)\r\n\r\n  const history = useHistory();\r\n  const navigateToMdrTemplate = () => {\r\n    if (!title || !projectId ||!selectedReviewer ||!selectedApprover ) {\r\n      // If any required field is missing, display a validation error notification\r\n      notification.error({\r\n        message: 'Validation Error',\r\n        description: 'Please fill in all required fields.',\r\n        style: {\r\n          backgroundColor: '#f5222d', // Red color background\r\n          color: '#fff', // White text color\r\n        },\r\n      });\r\n      return; // Exit early if validation fails\r\n    }\r\n\r\n\r\n    const project = projectOptions.find((item) => item?.value == projectId);\r\n    // console.log('departmentOptions',departmentOptions);\r\n    const serializedDepartmentOptions = JSON.stringify(departmentOptions);\r\n    const serializedDepartmentOption = JSON.stringify(departmentOption);\r\n    // console.log(\"serialized\",serializedDepartmentOption)\r\n    const serializedProjectOptions = JSON.stringify(projectOptions);\r\n    const serializedSelectedApprover = JSON.stringify(selectedApprover);\r\n    const serializedSelectedReviewer = JSON.stringify(selectedReviewer);\r\n    history.push(`/pages/initialMDR?projectCode=${project.code}&mdrCode=${mdrCode}\r\n    &departmentOption=${serializedDepartmentOption}&departmentOptions=${serializedDepartmentOptions}\r\n    &projectOptions=${serializedProjectOptions}&projectId=${projectId}&projectCode=${projectCode}\r\n    &departmentId=${selectedDepartments}&title=${title}&approver=${serializedSelectedApprover}&reviewer=${serializedSelectedReviewer}`)\r\n  \r\n  };\r\n    \r\n    const navigateToMdrTemplateForUpdate = () => {\r\n      if (!title || !projectId ||!selectedReviewer ||!selectedApprover ) {\r\n        // If any required field is missing, display a validation error notification\r\n        notification.error({\r\n          message: 'Validation Error',\r\n          description: 'Please fill in all required fields.',\r\n          style: {\r\n            backgroundColor: '#f5222d', // Red color background\r\n            color: '#fff', // White text color\r\n          },\r\n        });\r\n        return; // Exit early if validation fails\r\n      }\r\n      const project = projectOptions.find((item) => item?.value == projectId);\r\n      // console.log('departmentOptions',departmentOptions);\r\n      const serializedDepartmentOptions = JSON.stringify(departmentOptions);\r\n      const serializedDepartmentOption = JSON.stringify(departmentOption);\r\n      const serializedRecord = JSON.stringify(record);\r\n      // console.log(serializedRecord,\"serializedRecord\");\r\n      // console.log(\"serialized\",serializedDepartmentOption)\r\n      const serializedProjectOptions = JSON.stringify(projectOptions);\r\n      const serializedSelectedApprover = JSON.stringify(selectedApprover);\r\n      const serializedSelectedReviewer = JSON.stringify(selectedReviewer);\r\n      history.push(`/pages/initialMDR?projectCode=${project.code}&mdrCode=${mdrCode}\r\n      &departmentOption=${serializedDepartmentOption}&departmentOptions=${serializedDepartmentOptions}\r\n      &projectOptions=${serializedProjectOptions}&projectId=${projectId}&projectCode=${projectCode}\r\n      &departmentId=${selectedDepartments}&title=${title}&approver=${serializedSelectedApprover}\r\n      &reviewer=${serializedSelectedReviewer}&record=${serializedRecord}`)};\r\n  \r\n\r\n\r\n      const navigateToUpdate = () => {\r\n        if (!title || !projectId ||!selectedReviewer ||!selectedApprover ) {\r\n          // If any required field is missing, display a validation error notification\r\n          notification.error({\r\n            message: 'Validation Error',\r\n            description: 'Please fill in all required fields.',\r\n            style: {\r\n              backgroundColor: '#f5222d', // Red color background\r\n              color: '#fff', // White text color\r\n            },\r\n          });\r\n          return; // Exit early if validation fails\r\n        }\r\n        const project = projectOptions.find((item) => item?.value == projectId);\r\n        // console.log('departmentOptions',departmentOptions);\r\n        const serializedDepartmentOptions = JSON.stringify(departmentOptions);\r\n        const serializedDepartmentOption = JSON.stringify(departmentOption);\r\n        const serializedRecord = JSON.stringify(record);\r\n        // console.log(serializedRecord,\"serializedRecord\");\r\n        // console.log(\"serialized\",serializedDepartmentOption)\r\n        const serializedProjectOptions = JSON.stringify(projectOptions);\r\n        const serializedSelectedApprover = JSON.stringify(selectedApprover);\r\n        const serializedSelectedReviewer = JSON.stringify(selectedReviewer);\r\n        history.push(`/pages/initialMDR?projectCode=${project.code}&mdrCode=${mdrCode}\r\n        &departmentOption=${serializedDepartmentOption}&departmentOptions=${serializedDepartmentOptions}\r\n        &projectOptions=${serializedProjectOptions}&projectId=${projectId}&projectCode=${projectCode}\r\n        &departmentId=${selectedDepartments}&title=${title}&approver=${serializedSelectedApprover}\r\n        &reviewer=${serializedSelectedReviewer}&record=${serializedRecord}`)};\r\n  \r\n        \r\n\r\n\r\n    const navigate = () => {\r\n    const project = record.projectId;\r\n    const serializedDepartmentOptions = JSON.stringify(departmentOptions);\r\n    const serializedDepartmentOption = JSON.stringify(departmentOption);\r\n    const serializedProjectOptions = JSON.stringify(projectOptions);\r\n    const serializedSelectedApprover = JSON.stringify(selectedApprover);\r\n    const serializedSelectedReviewer = JSON.stringify(selectedReviewer);\r\n\r\n    history.push(`/pages/initialMDR?projectCode=${record.projectCode}&mdrCode=${record.mdrCode}\r\n    &departmentOption=${serializedDepartmentOption}&departmentOptions=${serializedDepartmentOptions}\r\n    &projectOptions=${serializedProjectOptions}&projectId=${projectId}&projectCode=${projectCode}\r\n    &departmentId=${selectedDepartments}&title=${title}&approver=${serializedSelectedApprover}&reviewer=${serializedSelectedReviewer}`)};\r\n    \r\n  const documentModalShow = () => {\r\n    setDocumentModalVisible(true);\r\n  };\r\n\r\n  const documentModalShowing = (record) => {\r\n    // console.log(\"record\",record);\r\n    setRecord(record);\r\n    setDocumentModalVisible(true);\r\n  };\r\n  const documentModalCancel = () => {\r\n    setTitle(\"\");\r\n    setProjectId(\"\");\r\n    setDepartmentId(\"\");\r\n    setDocumentModalVisible(false);\r\n  };\r\n\r\n\r\n  const assignModalShow = () => {\r\n    setAssignModalVisible(true);\r\n  };\r\n\r\n  const assignModalCancel = () => {\r\n    setAssignModalVisible(false);\r\n  };\r\nlet count=0;\r\n  const createModalShow = (record) => {\r\n     console.log(\"record\",record)\r\n    setRecord(record)\r\n    setDocumentModalVisible(true);\r\n  };\r\n\r\n  const deleteModalShow = (record) => {\r\n    setRecord(record)\r\n    setDeleteModalVisible(true);\r\n  };\r\n  const deleteModalCancel = () => {\r\n    setDeleteModalVisible(false);\r\n  };\r\n\r\n\r\n  const showModalShow = (record) => {\r\n     console.log('record',record)\r\n    setRecord(record)\r\n    showDocs(record)\r\n    setShowModalVisible(true);\r\n  };\r\n\r\n\r\n  const updateModalShow = (record) => {\r\n    // console.log('record',record)\r\n   setRecord(record)\r\n  //  showDocs(record)\r\n   setUpdateModalVisible(true);\r\n };\r\n\r\n  const editModalShow = (record) => {\r\n    setRecordMDR(record)\r\n    \r\n    updateForm.setFieldsValue({\r\n      id:record.id,\r\n      title:record.title,\r\n      mdrCode: record.mdrCode,\r\n    });\r\n\r\n    setEditModalVisible(true);\r\n  };\r\n\r\n  const editModalCancel = () => {\r\n    setEditModalVisible(false);\r\n  };\r\n  const showModalCancel = () => {\r\n    setShowModalVisible(false);\r\n  };\r\n  const createModalCancel = () => {\r\n    setCreateModalVisible(false);\r\n  };\r\nconst showDocs = async(record)=>{\r\n  // console.log(\"record\",record);\r\n\r\n  fetchDepartmentDocs(record)\r\n}\r\n\r\n\r\n\r\n// const convertToCSV = (data) => {\r\n//   // console.log('data',data);\r\n//   const csvRows = [];\r\n//   data.forEach((obj) => {\r\n//     const key = Object.keys(obj)[0]; // Extract the key\r\n//     // console.log(\"key\",key);\r\n//     const documents = obj[key]; // Extract the array of documents\r\n//     // console.log(\"objKeys\",documents);\r\n\r\n//     csvRows.push(`Key,${key}`);\r\n    \r\n//     const headers = Object.keys(documents[0]);\r\n//     csvRows.push(`\"${headers.join('\",\"')}\"`);\r\n\r\n//     documents.forEach((document) => {\r\n//       const values = headers.map((header) => {\r\n//         const cellValue = document[header];\r\n//         return Array.isArray(cellValue) ? `\"${cellValue.join(',')}\"` : `\"${cellValue}\"`;\r\n//       });\r\n//       csvRows.push(values.join(','));\r\n//     });\r\n\r\n//     csvRows.push('');\r\n//   });\r\n\r\n//   return csvRows.join('\\n');\r\n// };\r\n\r\n\r\n\r\n// const handleExport = async (record) => {\r\n//   await fetchDepartmentDocs(record);\r\n\r\n//   if (docData.length > 0) {\r\n//     // console.log(docData,\"docData\");\r\n//     const csvData = convertToCSV(docData);\r\n\r\n//     // console.log(csvData,\"data for csv\");\r\n//     const blob = new Blob([csvData], { type: 'text/csv' });\r\n//     const url = window.URL.createObjectURL(blob);\r\n//     const link = document.createElement('a');\r\n//     link.href = url;\r\n//     link.setAttribute('download', `MDR ${docData[0].masterDocumentId}.csv`);\r\n//     document.body.appendChild(link);\r\n//     link.click();\r\n//     document.body.removeChild(link);\r\n//   }\r\n// };\r\n\r\n\r\nconst convertToCSV = (data) => {\r\n  const csvRows = [];\r\n\r\n  // Add image URL as the first row\r\n  \r\n  csvRows.push(`Novacon`);\r\n\r\n  data.forEach((obj) => {\r\n    const key = Object.keys(obj)[0];\r\n    const documents = obj[key];\r\n\r\n    csvRows.push(`Key,${key}`);\r\n\r\n    const headers = Object.keys(documents[0]);\r\n    csvRows.push(`\"${headers.join('\",\"')}\"`);\r\n\r\n    documents.forEach((document) => {\r\n      const values = headers.map((header) => {\r\n        const cellValue = document[header];\r\n        return Array.isArray(cellValue) ? `\"${cellValue.join(',')}\"` : `\"${cellValue}\"`;\r\n      });\r\n      csvRows.push(values.join(','));\r\n    });\r\n\r\n    csvRows.push('');\r\n  });\r\n\r\n  return csvRows.join('\\n');\r\n};\r\n\r\nconst handleExport = async (record, imageUrl) => {\r\n  await fetchDepartmentDocs(record);\r\n\r\n  if (docData.length > 0) {\r\n    const csvData = convertToCSV(docData);\r\n\r\n    const blob = new Blob([csvData], { type: 'text/csv' });\r\n    const url = window.URL.createObjectURL(blob);\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.setAttribute('download', `MDR ${docData[0].masterDocumentId}.csv`);\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  }\r\n};\r\n\r\n// const generateHTML = (data, logoBase64) => {\r\n//   const csvContent = convertToCSV(data,logoBase64);\r\n\r\n//   // Construct HTML content\r\n//   const htmlContent = `\r\n//     <!DOCTYPE html>\r\n//     <html lang=\"en\">\r\n//     <head>\r\n//       <meta charset=\"UTF-8\">\r\n//       <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n//       <title>CSV Export</title>\r\n//     </head>\r\n//     <body>\r\n//       <img src=\"${logoBase64}\" alt=\"Logo\">\r\n//       <h1>CSV Data</h1>\r\n//       <pre>${csvContent}</pre>\r\n//     </body>\r\n//     </html>\r\n//   `;\r\n\r\n//   return htmlContent;\r\n// };\r\n// const getImageBase64FromUrl = async (url) => {\r\n//   try {\r\n//     // Fetch the image as a Blob\r\n//     const response = await fetch(url);\r\n//     const blob = await response.blob();\r\n\r\n//     // Convert the Blob to base64\r\n//     return new Promise((resolve, reject) => {\r\n//       const reader = new FileReader();\r\n//       reader.readAsDataURL(blob);\r\n//       reader.onloadend = () => {\r\n//         const base64String = reader.result.split(',')[1];\r\n//         resolve(base64String);\r\n//       };\r\n//       reader.onerror = (error) => {\r\n//         reject(error);\r\n//       };\r\n//     });\r\n//   } catch (error) {\r\n//     console.error('Error fetching or converting image:', error);\r\n//     return null;\r\n//   }\r\n// };\r\n\r\n// const handleExport = async (record, imageUrl) => {\r\n//   await fetchDepartmentDocs(record);\r\n//   const logoBase = await getImageBase64FromUrl(imageUrl); // Added 'await' here\r\n//   if (docData.length > 0) {\r\n//     const htmlContent = generateHTML(docData, logoBase);\r\n\r\n//     // Create a Blob from the HTML content\r\n//     const blob = new Blob([htmlContent], { type: 'text/html' });\r\n\r\n//     // Create a URL for the Blob\r\n//     const url = window.URL.createObjectURL(blob);\r\n\r\n//     // Create a link element and trigger download\r\n//     const link = document.createElement('a');\r\n//     link.href = url;\r\n//     link.setAttribute('download', `MDR ${docData[0].masterDocumentId}.html`);\r\n//     document.body.appendChild(link);\r\n//     link.click();\r\n\r\n//     // Cleanup\r\n//     document.body.removeChild(link);\r\n//   }\r\n// };\r\n\r\n\r\nconst fetchDepartmentDocs = async (record) => {\r\n  try {\r\n    console.log('recorddd',record);\r\n    const response = await axios.get(\r\n      `http://54.81.250.98:8083/api/documents?masterDocumentId=${record.mdrCode}&projectId=${record.projectId}&companyId=${record.companyId}`,\r\n      {\r\n        headers: {\r\n          Authorization: user?.accessToken,\r\n          // Add other headers if needed\r\n        },\r\n      }\r\n    );\r\n//     const organizedData = {};\r\n\r\n// response.data.forEach(item => {\r\n//   const key = item.title.split('-')[2]; // Extract the third part of the title (e.g., 'PM')\r\n  \r\n//   if (!organizedData[key]) {\r\n//     organizedData[key] = [];\r\n//   }\r\n  \r\n//   organizedData[key].push(item.docTitle);\r\n// });\r\n\r\n// const resultArray = Object.keys(organizedData).map(key => ({ [key]: organizedData[key] }));\r\n\r\n// console.log(resultArray,\"result\");\r\nconsole.log(\"response\",response.data);\r\nconst fieldsToRemove = ['version', 'companyId','departmentId','projectId','masterDocumentId','masterDocumentName','content','extension','fileName'];\r\nconst modified = response.data.map((obj) => {\r\n  const {companyId, departmentId, projectId, masterDocumentId, masterDocumentName, content, extension, fileName, ...newObj } = obj;\r\n  return newObj;\r\n});\r\n\r\nconst modifiedData = {};\r\n\r\n// Iterate through the data\r\nmodified.forEach(item => {\r\n  // Extract the key (third part of the title)\r\n  const key = item.title.split('-')[2];\r\n  \r\n  // If the key doesn't exist in modifiedData, create an array for it\r\n  if (!modifiedData[key]) {\r\n    modifiedData[key] = [];\r\n  }\r\n  \r\n  // Add the current item to the array of the corresponding key\r\n  modifiedData[key].push(item);\r\n});\r\n\r\n// Convert the modifiedData object to an array of objects\r\nconst result = Object.keys(modifiedData).map(key => ({ [key]: modifiedData[key] }));\r\n\r\n// console.log(result);\r\n\r\n\r\n    // console.log(response.data,\"received\");\r\n    // setDocData(response.data);\r\n    setDocData(result)\r\n    // console.log(docData,'hiiiiiiiii');/\r\n\r\n  } catch (error) {\r\n    console.error(\"Error fetching documents:\", error?.message);\r\n  }\r\n};\r\nuseEffect(() => {\r\n}, [docData]);\r\n  const assignMDR = async(assignedEmployees,allUsers)=>{\r\n    if (!projectId || !assignedEmployees ) {\r\n      // If any required field is missing, display a validation error notification\r\n      notification.error({\r\n        message: 'Validation Error',\r\n        description: 'Please fill in all required fields.',\r\n        style: {\r\n          backgroundColor: '#f5222d', // Red color background\r\n          color: '#fff', // White text color\r\n        },\r\n      });\r\n      return; // Exit early if validation fails\r\n    }\r\n    try {\r\n      // console.log(allUsers);\r\n      const assignedUser = allUsers.find(user => user.id == assignedEmployees)      \r\n      const project = projectOptions.find((item) => item?.value == projectId);\r\n      const department = departmentOptions.find(\r\n        (item) => item?.value == departmentId\r\n      );\r\n      const response = await axios.post(\r\n        \"http://54.81.250.98:8083/api/documents/mdr\",\r\n        {\r\n          departmentId:assignedUser.departmentId,\r\n          projectId,\r\n          companyId: assignedUser?.companyId,\r\n          authorId: assignedUser?.id,\r\n          authorName: assignedUser?.firstName,\r\n          mdrCode,\r\n          projectCode: project?.code,\r\n          departmentName: assignedUser.department,\r\n          status:\"Assigned\",\r\n          noOfDocuments:0\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: user?.accessToken,\r\n            // Add other headers if needed\r\n          },\r\n        }\r\n      );\r\n      \r\n      setAssignModalVisible(false)\r\n      fetchData()\r\n      notification.success({\r\n        message: 'Successfully Created',\r\n        description: `${response.data.message}`,\r\n        style: {\r\n          backgroundColor: '#52c41a', // Green color background\r\n          color: '#fff', // White text color\r\n        },\r\n      });\r\n    } catch (error) {\r\n      if (error.response?.status === 409) {\r\n        // Conflict error (HTTP 409)\r\n        notification.error({\r\n          message: 'Conflict Error',\r\n          description: 'A MDR with this name or code already exists. Please choose a different name or code.',\r\n          style: {\r\n            backgroundColor: '#f5222d', // Red color background\r\n            color: '#fff', // White text color\r\n          },\r\n        });\r\n      } else {\r\n        // Handle other errors\r\n        notification.error({\r\n          message: 'Error',\r\n          description: 'An error occurred while adding the MDR. Please try again.',\r\n          style: {\r\n            backgroundColor: '#f5222d', // Red color background\r\n            color: '#fff', // White text color\r\n          },\r\n        });\r\n      }\r\n    }\r\n  }\r\n  const handleEdit = async()=>{\r\n    try {\r\n      console.log(recordMDR,\"recordMdr\");\r\n    } catch (error) {\r\n    }\r\n  }\r\n  const addDocument = async () => {\r\n    try {\r\n      const project = projectOptions.find((item) => item?.value == projectId);\r\n      const department = departmentOptions.find(\r\n        (item) => item?.value == departmentId\r\n      );\r\n\r\n      const response = await axios.post(\r\n        \"http://54.81.250.98:8083/api/documents/mdr\",\r\n        {\r\n          title,\r\n          selectedDepartments,\r\n          projectId,\r\n          noOfDocuments,\r\n          companyId: user?.user?.companyId,\r\n          authorId: user?.user?.id,\r\n          authorName: `${user?.user?.firstName} ${user?.user?.lastName}`,\r\n          mdrCode,\r\n          projectCode: project?.code,\r\n          departmentName: department?.label,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: user?.accessToken,\r\n            // Add other headers if needed\r\n          },\r\n        }\r\n      );\r\n      // Handle the response as needed\r\n      console.log(response);\r\n      message.success(response?.data?.message);\r\n      fetchData();\r\n      documentModalCancel();\r\n    } catch (error) {\r\n      // Handle errors\r\n      console.error(\"Error adding documents:\", error);\r\n    }\r\n  };\r\n  const exportCSV = async (record) => {\r\n    try {\r\n      console.log(record);\r\n      const response = await axios.post(\r\n        `http://54.81.250.98:8083/api/documents/export/${record?.id}?companyId=${user?.user?.companyId}`,\r\n        {\r\n          headers: {\r\n            Authorization: user?.accessToken,\r\n            // Add other headers if needed\r\n          },\r\n        }\r\n      );\r\n\r\n      message.success(response?.data?.message);\r\n    } catch (error) {\r\n      console.error(\"Error fetching documents:\", error?.message);\r\n    }\r\n  };\r\n  const mdr = async() =>{\r\n    console.log(record)\r\n      try {\r\n        // console.log(allUsers);\r\n        const projectId = record.projectId\r\n        const projectCode = record.projectCode\r\n        console.log(projectId,projectCode);\r\n        const response = await axios.put(\r\n          `http://54.81.250.98:8083/api/documents/mdr?projectId=${projectId}&projectCode=${projectCode}`,\r\n          {\r\n                title,\r\n                mdrCode,\r\n                status:\"Ongoing\"\r\n          },\r\n          {\r\n            headers: {\r\n              Authorization: user?.accessToken,\r\n              // Add other headers if needed\r\n            },\r\n          }\r\n        );\r\n        setCreateModalVisible(false)\r\n        fetchData()\r\n      } catch (error) {\r\n        console.error(\"Error Updating MDR:\", error);\r\n      }\r\n  }\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://54.81.250.98:8083/api/documents/mdr?companyId=${user?.user?.companyId}&roleId=${user?.user.roleId}`,\r\n        {\r\n          headers: {\r\n            Authorization: user?.accessToken,\r\n            // Add other headers if needed\r\n          },\r\n        }\r\n      );\r\n      \r\n      console.log(response.data,\"response aya\");\r\n      // console.log('mdr data',response.data);\r\n      setProjectCode(response.data.projectCode)\r\n      if (user?.user?.roleId===3 || user?.user?.roleId ===4) {\r\n        const data = response.data.filter(item => item.authorId === user?.user?.id);\r\n        // console.log(\"data\",data);\r\n        setData(data);\r\n        setDataArray(data);\r\n\r\n      }else if(user?.user?.roleId ===2){\r\n        \r\n        console.log(user?.user?.departmentId,'departmentId')\r\n        const data = response.data.filter(item => \r\n          item.departmentId.split(\",\").includes((user?.user?.departmentId))  || item.authorId === user?.user?.id    \r\n          );       \r\nconsole.log('dataaaaaa',data);\r\n        const d =  data.map((d)=>d.projectId)\r\n\r\n        setPro(d)\r\n\r\n        setData(data);\r\n        setDataArray(data);\r\n      }\r\n      else if(user?.user?.roleId ===6){\r\n        \r\n        console.log(user?.user?.departmentId,'departmentId')\r\n        const data = response.data.filter(item => \r\n          item.clientId == user?.user.companyId    \r\n          );       \r\n        console.log('dataaaaaa',data);\r\n        const d =  data.map((d)=>d.projectId)\r\n\r\n        setPro(d)\r\n\r\n        setData(data);\r\n        setDataArray(data);\r\n      }\r\n      else{\r\n        setData(response.data)\r\n        setDataArray(response.data);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching documents:\", error?.message);\r\n    }\r\n  };\r\n\r\n\r\n  \r\n  const getBase64Image = (url) => {\r\n    return new Promise((resolve, reject) => {\r\n      const img = new Image();\r\n      img.crossOrigin = 'Anonymous';\r\n      img.onload = () => {\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = img.width;\r\n        canvas.height = img.height;\r\n        const ctx = canvas.getContext('2d');\r\n        ctx.drawImage(img, 0, 0);\r\n        const dataURL = canvas.toDataURL('image/png');\r\n        resolve(dataURL);\r\n      };\r\n      img.onerror = (error) => {\r\n        reject(error);\r\n      };\r\n      img.src = url;\r\n    });\r\n  };\r\n\r\n  \r\n  \r\n  const exportToCSV = async(record) => {\r\n    const response = await axios.get(\r\n      `http://54.81.250.98:8083/api/documents?masterDocumentId=${record.mdrCode}&projectId=${record.projectId}&companyId=${record.companyId}`,\r\n      {\r\n        headers: {\r\n          Authorization: user?.accessToken,\r\n          // Add other headers if needed\r\n        },\r\n      }\r\n    );\r\n  \r\n    const modified = response.data.map((obj) => {\r\n      const { version, companyId, departmentId, projectId, masterDocumentId, masterDocumentName, content, extension, fileName, createdAt, updatedAt,...newObj } = obj;\r\n      return newObj;\r\n    });\r\n    const formatDate = (date) => {\r\n      if (!date) return '';\r\n      const formattedDate = new Date(date).toISOString().split('T')[0]; // Format as 'YYYY-MM-DD'\r\n      return formattedDate;\r\n    };\r\n  \r\n  \r\n    console.log(modified, \"modified\");\r\n  \r\n    const result = Object.keys(modified[0]).map(key => ({\r\n      header: key.toUpperCase(),\r\n      key: key,\r\n      width: 20\r\n    }));\r\n  \r\n    console.log(result, 'resultresult');\r\n  \r\n    const workbook = new ExcelJS.Workbook();\r\n    const sheet = workbook.addWorksheet(\"MDR Data\");\r\n    sheet.properties.defaultRowHeight = 90;\r\n    sheet.columns = result;\r\n    sheet.getRow(1).font = { bold: true, size: 14 }; // Set font size and make bold\r\n    // Convert the image to Base64 and add it to the sheet\r\n    try {\r\n      const logoBase64 = await getBase64Image(Logo); // Replace with your image URL or path\r\n  \r\n      console.log(logoBase64, 'logoBase64');\r\n  \r\n      const imageId = workbook.addImage({\r\n        base64: logoBase64,\r\n        extension: 'png',\r\n      });\r\n  \r\n      // Add the logo before the headers\r\n      sheet.addImage(imageId, {\r\n        tl: { col: 0, row: 0 },\r\n        ext: { width: 150, height: 50 },\r\n      });\r\n    } catch (error) {\r\n      console.error('Error loading image:', error);\r\n    }\r\n  \r\n    // Now add the headers\r\n  \r\n    // Add data rows after headers\r\n    modified.forEach(item => {\r\n      sheet.addRow({\r\n        assignedBy: userOptionForCSV[item.assignedBy],\r\n        assignedFrom: userOptionForCSV[item.assignedFrom],\r\n        assignedTo: userOptionForCSV[item.assignedTo],\r\n        docTitle: item.docTitle,\r\n        expectedEndedDate: formatDate(item.expectedEndedDate),\r\n        startedDate: formatDate(item.startedDate),\r\n        status: item.status,\r\n        title: item.title,\r\n      });\r\n    });\r\n  \r\n    // Add the footer text with a small logo\r\n    const smallLogoBase64 = await getBase64Image(smallLogo); // Replace with your small logo URL or path\r\n  \r\n    const footerRow = sheet.addRow([\"Powered by Novacon\"]);\r\n    sheet.mergeCells(`A${footerRow.number}:J${footerRow.number}`); // Adjust according to the number of columns\r\n    footerRow.getCell(1).alignment = { horizontal: \"center\" };\r\n    footerRow.getCell(1).font = { bold: true, size: 12 };\r\n  \r\n      \r\n  \r\n      const smallLogoId = workbook.addImage({\r\n        base64: smallLogoBase64,\r\n        extension: 'png',\r\n      });\r\n  \r\n      // Calculate the approximate position within the cell\r\n      const cellStart = sheet.getColumn(1).width * 1.3; // Adjust this factor to fine-tune positioning\r\n      sheet.addImage(smallLogoId, {\r\n        tl: { col: 5, row: footerRow.number - 1, offsetX: cellStart, offsetY: 10 },\r\n        ext: { width: 50, height: 50 },\r\n      });\r\n    // Generate Excel file and trigger download\r\n    workbook.xlsx.writeBuffer().then(data => {\r\n      const blob = new Blob([data], {\r\n        type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\r\n      });\r\n      const url = window.URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.download = 'download.xlsx';\r\n      link.click();\r\n      window.URL.revokeObjectURL(url);\r\n    });\r\n  }\r\n\r\n\r\n  const fetchDepartments = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://54.81.250.98:8083/api/departments?companyId=${user?.user?.companyId}`,\r\n        {\r\n          headers: {\r\n            Authorization: user?.accessToken,\r\n            // Add other headers if needed\r\n          },\r\n        }\r\n      );\r\n      const options = [];\r\n      const option = [];\r\n      for (const item of response?.data) {\r\n        options.push({ value: item?.id, label: item?.title });\r\n        option.push({ value: item?.suffix, label: item?.title });\r\n\r\n      }\r\n\r\n      setDepartmentOptions(options); \r\n      setDepartmentOption(option); \r\n\r\n    } catch (error) {\r\n      console.error(\"Error fetching departments:\", error?.message);\r\n    }\r\n  };\r\n  const fetchProjects = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://54.81.250.98:8083/api/projects?companyId=${user?.user?.companyId}`,\r\n        {\r\n          headers: {\r\n            Authorization: user?.accessToken,\r\n            // Add other headers if needed\r\n          },\r\n        }\r\n      );\r\n      \r\n      // Use Set to store unique titles\r\n      const uniqueTitlesSet = new Set();\r\n  \r\n      const options = response?.data.reduce((acc, item) => {\r\n        // Check if the title is not in the Set\r\n        if (!uniqueTitlesSet.has(item.title)) {\r\n          // Add title to the Set\r\n          uniqueTitlesSet.add(item.title);\r\n  \r\n          // Push the option to the result array\r\n          acc.push({ value: item.id, label: item.title, code: item.code });\r\n        }\r\n  \r\n        return acc;\r\n      }, []);\r\n  \r\n      console.log(response.data);\r\n      setProjects(options); // Assuming the response.data is an array of projects\r\n      console.log(projectOptions);\r\n    } catch (error) {\r\n      console.error(\"Error fetching departments:\", error?.message);\r\n    }\r\n  };\r\n  const fetchAppRev = async (title) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://54.81.250.98:8083/api/documents/establishment?companyId=${user?.user?.companyId}&userId=${user.user.id}&docName=${title}`,\r\n        {\r\n          headers: {\r\n            Authorization: user?.accessToken,\r\n            // Add other headers if needed\r\n          },\r\n        }\r\n      );\r\n        \r\n\r\n\r\n      console.log(response.data,\"received\");\r\n      return response.data;\r\n    \r\n    } catch (error) {\r\n      console.error(\"Error fetching documents:\", error?.message);\r\n    }\r\n  };\r\n  const handleOpen = async (record) => {\r\n    console.log(record, 'record');\r\n    \r\n    const responseData = await fetchAppRev(record.title);\r\n    console.log('helllooo', responseData);\r\n    \r\n    const docName = record.title;\r\n    const url = `${BACKEND_URL}/uploads/${docName}-${record.version}.pdf`;\r\n    console.log(user.user.roleId, user.user.firstName, user);\r\n    \r\n    let allowed = 'false';\r\n    if (responseData) {\r\n      allowed = 'true';\r\n    }\r\n  \r\n    // Check if the document exists\r\n    try {\r\n      const response = await axios.get(\r\n        `http://54.81.250.98:8083/api/documents/checkDocuments?companyId=${user?.user?.companyId}&docName=${docName}&version=${record.version}`,\r\n        {\r\n          headers: {\r\n            Authorization: user?.accessToken,\r\n            // Add other headers if needed\r\n          },\r\n        }\r\n      );\r\n      if (response.data.status) {\r\n        // Document exists, proceed with redirect\r\n        window.location.href = `http://54.81.250.98:3001/react-pdf-highlighter/?docName=${docName}.pdf&url=${url}&allowed=${allowed}&user=${user.user.roleId} ${user.user.firstName}`;\r\n      } else {\r\n        // Document does not exist, show an alert\r\n        message.warning('Document not uploaded yet.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error checking document:', error);\r\n      alert('An error occurred while checking the document.');\r\n    }\r\n  };\r\n  \r\n\r\n  const fetchUsers = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://54.81.250.98:8083/api/users?companyId=${user?.user?.companyId}&roleId=2`,\r\n        {\r\n          headers: {\r\n            Authorization: user?.accessToken,\r\n            // Add other headers if needed\r\n          },\r\n        }\r\n      );\r\n      setAllUsers(response.data)\r\n      console.log(response?.data, \"Users\");\r\n      const options = [];\r\n      const option = [];\r\n      const users = []\r\n\r\n      for (const item of response?.data) {\r\n        var role='Engineer'\r\n        if(item.roleId==1){\r\n           role ='CEO'\r\n          users[item.id] = `${item.firstName} ${item.lastName}`\r\n           options.push({\r\n            value: {id:item?.id,name:item.firstName,departmentId:item?.departmentId,department:item.department},\r\n            label: `${item?.firstName} ${role} `,\r\n          });\r\n        \r\n        } if(item.roleId==2){\r\n          role =`HEAD of ${item.department}`\r\n          users[item.id] = `${item.firstName} ${item.lastName}`\r\n\r\n          options.push({\r\n            value: {id:item?.id,name:item.firstName},\r\n            label: `${item?.firstName} ${role} `,\r\n          });\r\n          option.push({\r\n            value:item?.id,\r\n            label: `${item?.firstName} ${role} `,\r\n          });\r\n       }\r\n       if(item.roleId==3){\r\n        role =`Senior Engineer ${item.department}`\r\n        users[item.id] = `${item.firstName} ${item.lastName}`\r\n\r\n        options.push({\r\n          value: {id:item?.id,name:item.firstName},\r\n          label: `${item?.firstName} ${role} `,\r\n        });\r\n        option.push({\r\n          value:item?.id,\r\n          label: `${item?.firstName} ${role} `,\r\n        });\r\n     } if(item.roleId==4){\r\n       role ='Junior'\r\n       users[item.id] = `${item.firstName} ${item.lastName}`\r\n\r\n    }\r\n    if(item.roleId==5){\r\n      role ='Designer/Draughtsmen'\r\n      users[item.id] = `${item.firstName} ${item.lastName}`\r\n\r\n   } \r\n\r\n   setUserOptions(users)\r\n\r\n      }\r\n      const filteredArray = options.filter(item => item.roleId !== 1);\r\n\r\n      setFilteredUsers(filteredArray)\r\n\r\n      setUserData(options);\r\n      setUserDatalist(option);\r\n\r\n      // console.log('my options',options);\r\n\r\n      // console.log('my users',userOptions);\r\n       // Assuming the response.data is an array of DocumentPermissions\r\n    } catch (error) {\r\n      console.error(\"Error fetching departments:\", error?.message);\r\n    }\r\n  };\r\n  // const handleCheckboxChange = (checkedValues) => {\r\n  //   // Concatenate all selected checkboxes into an array\r\n  //   const concatenatedString = checkedValues.join(' ')\r\n  //   setSelectedDepartments(concatenatedString);\r\n  //   console.log(selectedDepartments);\r\n  // };\r\n  useEffect(() => {\r\n    setUser(JSON.parse(localStorage?.getItem(\"user\")));\r\n    // Fetch data when the component mounts\r\n    fetchDepartments();\r\n    fetchProjects();\r\n    fetchUsers();\r\n    fetchData();\r\n    console.log(data);\r\n    // console.log(user);\r\n  }, []);\r\n  return (\r\n    <>\r\n      <Modal\r\n  title=\"Upload Document\"\r\n  width={400}\r\n  centered\r\n  visible={documentModalVisible}\r\n  onCancel={documentModalCancel}\r\n  footer={null}\r\n  closeIcon={\r\n    <RiCloseFill className=\"remix-icon text-color-black-100\" size={24} />\r\n  }\r\n>\r\n  <Row justify=\"center\" align=\"middle\">\r\n    <Col span={24}>\r\n      <Form layout=\"vertical\" name=\"basic\">\r\n        <Form.Item\r\n          label=\"MDR Title\"\r\n          name=\"docTitle\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input your title\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input\r\n            value={title}\r\n            onChange={(e) => setTitle(e.target.value)}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"MDR Code\"\r\n          name=\"docCode\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input your code\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input\r\n            value={title}\r\n            onChange={(e) => setMdrCode(e.target.value)}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Project Name\"\r\n          name=\"projectName\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please select Project Name\",\r\n            },\r\n          ]}\r\n        >\r\n          <Select\r\n            options={projectOptions}\r\n            value={projectId}\r\n            onChange={(value) => setProjectId(value)}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Add Reviewers\"\r\n          name=\"reviewers\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please select Reviewers Name\",\r\n            },\r\n          ]}\r\n        >\r\n          <Checkbox.Group options={userOptions} value={selectedReviewer} onChange={setSelectedReviewer} />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Add Approvers\"\r\n          name=\"approvers\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please select Approvers Name\",\r\n            },\r\n          ]}\r\n        >\r\n          <Checkbox.Group options={userOptions} value={selectedApprover} onChange={setSelectedApprover} />\r\n        </Form.Item>\r\n\r\n        <Row justify=\"center\">\r\n          <Col span={24} className=\"hp-pr-sm-0 hp-pr-12\">\r\n            <Button block onClick={record ? navigateToMdrTemplateForUpdate : navigateToMdrTemplate} type=\"primary\" htmlType=\"submit\">\r\n              MDR template\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n    </Col>\r\n  </Row>\r\n</Modal>\r\n\r\n      <Modal\r\n  title=\"Delete Project\"\r\n  width={416}\r\n  centered\r\n  visible={deleteModalVisible}\r\n  onCancel={deleteModalCancel}\r\n  footer={null}\r\n  closeIcon={\r\n    <RiCloseFill className=\"remix-icon text-color-black-100\" size={24} />\r\n  }\r\n>\r\n  <div>\r\n    <p>Are you sure you want to delete this?</p>\r\n  </div>\r\n  <Row>\r\n    <Col md={12} span={24} className=\"hp-pr-sm-0 hp-pr-12\">\r\n      <Button\r\n        block\r\n        type=\"primary\"\r\n        danger\r\n        onClick={() => handleDelete(record)}\r\n      >\r\n        Delete\r\n      </Button>\r\n    </Col>\r\n    <Col md={12} span={24} className=\"hp-mt-sm-12 hp-pl-sm-0 hp-pl-12\">\r\n      <Button block onClick={deleteModalCancel}>\r\n        Cancel\r\n      </Button>\r\n    </Col>\r\n  </Row>\r\n</Modal>\r\n\r\n      <Modal\r\n        title=\"Assign Document\"\r\n        width={400}\r\n        centered\r\n        visible={assignModalVisible}\r\n        onCancel={assignModalCancel}\r\n        footer={null}\r\n        closeIcon={\r\n          <RiCloseFill className=\"remix-icon text-color-black-100\" size={24} />\r\n        }\r\n      >\r\n        <Row justify=\"space-between\" align=\"center\">\r\n          <Col span={20}>\r\n            <Form form={AssignForm}  onFinish={handleSubmit}layout=\"vertical\" name=\"basic\">\r\n              <Form.Item\r\n                label=\"Project Name\"\r\n                name=\"projectName\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please select Project Name\",\r\n                  },\r\n                ]}\r\n              >\r\n              <Select\r\n                  options={projectOptions}\r\n                  value={projectId}\r\n                  onChange={(value) => setProjectId(value)}\r\n                />\r\n                </Form.Item>\r\n                <Form.Item\r\n                label=\"Assigned MDR to\"\r\n                name=\"assignMDR\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please Assign MDR\",\r\n                  },\r\n                ]}\r\n              >\r\n              <Select\r\n                  options={userOption}\r\n                  value={assignedEmployees}\r\n                  onChange={(value) => setAssignedEmployees(value)}\r\n                />\r\n                </Form.Item>\r\n              <Row>           \r\n              <Col md={12} span={24} className=\"hp-pr-sm-0 hp-pr-12\">\r\n                  <Button block \r\n                  // onClick={()=>assignMDR(assignedEmployees,allUsers)} \r\n                  type=\"primary\"htmlType=\"submit\">Assigned</Button>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row>\r\n              </Row>\r\n            </Form>\r\n          </Col>\r\n        </Row>\r\n      </Modal>\r\n      \r\n      {/* <Modal\r\n  title=\"MDR Information\"\r\n  width={400}\r\n  centered\r\n  visible={editModalVisible}\r\n  onCancel={editModalCancel}\r\n  footer={null}\r\n  closeIcon={<RiCloseFill className=\"remix-icon text-color-black-100\" size={24} />}\r\n> */}\r\n\r\n  {/* {recordMdr ? (\r\n    <div style={{ textAlign: \"center\" }}>\r\n      <div style={{ textAlign: \"left\" }}>\r\n    <Title level={3}>Title: {recordMdr.title || null}</Title><br />\r\n      <Text strong>Author Name: </Text>\r\n      <Text>{recordMdr.authorName || null}</Text><br />\r\n      <Text strong>Department ID: </Text>\r\n      <Text>{recordMdr.departmentId || null}</Text><br />\r\n      <Text strong>Project Code: </Text>\r\n      <Text>{recordMdr.projectCode || null}</Text><br />\r\n      <Text strong>MDR Code: </Text>\r\n      <Text>{recordMdr.mdrCode || null}</Text><br />\r\n      <Text strong>No of Documents: </Text>\r\n      <Text>{recordMdr.noOfDocuments || null}</Text><br />\r\n      <Text strong>Percentage: </Text>\r\n      <Text>{recordMdr.percentage || null}</Text><br />\r\n\r\n      <Text strong>Status: </Text>\r\n      <Text>{recordMdr.status}</Text><br />\r\n      <Text strong>Created At: </Text>\r\n      <Text>{recordMdr.createdAt}</Text>\r\n      <br /><br />\r\n      </div>\r\n      <Button type=\"primary\" style={{ marginTop: \"16px\" }} onClick={handleEdit}>Add More Documents</Button>\r\n    </div>\r\n  ) : null} */}\r\n\r\n{/* <Row justify=\"space-between\" align=\"center\">\r\n          <Col span={20}>\r\n            <Form layout=\"vertical\" name=\"basic\" form={form} onFinish={handleEdit}>\r\n              <Form.Item\r\n                label=\"MDR Title\"\r\n                name=\"docTitle\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please input your title\",\r\n                  },\r\n                ]}\r\n              >\r\n                \r\n                <Input\r\n                placeholder=\"Enter title\"\r\n                  onChange={(e) => form.setFieldsValue({ title: e.target.value })}\r\n                />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                label=\"MDR Code\"\r\n                name=\"docCode\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please input your code\",\r\n                  },\r\n                ]}\r\n                \r\n              >\r\n                <Input\r\n                placeholder=\"Enter mdr Code\"\r\n                  onChange={(e) => form.setFieldsValue({ mdrCode: e.target.value })}\r\n                />\r\n              </Form.Item>\r\n              \r\n              <Row>           \r\n              <Col md={12} span={24} className=\"hp-pr-sm-0 hp-pr-12\">\r\n                  <Button block onClick={navigateToMdrTemplateForUpdate} type=\"primary\"htmlType=\"submit\">MDR template</Button>\r\n                </Col>\r\n          \r\n              </Row>\r\n            </Form>\r\n          </Col>\r\n        </Row>\r\n</Modal> */}\r\n\r\n\r\n\r\n\r\n<Modal\r\n      title=\"Update MDR\"\r\n      width={416}\r\n      centered\r\n      visible={editModalVisible}\r\n      onCancel={editModalCancel}\r\n      footer={null}\r\n      closeIcon={<RiCloseFill className=\"remix-icon text-color-black-100\" size={24} />}\r\n    >\r\n      <Form\r\n        form={updateForm}\r\n        layout=\"vertical\"\r\n        onFinish={\r\n          handleUpdateSubmit\r\n        } // Function to handle form submission\r\n      >\r\n        <Form.Item\r\n          label=\"Title\"\r\n          name=\"title\"\r\n          rules={[{ required: true, message: 'Please enter the mdr title' }]}\r\n        >\r\n          <Input placeholder=\"Enter MDR title\" onChange={(e) => updateForm.setFieldsValue({ title: e.target.value })}/>\r\n        </Form.Item>\r\n        <Form.Item\r\n          label=\"MDR Code\"\r\n          name=\"mdrCode\"\r\n          rules={[{ required: true, message: 'Please enter mdr code' }]}\r\n        >\r\n          <Input placeholder=\"Enter MDR code\" onChange={(e) => updateForm.setFieldsValue({ mdrCode: e.target.value })}/>\r\n        </Form.Item>\r\n\r\n        <Form.Item>\r\n        <Row md={12} span={24} className=\"hp-pr-sm-0 hp-pr-12\">\r\n          {/* <Button onClick={navigateToUpdate} type=\"primary\"htmlType=\"submit\">MDR template</Button> */}\r\n          <Button type=\"primary\" htmlType=\"submit\" >\r\n            Update\r\n          </Button>     \r\n          </Row>\r\n        </Form.Item>\r\n      </Form>\r\n    </Modal>\r\n\r\n\r\n    <Modal\r\n  title=\"Show MDR Documents\"\r\n  width={400}\r\n  centered\r\n  visible={showModalVisible}\r\n  onCancel={showModalCancel}\r\n  footer={null}\r\n  closeIcon={\r\n    <RiCloseFill className=\"remix-icon text-color-black-100\" size={24} />\r\n  }\r\n>\r\n  <Row justify=\"space-between\" align=\"center\">\r\n    <Col span={20}>\r\n      <div>\r\n        <h3>MDR Documents</h3>\r\n        <ul>\r\n          {docData.map((doc, index) => (\r\n            <li key={index}>\r\n              {Object.entries(doc).map(([key, values]) => (\r\n                <div key={key}>\r\n                  <strong>{key}:</strong>\r\n                  <ul>\r\n                    {values.map((item, itemIndex) => (\r\n                      <li\r\n                        key={itemIndex}\r\n                        style={{\r\n                          display: \"flex\",\r\n                          justifyContent: \"space-between\",\r\n                          alignItems: \"center\",\r\n                          padding:\"4px\"\r\n                        }}\r\n                      >\r\n                        <div>\r\n                        <strong>Document Title:</strong> {item.docTitle} <br />\r\n                    <strong>Code:</strong> {item.title} <br />\r\n                    <strong>Version:</strong> {item.version} <br />\r\n                        </div>\r\n                        <button\r\n                          style={{\r\n                            backgroundColor: \"#1890ff\",\r\n                            color: \"#fff\",\r\n                            border: \"none\",\r\n                            padding: \"3px 10px\",\r\n                            borderRadius: \"4px\",\r\n                            cursor: \"pointer\",\r\n                          }}\r\n                          onClick={() => handleOpen(item)} // Adjust as needed\r\n                        >\r\n                          Open\r\n                        </button>\r\n                      </li>\r\n                    ))}\r\n                  </ul>\r\n                </div>\r\n              ))}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </Col>\r\n  </Row>\r\n</Modal>\r\n\r\n\r\n      <div style={{ textAlign: \"right\", marginBottom: \"16px\" }}>\r\n        {\r\n          user?.user.roleId == 1 &&       \r\n          <Button\r\n          type=\"primary\"\r\n          onClick={documentModalShow}\r\n          // disabled={user?.user?.roleId != 1}\r\n          style={{ marginRight: '10px' }}\r\n        >\r\n          Create MDR Yourself\r\n        </Button>\r\n        }\r\n\r\n        {\r\n                    user?.user.roleId == 1 &&   \r\n                    <Button\r\n                    type=\"primary\"\r\n                    onClick={assignModalShow}\r\n                    // disabled={user?.user?.roleId != 1}\r\n                  >\r\n                    Assign MDR \r\n                  </Button>\r\n              \r\n\r\n        }\r\n\r\n      {mdrTemplateVisible && <MdrTemplate />}\r\n      </div>\r\n      <div style={{ overflowX: \"auto\" }}>\r\n      <Table\r\n        columns={[\r\n          {\r\n            title: \"Document Title\",\r\n            dataIndex: \"title\",\r\n            key: \"title\",\r\n            ...getColumnSearchProps('title'),\r\n\r\n          },\r\n          {\r\n            title: \"Project Code\",\r\n            dataIndex: \"projectCode\",\r\n            key: \"projectCode\",\r\n            ...getColumnSearchProps('projectCode'),\r\n\r\n          },\r\n          {\r\n            title: \"Dept Name\",\r\n            dataIndex: \"departmentName\",\r\n            key: \"departmentName\",\r\n            ...getColumnSearchProps('departmentName'),\r\n\r\n          },\r\n\r\n          {\r\n            title: \"Author Name\",\r\n            dataIndex: \"authorName\",\r\n            key: \"authorName\",\r\n            ...getColumnSearchProps('authorName'),\r\n\r\n          },\r\n          {\r\n            title: \"No of Documents\",\r\n            dataIndex: \"noOfDocuments\",\r\n            key: \"noOfDocuments\",\r\n            sorter: (a, b) => a.noOfDocuments - b.noOfDocuments,\r\n\r\n          },\r\n          {\r\n            title: (\r\n              \"Status\"\r\n            ),\r\n            key: \"status\",\r\n            dataIndex: \"status\",\r\n        \r\n        filters: [\r\n        \r\n              {\r\n                text: 'Initialized',\r\n                value: 'Initialized',\r\n              },\r\n              {\r\n                text: 'Ongoing',\r\n                value: 'Ongoing',\r\n              },\r\n              {\r\n                text: 'Completed',\r\n                value: 'Completed',\r\n              },\r\n            ],\r\n            onFilter:  (value, record) =>record.status === value,\r\n          },\r\n          {\r\n            title: \"Progress Per Document\",\r\n            key: \"percentage\",\r\n            render: (_, record) => (\r\n              <Space>\r\n                {record.percentage !== null ? (\r\n                  <ProgressComp percentage={record.percentage.toFixed(1)} />\r\n                ) : null}\r\n              </Space>\r\n            )\r\n          },\r\n          {\r\n            title: \"Action\",\r\n            key: \"action\",\r\n            render: (_, record) => (\r\n              <>\r\n                <Space size=\"middle\">\r\n\r\n                  {/* <Button\r\n                    key={record?.id}\r\n                    onClick={() => handleExport(record)}\r\n                    disabled={user?.user?.roleId != 1}\r\n                  >\r\n                    Export\r\n                  </Button> */}\r\n\r\n                  {\r\n                  //   <Button\r\n                  //   key={record?.id}\r\n                  //   onClick={()=>exportToCSV(record)}\r\n                  //   disabled={user?.user?.roleId != 1}\r\n                  //   icon={<DocumentScannerOutlined/>}\r\n                  // />\r\n\r\n                  <Tooltip title=\"Export CSV\">\r\n                  <Button\r\n                    size=\"middle\"\r\n                    icon={<DocumentScannerOutlined />}\r\n                    onClick={() => exportToCSV(record)}\r\n                  />\r\n                </Tooltip>\r\n                    // Export CSV \r\n                  /* </Button> */\r\n                  \r\n                  }\r\n                  {user.user.roleId !== 1 && record.authorId === user?.user.id  && record.status ==\"Assigned\" &&(\r\n                    <Button\r\n                      key={record?.id}\r\n                      onClick={() => createModalShow(record)}\r\n                    >\r\n                      Create\r\n                    </Button>\r\n                  )}\r\n    \r\n                  <>\r\n                  {/* <Button\r\n                    key={record?.id}\r\n                    onClick={() => {showModalShow(record)}}\r\n                    icon={<OpenInFullSharp/>}\r\n                  /> */}\r\n                  <Tooltip title=\"View MDR Docs\">\r\n  <Button\r\n    size=\"middle\"\r\n    icon={<OpenInFullSharp />}\r\n    onClick={() => showModalShow(record)}\r\n  />\r\n</Tooltip>\r\n\r\n                  {/* <Button\r\n                    key={record?.id}\r\n                    onClick={() => {editModalShow(record)}}\r\n                    icon={<EditOutlined/>}\r\n                  /> */}\r\n                    {/* Open */}\r\n                  {/* </Button> */}\r\n                  </>\r\n                  <Tooltip title=\"Update MDR\">\r\n  <Button\r\n    size=\"middle\"\r\n    icon={<Edit />}\r\n    disabled={user?.user?.roleId !== 1}\r\n    onClick={() => editModalShow(record)}\r\n  />\r\n</Tooltip>\r\n                  \r\n                   \r\n                            <Tooltip title=\"Delete\">\r\n  <Button\r\n    size=\"middle\"\r\n    icon={<DeleteOutlined />}\r\n    disabled={user?.user?.roleId !== 1}\r\n    onClick={() => deleteModalShow(record)}\r\n  />\r\n</Tooltip>\r\n\r\n\r\n                  {/* <a onClick={() => deleteModalShow(record)} disabled={user?.user?.roleId !== 1}>Delete</a> */}\r\n\r\n                </Space>\r\n\r\n              </>\r\n            ),\r\n          },\r\n\r\n             \r\n        ]}\r\n        size=\"middle\"\r\n        bordered\r\n      title={() => 'All Department Documents'}\r\n      footer={() => 'You may filter MDR'}\r\n        dataSource={data}\r\n        rowClassName={(record) => {\r\n          if (matchingRecord && record.id === matchingRecord.selectedRecord.id) {\r\n            return 'highlighted-row'; // Apply CSS class for highlighting\r\n          }\r\n          return '';\r\n        }}\r\n      /></div>\r\n      <ProtectedAppPage />\r\n    </>\r\n  );\r\n}\r\n\r\n\r\n\r\n// import React, { useEffect, useRef, useState } from \"react\";\r\n// import { FormattedMessage } from \"react-intl\";\r\n// import { useHistory } from 'react-router-dom'; \r\n// import { DownOutlined } from '@ant-design/icons';\r\n// import { SearchOutlined } from '@ant-design/icons';\r\n// import Highlighter from 'react-highlight-words';\r\n// import {\r\n//   notification,\r\n//   Row,\r\n//   Col,\r\n//   Divider,\r\n//   Dropdown,\r\n//   Form,\r\n//   Space,\r\n//   Table,\r\n//   Menu,\r\n//   Select,\r\n//   Tag,\r\n//   Input,\r\n//   DatePicker,\r\n//   TimePicker,\r\n//   Button,\r\n//   Modal,\r\n//   message,\r\n//   Upload,\r\n//   Checkbox,\r\n//   Typography\r\n// } from \"antd\";\r\n// const { Title, Text } = Typography;\r\n// const imageUrl = '..//..//..//assets/images/logo/novacon.png'\r\n// import { Radio } from \"antd\";\r\n// import axios from \"axios\";\r\n// import { RiCloseFill, RiCalendarLine } from \"react-icons/ri\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import { UploadOutlined } from \"@ant-design/icons\";\r\n\r\n// import ReactQuill from \"react-quill\";\r\n// import \"react-quill/dist/quill.snow.css\";\r\n// import ProtectedAppPage from \"../Protected\";\r\n// import { useLocation } from 'react-router-dom';\r\n// import { string } from \"prop-types\";\r\n// import ProgressComp from \"./Progress\";\r\n\r\n\r\n\r\n// const uploadProps = {\r\n//   name: \"file\",\r\n//   action: \"https://run.mocky.io/v3/435e224c-44fb-4773-9faf-380c5e6a2188\",\r\n//   headers: {\r\n//     authorization: \"authorization-text\",\r\n//   },\r\n//   onChange(info) {\r\n//     if (info.file.status !== \"uploading\") {\r\n//       console.log(info.file, info.fileList);\r\n//     }\r\n//     if (info.file.status === \"done\") {\r\n//       message.success(`${info.file.name} file uploaded successfully`);\r\n//     } else if (info.file.status === \"error\") {\r\n//       message.error(`${info.file.name} file upload failed.`);\r\n//     }\r\n//   },\r\n// };\r\n\r\n// export default function MDR() {\r\n//   const [searchText, setSearchText] = useState('');\r\n//   const [searchedColumn, setSearchedColumn] = useState('');\r\n//   const searchInput = useRef(null);\r\n\r\n//   const [documentModalVisible, setDocumentModalVisible] = useState(false);\r\n//   const [assignModalVisible, setAssignModalVisible] = useState(false);\r\n//   const [createModalVisible, setCreateModalVisible] = useState(false);\r\n//   const [showModalVisible, setShowModalVisible] = useState(false);\r\n//   const [editModalVisible, setEditModalVisible] = useState(false);\r\n\r\n//   const [params,setParams] = useState()\r\n\r\n\r\n//   const [title, setTitle] = useState(\"\");\r\n//   const [projectId, setProjectId] = useState(\"\");\r\n//   const [departmentId, setDepartmentId] = useState(\"\");\r\n//   const [mdrCode, setMdrCode] = useState(\"\");\r\n//   const [noOfDocuments, setNoOfDocuments] = useState(\"\");\r\n//   const [pro, setPro] = useState([]);\r\n//   const [status, setStatus] = useState(\"\");\r\n//   const [projectOptions, setProjects] = useState([]);\r\n//   const [user, setUser] = useState(JSON.parse(localStorage?.getItem(\"user\")));\r\n//   const [data, setData] = useState([]);\r\n//   const [dataArray, setDataArray] = useState([]);\r\n\r\n//   const [selectedDepartments, setSelectedDepartments] = useState([]);\r\n//   const [selectedReviewer, setSelectedReviewer] = useState([]);\r\n//   const [docData, setDocData] = useState([]);\r\n\r\n//   const [assignedEmployees, setAssignedEmployees] = useState([]);\r\n//   const [selectedApprover, setSelectedApprover] = useState([]);\r\n//   const[allUsers,setAllUsers] = useState([])\r\n//   const [mdrTemplateVisible, setMdrTemplateVisible] = useState(false);\r\n//   const [departmentOptions,setDepartmentOptions] = useState([])\r\n\r\n//   const [departmentOption,setDepartmentOption] = useState([])\r\n//   const [userOptions, setUserData] = useState([]);\r\n//   const [filteredUsers, setFilteredUsers] = useState([]);\r\n//   const [userOption, setUserDatalist] = useState([]);\r\n//   const [record,setRecord] = useState()\r\n//   const [recordMdr,setRecordMdr] = useState()\r\n\r\n//   const [projectCode,setProjectCode] = useState()\r\n//   const location = useLocation();\r\n//   const { matchingRecord } = location.state || {}\r\n//   // console.log(matchingRecord,\"recordinggggg\");\r\n//   // console.log(location,\"location\");\r\n\r\n//   const handleSearch = (selectedKeys, confirm, dataIndex) => {\r\n//     confirm();\r\n//     setSearchText(selectedKeys[0]);\r\n//     setSearchedColumn(dataIndex);\r\n//   };\r\n//   const handleReset = (clearFilters) => {\r\n//     clearFilters();\r\n//     setSearchText('');\r\n//   };\r\n\r\n//   const handleAll=()=>{\r\n//     setData(dataArray)\r\n//   }\r\n\r\n//   const getColumnSearchProps = (dataIndex) => ({\r\n//     filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters, close }) => (\r\n//       <div style={{ padding: 8 }}>\r\n//         <Input\r\n//           ref={searchInput}\r\n//           placeholder={`Search ${dataIndex}`}\r\n//           value={selectedKeys[0]}\r\n//           onChange={(e) => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n//           onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n//           style={{ marginBottom: 8, display: 'block' }}\r\n//         />\r\n//         <Space>\r\n//           <Button\r\n//             type=\"primary\"\r\n//             onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n//             icon={<SearchOutlined />}\r\n//             size=\"small\"\r\n//             style={{ width: 90 }}\r\n//           >\r\n//             Search\r\n//           </Button>\r\n//           <Button onClick={() => clearFilters && handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n//             Reset\r\n//           </Button>\r\n\r\n//         </Space>\r\n//       </div>\r\n//     ),\r\n//     filterIcon: (filtered) => (\r\n//       <SearchOutlined style={{ color: filtered ? '#1677ff' : undefined }} />\r\n//     ),\r\n//     onFilter: (value, record) =>\r\n//       record[dataIndex].toString().toLowerCase().includes(value.toLowerCase()),\r\n//     onFilterDropdownOpenChange: (visible) => {\r\n//       if (visible) {\r\n//         setTimeout(() => searchInput.current?.select(), 100);\r\n//       }\r\n//     },\r\n//     render: (text) =>\r\n//       searchedColumn === dataIndex ? (\r\n//         <Highlighter\r\n//           highlightStyle={{\r\n//             backgroundColor: '#ffc069',\r\n//             padding: 0,\r\n//           }}\r\n//           searchWords={[searchText]}\r\n//           autoEscape\r\n//           textToHighlight={text ? text.toString() : ''}\r\n//         />\r\n//       ) : (\r\n//         text\r\n//       ),\r\n//   });\r\n\r\n//   const handleCompleted=()=>{\r\n//     const completedData = dataArray.filter(item => item.status === 'completed');\r\n//     setData(completedData)\r\n//   }\r\n//   const handleOnGoing=()=>{\r\n//     const ongoingData = dataArray.filter(item => item.status === 'Ongoing');\r\n//     setData(ongoingData)\r\n\r\n//   }\r\n// const menu = (\r\n//   <Menu>\r\n//     <Menu.Item onClick={() => handleAll()}>All</Menu.Item>\r\n//     <Menu.Item onClick={() => handleCompleted()}>Completed</Menu.Item>\r\n//     <Menu.Item onClick={() => handleOnGoing()}>Ongoing</Menu.Item>\r\n//   </Menu>\r\n// );\r\n//   const showMdrTemplate = () => {\r\n//     setMdrTemplateVisible(true);\r\n//   };\r\n\r\n//   const hideMdrTemplate = () => {\r\n//     setMdrTemplateVisible(false);\r\n//   };\r\n\r\n//   const serializedDepartmentOption = JSON.stringify(departmentOption);\r\n//   // console.log(\"serialized\",serializedDepartmentOption)\r\n\r\n//   const history = useHistory();\r\n//   const navigateToMdrTemplate = () => {\r\n//     if (!title || !projectId ||!selectedReviewer ||!selectedApprover ) {\r\n//       // If any required field is missing, display a validation error notification\r\n//       notification.error({\r\n//         message: 'Validation Error',\r\n//         description: 'Please fill in all required fields.',\r\n//         style: {\r\n//           backgroundColor: '#f5222d', // Red color background\r\n//           color: '#fff', // White text color\r\n//         },\r\n//       });\r\n//       return; // Exit early if validation fails\r\n//     }\r\n//     const project = projectOptions.find((item) => item?.value == projectId);\r\n//     // console.log('departmentOptions',departmentOptions);\r\n//     const serializedDepartmentOptions = JSON.stringify(departmentOptions);\r\n//     const serializedDepartmentOption = JSON.stringify(departmentOption);\r\n//     // console.log(\"serialized\",serializedDepartmentOption)\r\n//     const serializedProjectOptions = JSON.stringify(projectOptions);\r\n//     const serializedSelectedApprover = JSON.stringify(selectedApprover);\r\n//     const serializedSelectedReviewer = JSON.stringify(selectedReviewer);\r\n//     history.push(`/pages/initialMDR?projectCode=${project.code}&mdrCode=${mdrCode}\r\n//     &departmentOption=${serializedDepartmentOption}&departmentOptions=${serializedDepartmentOptions}\r\n//     &projectOptions=${serializedProjectOptions}&projectId=${projectId}&projectCode=${projectCode}\r\n//     &departmentId=${selectedDepartments}&title=${title}&approver=${serializedSelectedApprover}&reviewer=${serializedSelectedReviewer}`)};\r\n    \r\n//     const navigateToMdrTemplateForUpdate = () => {\r\n//       if (!title || !projectId ||!selectedReviewer ||!selectedApprover ) {\r\n//         // If any required field is missing, display a validation error notification\r\n//         notification.error({\r\n//           message: 'Validation Error',\r\n//           description: 'Please fill in all required fields.',\r\n//           style: {\r\n//             backgroundColor: '#f5222d', // Red color background\r\n//             color: '#fff', // White text color\r\n//           },\r\n//         });\r\n//         return; // Exit early if validation fails\r\n//       }\r\n//       const project = projectOptions.find((item) => item?.value == projectId);\r\n//       // console.log('departmentOptions',departmentOptions);\r\n//       const serializedDepartmentOptions = JSON.stringify(departmentOptions);\r\n//       const serializedDepartmentOption = JSON.stringify(departmentOption);\r\n//       const serializedRecord = JSON.stringify(record);\r\n//       // console.log(serializedRecord,\"serializedRecord\");\r\n//       // console.log(\"serialized\",serializedDepartmentOption)\r\n//       const serializedProjectOptions = JSON.stringify(projectOptions);\r\n//       const serializedSelectedApprover = JSON.stringify(selectedApprover);\r\n//       const serializedSelectedReviewer = JSON.stringify(selectedReviewer);\r\n//       history.push(`/pages/initialMDR?projectCode=${project.code}&mdrCode=${mdrCode}\r\n//       &departmentOption=${serializedDepartmentOption}&departmentOptions=${serializedDepartmentOptions}\r\n//       &projectOptions=${serializedProjectOptions}&projectId=${projectId}&projectCode=${projectCode}\r\n//       &departmentId=${selectedDepartments}&title=${title}&approver=${serializedSelectedApprover}\r\n//       &reviewer=${serializedSelectedReviewer}&record=${serializedRecord}`)};\r\n  \r\n\r\n//     const navigate = () => {\r\n//     const project = record.projectId;\r\n//     const serializedDepartmentOptions = JSON.stringify(departmentOptions);\r\n//     const serializedDepartmentOption = JSON.stringify(departmentOption);\r\n//     const serializedProjectOptions = JSON.stringify(projectOptions);\r\n//     const serializedSelectedApprover = JSON.stringify(selectedApprover);\r\n//     const serializedSelectedReviewer = JSON.stringify(selectedReviewer);\r\n\r\n//     history.push(`/pages/initialMDR?projectCode=${record.projectCode}&mdrCode=${record.mdrCode}\r\n//     &departmentOption=${serializedDepartmentOption}&departmentOptions=${serializedDepartmentOptions}\r\n//     &projectOptions=${serializedProjectOptions}&projectId=${projectId}&projectCode=${projectCode}\r\n//     &departmentId=${selectedDepartments}&title=${title}&approver=${serializedSelectedApprover}&reviewer=${serializedSelectedReviewer}`)};\r\n    \r\n//   const documentModalShow = () => {\r\n//     setDocumentModalVisible(true);\r\n//   };\r\n\r\n//   const documentModalShowing = (record) => {\r\n//     // console.log(\"record\",record);\r\n//     setRecord(record);\r\n//     setDocumentModalVisible(true);\r\n//   };\r\n//   const documentModalCancel = () => {\r\n//     setTitle(\"\");\r\n//     setProjectId(\"\");\r\n//     setDepartmentId(\"\");\r\n//     setDocumentModalVisible(false);\r\n//   };\r\n\r\n\r\n//   const assignModalShow = () => {\r\n//     setAssignModalVisible(true);\r\n//   };\r\n\r\n//   const assignModalCancel = () => {\r\n//     setAssignModalVisible(false);\r\n//   };\r\n// let count=0;\r\n//   const createModalShow = (record) => {\r\n//      console.log(\"record\",record)\r\n//     setRecord(record)\r\n//     setDocumentModalVisible(true);\r\n//   };\r\n\r\n//   const showModalShow = (record) => {\r\n//      console.log('record',record)\r\n//     setRecord(record)\r\n//     showDocs(record)\r\n//     setShowModalVisible(true);\r\n//   };\r\n\r\n//   const editModalShow = (record) => {\r\n//     console.log(recordMdr,\"record1\");\r\n//     setRecordMdr(record)\r\n//     setEditModalVisible(true);\r\n//     console.log(recordMdr,\"record2\");\r\n\r\n//   };\r\n\r\n//   const editModalCancel = () => {\r\n\r\n//     setEditModalVisible(false);\r\n//   };\r\n//   const showModalCancel = () => {\r\n//     setShowModalVisible(false);\r\n//   };\r\n//   const createModalCancel = () => {\r\n//     setCreateModalVisible(false);\r\n//   };\r\n// const showDocs = async(record)=>{\r\n//   // console.log(\"record\",record);\r\n\r\n//   fetchDepartmentDocs(record)\r\n// }\r\n\r\n\r\n\r\n// // const convertToCSV = (data) => {\r\n// //   // console.log('data',data);\r\n// //   const csvRows = [];\r\n// //   data.forEach((obj) => {\r\n// //     const key = Object.keys(obj)[0]; // Extract the key\r\n// //     // console.log(\"key\",key);\r\n// //     const documents = obj[key]; // Extract the array of documents\r\n// //     // console.log(\"objKeys\",documents);\r\n\r\n// //     csvRows.push(`Key,${key}`);\r\n    \r\n// //     const headers = Object.keys(documents[0]);\r\n// //     csvRows.push(`\"${headers.join('\",\"')}\"`);\r\n\r\n// //     documents.forEach((document) => {\r\n// //       const values = headers.map((header) => {\r\n// //         const cellValue = document[header];\r\n// //         return Array.isArray(cellValue) ? `\"${cellValue.join(',')}\"` : `\"${cellValue}\"`;\r\n// //       });\r\n// //       csvRows.push(values.join(','));\r\n// //     });\r\n\r\n// //     csvRows.push('');\r\n// //   });\r\n\r\n// //   return csvRows.join('\\n');\r\n// // };\r\n\r\n\r\n\r\n// // const handleExport = async (record) => {\r\n// //   await fetchDepartmentDocs(record);\r\n\r\n// //   if (docData.length > 0) {\r\n// //     // console.log(docData,\"docData\");\r\n// //     const csvData = convertToCSV(docData);\r\n\r\n// //     // console.log(csvData,\"data for csv\");\r\n// //     const blob = new Blob([csvData], { type: 'text/csv' });\r\n// //     const url = window.URL.createObjectURL(blob);\r\n// //     const link = document.createElement('a');\r\n// //     link.href = url;\r\n// //     link.setAttribute('download', `MDR ${docData[0].masterDocumentId}.csv`);\r\n// //     document.body.appendChild(link);\r\n// //     link.click();\r\n// //     document.body.removeChild(link);\r\n// //   }\r\n// // };\r\n\r\n\r\n// const convertToCSV = (data) => {\r\n//   const csvRows = [];\r\n\r\n//   // Add image URL as the first row\r\n  \r\n//   csvRows.push(`Novacon`);\r\n\r\n//   data.forEach((obj) => {\r\n//     const key = Object.keys(obj)[0];\r\n//     const documents = obj[key];\r\n\r\n//     csvRows.push(`Key,${key}`);\r\n\r\n//     const headers = Object.keys(documents[0]);\r\n//     csvRows.push(`\"${headers.join('\",\"')}\"`);\r\n\r\n//     documents.forEach((document) => {\r\n//       const values = headers.map((header) => {\r\n//         const cellValue = document[header];\r\n//         return Array.isArray(cellValue) ? `\"${cellValue.join(',')}\"` : `\"${cellValue}\"`;\r\n//       });\r\n//       csvRows.push(values.join(','));\r\n//     });\r\n\r\n//     csvRows.push('');\r\n//   });\r\n\r\n//   return csvRows.join('\\n');\r\n// };\r\n\r\n// const handleExport = async (record, imageUrl) => {\r\n//   await fetchDepartmentDocs(record);\r\n\r\n//   if (docData.length > 0) {\r\n//     const csvData = convertToCSV(docData);\r\n\r\n//     const blob = new Blob([csvData], { type: 'text/csv' });\r\n//     const url = window.URL.createObjectURL(blob);\r\n//     const link = document.createElement('a');\r\n//     link.href = url;\r\n//     link.setAttribute('download', `MDR ${docData[0].masterDocumentId}.csv`);\r\n//     document.body.appendChild(link);\r\n//     link.click();\r\n//     document.body.removeChild(link);\r\n//   }\r\n// };\r\n\r\n// // const generateHTML = (data, logoBase64) => {\r\n// //   const csvContent = convertToCSV(data,logoBase64);\r\n\r\n// //   // Construct HTML content\r\n// //   const htmlContent = `\r\n// //     <!DOCTYPE html>\r\n// //     <html lang=\"en\">\r\n// //     <head>\r\n// //       <meta charset=\"UTF-8\">\r\n// //       <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n// //       <title>CSV Export</title>\r\n// //     </head>\r\n// //     <body>\r\n// //       <img src=\"${logoBase64}\" alt=\"Logo\">\r\n// //       <h1>CSV Data</h1>\r\n// //       <pre>${csvContent}</pre>\r\n// //     </body>\r\n// //     </html>\r\n// //   `;\r\n\r\n// //   return htmlContent;\r\n// // };\r\n// // const getImageBase64FromUrl = async (url) => {\r\n// //   try {\r\n// //     // Fetch the image as a Blob\r\n// //     const response = await fetch(url);\r\n// //     const blob = await response.blob();\r\n\r\n// //     // Convert the Blob to base64\r\n// //     return new Promise((resolve, reject) => {\r\n// //       const reader = new FileReader();\r\n// //       reader.readAsDataURL(blob);\r\n// //       reader.onloadend = () => {\r\n// //         const base64String = reader.result.split(',')[1];\r\n// //         resolve(base64String);\r\n// //       };\r\n// //       reader.onerror = (error) => {\r\n// //         reject(error);\r\n// //       };\r\n// //     });\r\n// //   } catch (error) {\r\n// //     console.error('Error fetching or converting image:', error);\r\n// //     return null;\r\n// //   }\r\n// // };\r\n\r\n// // const handleExport = async (record, imageUrl) => {\r\n// //   await fetchDepartmentDocs(record);\r\n// //   const logoBase = await getImageBase64FromUrl(imageUrl); // Added 'await' here\r\n// //   if (docData.length > 0) {\r\n// //     const htmlContent = generateHTML(docData, logoBase);\r\n\r\n// //     // Create a Blob from the HTML content\r\n// //     const blob = new Blob([htmlContent], { type: 'text/html' });\r\n\r\n// //     // Create a URL for the Blob\r\n// //     const url = window.URL.createObjectURL(blob);\r\n\r\n// //     // Create a link element and trigger download\r\n// //     const link = document.createElement('a');\r\n// //     link.href = url;\r\n// //     link.setAttribute('download', `MDR ${docData[0].masterDocumentId}.html`);\r\n// //     document.body.appendChild(link);\r\n// //     link.click();\r\n\r\n// //     // Cleanup\r\n// //     document.body.removeChild(link);\r\n// //   }\r\n// // };\r\n\r\n\r\n// const fetchDepartmentDocs = async (record) => {\r\n//   try {\r\n//     // console.log('recorddd',record);\r\n//     const response = await axios.get(\r\n//       `http://54.81.250.98:8083/api/documents?masterDocumentId=${record.mdrCode}&projectId=${record.projectId}&companyId=${record.companyId}`,\r\n//       {\r\n//         headers: {\r\n//           Authorization: user?.accessToken,\r\n//           // Add other headers if needed\r\n//         },\r\n//       }\r\n//     );\r\n// //     const organizedData = {};\r\n\r\n// // response.data.forEach(item => {\r\n// //   const key = item.title.split('-')[2]; // Extract the third part of the title (e.g., 'PM')\r\n  \r\n// //   if (!organizedData[key]) {\r\n// //     organizedData[key] = [];\r\n// //   }\r\n  \r\n// //   organizedData[key].push(item.docTitle);\r\n// // });\r\n\r\n// // const resultArray = Object.keys(organizedData).map(key => ({ [key]: organizedData[key] }));\r\n\r\n// // console.log(resultArray,\"result\");\r\n// console.log(\"response\",response.data);\r\n// const fieldsToRemove = ['version', 'companyId','departmentId','projectId','masterDocumentId','masterDocumentName','content','extension','fileName'];\r\n// const modified = response.data.map((obj) => {\r\n//   const { version, companyId, departmentId, projectId, masterDocumentId, masterDocumentName, content, extension, fileName, ...newObj } = obj;\r\n//   return newObj;\r\n// });\r\n\r\n// const modifiedData = {};\r\n\r\n// // Iterate through the data\r\n// modified.forEach(item => {\r\n//   // Extract the key (third part of the title)\r\n//   const key = item.title.split('-')[2];\r\n  \r\n//   // If the key doesn't exist in modifiedData, create an array for it\r\n//   if (!modifiedData[key]) {\r\n//     modifiedData[key] = [];\r\n//   }\r\n  \r\n//   // Add the current item to the array of the corresponding key\r\n//   modifiedData[key].push(item);\r\n// });\r\n\r\n// // Convert the modifiedData object to an array of objects\r\n// const result = Object.keys(modifiedData).map(key => ({ [key]: modifiedData[key] }));\r\n\r\n// // console.log(result);\r\n\r\n\r\n//     // console.log(response.data,\"received\");\r\n//     // setDocData(response.data);\r\n//     setDocData(result)\r\n//     // console.log(docData,'hiiiiiiiii');/\r\n\r\n//   } catch (error) {\r\n//     console.error(\"Error fetching documents:\", error?.message);\r\n//   }\r\n// };\r\n// useEffect(() => {\r\n// }, [docData]);\r\n//   const assignMDR = async(assignedEmployees,allUsers)=>{\r\n//     if (!projectId || !assignedEmployees ) {\r\n//       // If any required field is missing, display a validation error notification\r\n//       notification.error({\r\n//         message: 'Validation Error',\r\n//         description: 'Please fill in all required fields.',\r\n//         style: {\r\n//           backgroundColor: '#f5222d', // Red color background\r\n//           color: '#fff', // White text color\r\n//         },\r\n//       });\r\n//       return; // Exit early if validation fails\r\n//     }\r\n//     try {\r\n//       // console.log(allUsers);\r\n//       const assignedUser = allUsers.find(user => user.id == assignedEmployees)      \r\n//       const project = projectOptions.find((item) => item?.value == projectId);\r\n//       const department = departmentOptions.find(\r\n//         (item) => item?.value == departmentId\r\n//       );\r\n//       const response = await axios.post(\r\n//         \"http://54.81.250.98:8083/api/documents/mdr\",\r\n//         {\r\n//           departmentId:assignedUser.departmentId,\r\n//           projectId,\r\n//           companyId: assignedUser?.companyId,\r\n//           authorId: assignedUser?.id,\r\n//           authorName: assignedUser?.firstName,\r\n//           mdrCode,\r\n//           projectCode: project?.code,\r\n//           departmentName: assignedUser.department,\r\n//           status:\"Assigned\",\r\n//           noOfDocuments:0\r\n//         },\r\n//         {\r\n//           headers: {\r\n//             Authorization: user?.accessToken,\r\n//             // Add other headers if needed\r\n//           },\r\n//         }\r\n//       );\r\n//       notification.success({\r\n//         message: `${response?.data?.message}`,\r\n//         style: {\r\n//           backgroundColor: '#52c41a', // Red color background\r\n//           color: '#fff', // White text color\r\n//         },\r\n//       }\r\n//       )\r\n//       setAssignModalVisible(false)\r\n//       fetchData()\r\n//     } catch (error) {\r\n//       console.error(\"Error assigning documents:\", error);\r\n//     }\r\n//   }\r\n//   const handleEdit = async()=>{\r\n//     try {\r\n//       console.log(recordMdr,\"recordMdr\");\r\n//     } catch (error) {\r\n      \r\n//     }\r\n//   }\r\n//   const addDocument = async () => {\r\n//     try {\r\n//       const project = projectOptions.find((item) => item?.value == projectId);\r\n//       const department = departmentOptions.find(\r\n//         (item) => item?.value == departmentId\r\n//       );\r\n\r\n//       const response = await axios.post(\r\n//         \"http://54.81.250.98:8083/api/documents/mdr\",\r\n//         {\r\n//           title,\r\n//           selectedDepartments,\r\n//           projectId,\r\n//           noOfDocuments,\r\n//           companyId: user?.user?.companyId,\r\n//           authorId: user?.user?.id,\r\n//           authorName: `${user?.user?.firstName} ${user?.user?.lastName}`,\r\n//           mdrCode,\r\n//           projectCode: project?.code,\r\n//           departmentName: department?.label,\r\n//         },\r\n//         {\r\n//           headers: {\r\n//             Authorization: user?.accessToken,\r\n//             // Add other headers if needed\r\n//           },\r\n//         }\r\n//       );\r\n//       // Handle the response as needed\r\n//       console.log(response);\r\n//       message.success(response?.data?.message);\r\n//       fetchData();\r\n//       documentModalCancel();\r\n//     } catch (error) {\r\n//       // Handle errors\r\n//       console.error(\"Error adding documents:\", error);\r\n//     }\r\n//   };\r\n//   const exportCSV = async (record) => {\r\n//     try {\r\n//       console.log(record);\r\n//       const response = await axios.post(\r\n//         `http://54.81.250.98:8083/api/documents/export/${record?.id}?companyId=${user?.user?.companyId}`,\r\n//         {\r\n//           headers: {\r\n//             Authorization: user?.accessToken,\r\n//             // Add other headers if needed\r\n//           },\r\n//         }\r\n//       );\r\n\r\n//       message.success(response?.data?.message);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching documents:\", error?.message);\r\n//     }\r\n//   };\r\n//   const mdr = async() =>{\r\n//     console.log(record)\r\n//       try {\r\n//         // console.log(allUsers);\r\n//         const projectId = record.projectId\r\n//         const projectCode = record.projectCode\r\n//         console.log(projectId,projectCode);\r\n//         const response = await axios.put(\r\n//           `http://54.81.250.98:8083/api/documents/mdr?projectId=${projectId}&projectCode=${projectCode}`,\r\n//           {\r\n//                 title,\r\n//                 mdrCode,\r\n//                 status:\"Ongoing\"\r\n//           },\r\n//           {\r\n//             headers: {\r\n//               Authorization: user?.accessToken,\r\n//               // Add other headers if needed\r\n//             },\r\n//           }\r\n//         );\r\n//         setCreateModalVisible(false)\r\n//         fetchData()\r\n//       } catch (error) {\r\n//         console.error(\"Error Updating MDR:\", error);\r\n//       }\r\n//   }\r\n//   const fetchData = async () => {\r\n//     try {\r\n//       const response = await axios.get(\r\n//         `http://54.81.250.98:8083/api/documents/mdr?companyId=${user?.user?.companyId}`,\r\n//         {\r\n//           headers: {\r\n//             Authorization: user?.accessToken,\r\n//             // Add other headers if needed\r\n//           },\r\n//         }\r\n//       );\r\n\r\n//       console.log(response.data,\"response aya\");\r\n//       // console.log('mdr data',response.data);\r\n//       setProjectCode(response.data.projectCode)\r\n//       if (user?.user?.roleId===3 || user?.user?.roleId ===4) {\r\n//         const data = response.data.filter(item => item.authorId === user?.user?.id);\r\n//         // console.log(\"data\",data);\r\n        \r\n//         const filter = data.filter(item=>item.delete==0)\r\n//         setData(filter);\r\n//         setDataArray(data);\r\n\r\n//       }else if(user?.user?.roleId ===2){\r\n        \r\n//         console.log(user?.user?.departmentId,'departmentId')\r\n//         const data = response.data.filter(item => \r\n//           item.departmentId.split(\",\").includes((user?.user?.departmentId))  || item.authorId === user?.user?.id    \r\n//           );       \r\n// console.log('dataaaaaa',data);\r\n//         const d =  data.map((d)=>d.projectId)\r\n\r\n//         setPro(d)\r\n//         const filter = data.filter(item=>item.delete==0)\r\n//         setData(filter);\r\n//         setDataArray(data);\r\n//       }\r\n//       else{\r\n//         const data = response.data\r\n//         const filter = data.filter(item=>item.delete==0)\r\n//         setData(filter);\r\n//         setDataArray(response.data);\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching documents:\", error?.message);\r\n//     }\r\n//   };\r\n  \r\n//   const fetchDepartments = async () => {\r\n//     try {\r\n//       const response = await axios.get(\r\n//         `http://54.81.250.98:8083/api/departments?companyId=${user?.user?.companyId}`,\r\n//         {\r\n//           headers: {\r\n//             Authorization: user?.accessToken,\r\n//             // Add other headers if needed\r\n//           },\r\n//         }\r\n//       );\r\n//       const options = [];\r\n//       const option = [];\r\n//       for (const item of response?.data) {\r\n//         options.push({ value: item?.id, label: item?.title });\r\n//         option.push({ value: item?.suffix, label: item?.title });\r\n\r\n//       }\r\n\r\n//       setDepartmentOptions(options); \r\n//       setDepartmentOption(option); \r\n\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching departments:\", error?.message);\r\n//     }\r\n//   };\r\n//   const fetchProjects = async () => {\r\n//     try {\r\n//       const response = await axios.get(\r\n//         `http://54.81.250.98:8083/api/projects?companyId=${user?.user?.companyId}`,\r\n//         {\r\n//           headers: {\r\n//             Authorization: user?.accessToken,\r\n//             // Add other headers if needed\r\n//           },\r\n//         }\r\n//       );\r\n  \r\n//       // Use Set to store unique titles\r\n//       const uniqueTitlesSet = new Set();\r\n  \r\n//       const options = response?.data.reduce((acc, item) => {\r\n//         // Check if the title is not in the Set\r\n//         if (!uniqueTitlesSet.has(item.title)) {\r\n//           // Add title to the Set\r\n//           uniqueTitlesSet.add(item.title);\r\n  \r\n//           // Push the option to the result array\r\n//           acc.push({ value: item.id, label: item.title, code: item.code });\r\n//         }\r\n  \r\n//         return acc;\r\n//       }, []);\r\n  \r\n//       console.log(response.data);\r\n//       setProjects(options); // Assuming the response.data is an array of projects\r\n//       console.log(projectOptions);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching departments:\", error?.message);\r\n//     }\r\n//   };\r\n\r\n//   const handleDelete = async (record) => {\r\n//     // Your delete logic here\r\n//     const id = record.id\r\n//     console.log(id);\r\n//     const response = await axios.delete(\r\n//       `http://54.81.250.98:8083/api/users?delete=4&recordId=${record.id}`,\r\n//       {\r\n//         headers: {\r\n//           Authorization: user?.accessToken,\r\n//           // Add other headers if needed\r\n//         },\r\n//       }\r\n//     );\r\n//   }\r\n\r\n//   const fetchUsers = async () => {\r\n//     try {\r\n//       const response = await axios.get(\r\n//         `http://54.81.250.98:8083/api/users?companyId=${user?.user?.companyId}&roleId=2`,\r\n//         {\r\n//           headers: {\r\n//             Authorization: user?.accessToken,\r\n//             // Add other headers if needed\r\n//           },\r\n//         }\r\n//       );\r\n//       setAllUsers(response.data)\r\n//       console.log(response?.data, \"Users\");\r\n//       const options = [];\r\n//       const option = [];\r\n\r\n//       for (const item of response?.data) {\r\n//         var role='Engineer'\r\n//         if(item.roleId==1){\r\n//            role ='CEO'\r\n\r\n//            options.push({\r\n//             value: {id:item?.id,name:item.firstName,departmentId:item?.departmentId,department:item.department},\r\n//             label: `${item?.firstName} ${role} `,\r\n//           });\r\n        \r\n//         } if(item.roleId==2){\r\n//           role =`HEAD of ${item.department}`\r\n//           options.push({\r\n//             value: {id:item?.id,name:item.firstName},\r\n//             label: `${item?.firstName} ${role} `,\r\n//           });\r\n//           option.push({\r\n//             value:item?.id,\r\n//             label: `${item?.firstName} ${role} `,\r\n//           });\r\n//        }\r\n//        if(item.roleId==3){\r\n//         role =`Senior Engineer ${item.department}`\r\n//         options.push({\r\n//           value: {id:item?.id,name:item.firstName},\r\n//           label: `${item?.firstName} ${role} `,\r\n//         });\r\n//         option.push({\r\n//           value:item?.id,\r\n//           label: `${item?.firstName} ${role} `,\r\n//         });\r\n//      } if(item.roleId==4){\r\n//        role ='Junior'\r\n//     }\r\n//     if(item.roleId==5){\r\n//       role ='Designer/Draughtsmen'\r\n//    } \r\n\r\n//       }\r\n//       const filteredArray = options.filter(item => item.roleId !== 1);\r\n\r\n//       setFilteredUsers(filteredArray)\r\n\r\n//       setUserData(options);\r\n//       setUserDatalist(option);\r\n\r\n//       // console.log('my options',options);\r\n\r\n//       // console.log('my users',userOptions);\r\n//        // Assuming the response.data is an array of DocumentPermissions\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching departments:\", error?.message);\r\n//     }\r\n//   };\r\n//   // const handleCheckboxChange = (checkedValues) => {\r\n//   //   // Concatenate all selected checkboxes into an array\r\n//   //   const concatenatedString = checkedValues.join(' ')\r\n//   //   setSelectedDepartments(concatenatedString);\r\n//   //   console.log(selectedDepartments);\r\n//   // };\r\n//   useEffect(() => {\r\n//     setUser(JSON.parse(localStorage?.getItem(\"user\")));\r\n//     // Fetch data when the component mounts\r\n//     fetchDepartments();\r\n//     fetchProjects();\r\n//     fetchUsers();\r\n//     fetchData();\r\n//     console.log(data);\r\n//     // console.log(user);\r\n//   }, []);\r\n//   return (\r\n//     <>\r\n//       <Modal\r\n//         title=\"Upload Document\"\r\n//         width={400}\r\n//         centered\r\n//         visible={documentModalVisible}\r\n//         onCancel={documentModalCancel}\r\n//         footer={null}\r\n//         closeIcon={\r\n//           <RiCloseFill className=\"remix-icon text-color-black-100\" size={24} />\r\n//         }\r\n//       >\r\n//         <Row justify=\"space-between\" align=\"center\">\r\n//           <Col span={20}>\r\n//             <Form layout=\"vertical\" name=\"basic\">\r\n//               <Form.Item\r\n//                 label=\"MDR Title\"\r\n//                 name=\"docTitle\"\r\n//                 rules={[\r\n//                   {\r\n//                     required: true,\r\n//                     message: \"Please input your title\",\r\n//                   },\r\n//                 ]}\r\n//               >\r\n//                 <Input\r\n//                   value={title}\r\n//                   onChange={(e) => setTitle(e.target.value)}\r\n//                 />\r\n//               </Form.Item>\r\n\r\n//               <Form.Item\r\n//                 label=\"MDR Code\"\r\n//                 name=\"docCode\"\r\n//                 rules={[\r\n//                   {\r\n//                     required: true,\r\n//                     message: \"Please input your code\",\r\n//                   },\r\n//                 ]}\r\n//               >\r\n//                 <Input\r\n//                   value={title}\r\n//                   onChange={(e) => setMdrCode(e.target.value)}\r\n//                 />\r\n//               </Form.Item>\r\n\r\n\r\n//               <Form.Item\r\n//                 label=\"Project Name\"\r\n//                 name=\"projectName\"\r\n//                 rules={[\r\n//                   {\r\n//                     required: true,\r\n//                     message: \"Please select Project Name\",\r\n//                   },\r\n//                 ]}\r\n//               >\r\n//               <Select\r\n//                   options={projectOptions}\r\n//                   value={projectId}\r\n//                   onChange={(value) => setProjectId(value)}\r\n//                 />              </Form.Item>\r\n//               <Form.Item\r\n//                 label=\"Add Reviewers\"\r\n//                 name=\"reviewers\"\r\n//                 rules={[\r\n//                   {\r\n//                     required: true,\r\n//                     message: \"Please select Reviewers Name\",\r\n//                   },\r\n//                 ]}\r\n//               >\r\n//                 <Checkbox.Group options={userOptions} value={selectedReviewer} onChange={setSelectedReviewer} />\r\n\r\n//               </Form.Item> <Form.Item\r\n//                 label=\"Add Approvers\"\r\n//                 name=\"approvers\"\r\n//                 rules={[\r\n//                   {\r\n//                     required: true,\r\n//                     message: \"Please select Approvers Name\",\r\n//                   },\r\n//                 ]}\r\n//               >\r\n//                <Checkbox.Group options={userOptions} value={selectedApprover} onChange={setSelectedApprover} />\r\n//               </Form.Item>\r\n//               <Row>           \r\n//               <Col md={12} span={24} className=\"hp-pr-sm-0 hp-pr-12\">\r\n//                   <Button block onClick={record?navigateToMdrTemplateForUpdate:navigateToMdrTemplate} type=\"primary\"htmlType=\"submit\">MDR template</Button>\r\n//                 </Col>\r\n//                 {/* <Col md={12} span={24} className=\"hp-pr-sm-0 hp-pr-12\">\r\n//                   <Button block onClick={navigateToMdrTemplate} type=\"primary\"htmlType=\"submit\">Create Custom</Button>\r\n//                 </Col> */}\r\n//               </Row>\r\n//             </Form>\r\n//           </Col>\r\n//         </Row>\r\n//       </Modal>\r\n\r\n//       <Modal\r\n//         title=\"Assign Document\"\r\n//         width={400}\r\n//         centered\r\n//         visible={assignModalVisible}\r\n//         onCancel={assignModalCancel}\r\n//         footer={null}\r\n//         closeIcon={\r\n//           <RiCloseFill className=\"remix-icon text-color-black-100\" size={24} />\r\n//         }\r\n//       >\r\n//         <Row justify=\"space-between\" align=\"center\">\r\n//           <Col span={20}>\r\n//             <Form layout=\"vertical\" name=\"basic\">\r\n//               <Form.Item\r\n//                 label=\"Project Name\"\r\n//                 name=\"projectName\"\r\n//                 rules={[\r\n//                   {\r\n//                     required: true,\r\n//                     message: \"Please select Project Name\",\r\n//                   },\r\n//                 ]}\r\n//               >\r\n//               <Select\r\n//                   options={projectOptions}\r\n//                   value={projectId}\r\n//                   onChange={(value) => setProjectId(value)}\r\n//                 />\r\n//                 </Form.Item>\r\n//                 <Form.Item\r\n//                 label=\"Assigned MDR to\"\r\n//                 name=\"assignMDR\"\r\n//                 rules={[\r\n//                   {\r\n//                     required: true,\r\n//                     message: \"Please Assign MDR\",\r\n//                   },\r\n//                 ]}\r\n//               >\r\n//               <Select\r\n//                   options={userOption}\r\n//                   value={assignedEmployees}\r\n//                   onChange={(value) => setAssignedEmployees(value)}\r\n//                 />\r\n//                 </Form.Item>\r\n//               <Row>           \r\n//               <Col md={12} span={24} className=\"hp-pr-sm-0 hp-pr-12\">\r\n//                   <Button block onClick={()=>assignMDR(assignedEmployees,allUsers)} type=\"primary\"htmlType=\"submit\">Assigned</Button>\r\n//                 </Col>\r\n//               </Row>\r\n\r\n//               <Row>\r\n//               </Row>\r\n//             </Form>\r\n//           </Col>\r\n//         </Row>\r\n//       </Modal>\r\n      \r\n//       <Modal\r\n//   title=\"MDR Information\"\r\n//   width={400}\r\n//   centered\r\n//   visible={editModalVisible}\r\n//   onCancel={editModalCancel}\r\n//   footer={null}\r\n//   closeIcon={<RiCloseFill className=\"remix-icon text-color-black-100\" size={24} />}\r\n// >\r\n\r\n//   {recordMdr ? (\r\n//     <div style={{ textAlign: \"center\" }}>\r\n//       <div style={{ textAlign: \"left\" }}>\r\n//     <Title level={3}>Title: {recordMdr.title || null}</Title><br />\r\n//       <Text strong>Author Name: </Text>\r\n//       <Text>{recordMdr.authorName || null}</Text><br />\r\n//       <Text strong>Department ID: </Text>\r\n//       <Text>{recordMdr.departmentId || null}</Text><br />\r\n//       <Text strong>Project Code: </Text>\r\n//       <Text>{recordMdr.projectCode || null}</Text><br />\r\n//       <Text strong>MDR Code: </Text>\r\n//       <Text>{recordMdr.mdrCode || null}</Text><br />\r\n//       <Text strong>No of Documents: </Text>\r\n//       <Text>{recordMdr.noOfDocuments || null}</Text><br />\r\n//       <Text strong>Percentage: </Text>\r\n//       <Text>{recordMdr.percentage || null}</Text><br />\r\n\r\n//       <Text strong>Status: </Text>\r\n//       <Text>{recordMdr.status}</Text><br />\r\n//       <Text strong>Created At: </Text>\r\n//       <Text>{recordMdr.createdAt}</Text>\r\n//       <br /><br />\r\n//       </div>\r\n//       <Button type=\"primary\" style={{ marginTop: \"16px\" }} onClick={handleEdit}>Add More Documents</Button>\r\n//     </div>\r\n//   ) : null}\r\n// </Modal>\r\n\r\n\r\n\r\n\r\n//       <Modal\r\n//         title=\"Show MDR Documents \"\r\n//         width={400}\r\n//         centered\r\n//         visible={showModalVisible}\r\n//         onCancel={showModalCancel}\r\n//         footer={null}\r\n//         closeIcon={\r\n//           <RiCloseFill className=\"remix-icon text-color-black-100\" size={24} />\r\n//         }\r\n//       >\r\n//         <Row justify=\"space-between\" align=\"center\">\r\n//           <Col span={20}>\r\n//           <div>\r\n//           <h3>MDR Documents</h3>\r\n//           {/* <ul>\r\n//             {selectedRows.map((row, index) => (\r\n//               <li key={index}>{row+1}</li>\r\n//             ))}\r\n//           </ul> */}\r\n//     <ul>\r\n//       {docData.map((doc, index) => (\r\n//         <li key={index}>\r\n//           {Object.entries(doc).map(([key, values]) => (\r\n//             <div key={key}>\r\n//               <strong>{key}:</strong>\r\n//               <ul>\r\n//                 {values.map((item, itemIndex) => (\r\n//                   <li key={itemIndex}>\r\n//                     <strong>Document Title:</strong> {item.docTitle} <br />\r\n//                     {/* Add other properties as needed */}\r\n//                   </li>\r\n//                 ))}\r\n//               </ul>\r\n//             </div>\r\n//           ))}\r\n//         </li>\r\n//       ))}\r\n//     </ul>        </div>\r\n//           </Col>\r\n//         </Row>\r\n//       </Modal>\r\n//       <div style={{ textAlign: \"right\", marginBottom: \"16px\" }}>\r\n//         {\r\n//           user?.user.roleId == 1 &&       \r\n//           <Button\r\n//           type=\"primary\"\r\n//           onClick={documentModalShow}\r\n//           // disabled={user?.user?.roleId != 1}\r\n//           style={{ marginRight: '10px' }}\r\n//         >\r\n//           Create MDR Yourself\r\n//         </Button>\r\n//         }\r\n\r\n//         {\r\n//                     user?.user.roleId == 1 &&   \r\n//                     <Button\r\n//                     type=\"primary\"\r\n//                     onClick={assignModalShow}\r\n//                     // disabled={user?.user?.roleId != 1}\r\n//                   >\r\n//                     Assign MDR \r\n//                   </Button>\r\n              \r\n\r\n//         }\r\n\r\n//       {mdrTemplateVisible && <MdrTemplate />}\r\n//       </div>\r\n//       <div style={{ overflowX: \"auto\" }}>\r\n//       <Table\r\n//         columns={[\r\n//           {\r\n//             title: \"Document Title\",\r\n//             dataIndex: \"title\",\r\n//             key: \"title\",\r\n//             ...getColumnSearchProps('title'),\r\n\r\n//           },\r\n//           {\r\n//             title: \"Project Code\",\r\n//             dataIndex: \"projectCode\",\r\n//             key: \"projectCode\",\r\n//             ...getColumnSearchProps('projectCode'),\r\n\r\n//           },\r\n//           {\r\n//             title: \"Dept Name\",\r\n//             dataIndex: \"departmentName\",\r\n//             key: \"departmentName\",\r\n//             ...getColumnSearchProps('departmentName'),\r\n\r\n//           },\r\n\r\n//           {\r\n//             title: \"Author Name\",\r\n//             dataIndex: \"authorName\",\r\n//             key: \"authorName\",\r\n//             ...getColumnSearchProps('authorName'),\r\n\r\n//           },\r\n//           {\r\n//             title: \"No of Documents\",\r\n//             dataIndex: \"noOfDocuments\",\r\n//             key: \"noOfDocuments\",\r\n//             sorter: (a, b) => a.noOfDocuments - b.noOfDocuments,\r\n\r\n//           },\r\n//           {\r\n//             title: (\r\n//               \"Status\"\r\n//             ),\r\n//             key: \"status\",\r\n//             dataIndex: \"status\",\r\n        \r\n//         filters: [\r\n        \r\n//               {\r\n//                 text: 'Initialized',\r\n//                 value: 'Initialized',\r\n//               },\r\n//               {\r\n//                 text: 'Ongoing',\r\n//                 value: 'Ongoing',\r\n//               },\r\n//               {\r\n//                 text: 'Completed',\r\n//                 value: 'Completed',\r\n//               },\r\n//             ],\r\n//             onFilter:  (value, record) =>record.status === value,\r\n//           },\r\n          \r\n//           {\r\n//             title: \"Action\",\r\n//             key: \"action\",\r\n//             render: (_, record) => (\r\n//               <>\r\n//                 <Space size=\"middle\">\r\n//                 <Button\r\n//                     onClick={() => handleDelete(record)}\r\n//                   >\r\n//                     Delete\r\n//                   </Button>\r\n//                   <Button\r\n//                     key={record?.id}\r\n//                     onClick={() => handleExport(record)}\r\n//                     disabled={user?.user?.roleId != 1}\r\n//                   >\r\n//                     Export\r\n//                   </Button>\r\n//                   {user.user.roleId !== 1 && record.authorId === user?.user.id  && record.status ==\"Assigned\" &&(\r\n//                     <Button\r\n//                       key={record?.id}\r\n//                       onClick={() => createModalShow(record)}\r\n//                     >\r\n//                       Create\r\n//                     </Button>\r\n//                   )}\r\n    \r\n//                   {user.user.roleId==1 &&       \r\n//                   <>\r\n//                   <Button\r\n//                     key={record?.id}\r\n//                     onClick={() => {showModalShow(record)                      \r\n//                     }}\r\n//                   >\r\n//                     Open\r\n//                   </Button>\r\n//                   {/* <Button\r\n//                     key={record?.id}\r\n//                     onClick={() => {editModalShow(record)                      \r\n//                     }}\r\n//                   >\r\n//                     Edit\r\n//                   </Button> */}\r\n//                   </>\r\n                  \r\n//                   }       \r\n//                 </Space>\r\n//               </>\r\n//             ),\r\n//           },\r\n//           {\r\n//             title: \"Progress Per Document\",\r\n//             key: \"percentage\",\r\n//             render: (_, record) => (\r\n//               <Space>\r\n//                 {record.percentage !== null ? (\r\n//                   <ProgressComp percentage={record.percentage.toFixed(1)} />\r\n//                 ) : null}\r\n//               </Space>\r\n//             )\r\n//           },\r\n             \r\n//         ]}\r\n//         size=\"middle\"\r\n//         bordered\r\n//       title={() => 'All Department Documents'}\r\n//       footer={() => 'You may filter MDR'}\r\n//         dataSource={data}\r\n//         rowClassName={(record) => {\r\n//           if (matchingRecord && record.id === matchingRecord.selectedRecord.id) {\r\n//             return 'highlighted-row'; // Apply CSS class for highlighting\r\n//           }\r\n//           return '';\r\n//         }}\r\n//       /></div>\r\n//       <ProtectedAppPage />\r\n//     </>\r\n//   );\r\n// }\r\n"],"names":["ProtectedAppPage","_localStorage","isLogIn","localStorage","getItem","console","log","_jsx","Redirect","to","_ref","percentage","strokeColor","Row","justify","align","style","width","children","Progress","percent","steps","createSvgIcon","d","Title","Text","Typography","MDR","searchText","setSearchText","useState","searchedColumn","setSearchedColumn","searchInput","useRef","form","Form","useForm","updateForm","documentModalVisible","setDocumentModalVisible","assignModalVisible","setAssignModalVisible","createModalVisible","setCreateModalVisible","showModalVisible","setShowModalVisible","editModalVisible","setEditModalVisible","AssignForm","CreateForm","title","setTitle","projectId","setProjectId","departmentId","setDepartmentId","mdrCode","setMdrCode","noOfDocuments","setNoOfDocuments","pro","setPro","status","setStatus","projectOptions","setProjects","user","setUser","JSON","parse","data","setData","dataArray","setDataArray","selectedDepartments","setSelectedDepartments","selectedReviewer","setSelectedReviewer","docData","setDocData","assignedEmployees","setAssignedEmployees","selectedApprover","setSelectedApprover","allUsers","setAllUsers","mdrTemplateVisible","setMdrTemplateVisible","departmentOptions","setDepartmentOptions","departmentOption","setDepartmentOption","userOptions","setUserData","filteredUsers","setFilteredUsers","userOptionForCSV","setUserOptions","userOption","setUserDatalist","record","setRecord","updateModalVisible","setUpdateModalVisible","deleteModalVisible","setDeleteModalVisible","recordMdr","setRecordMdr","recordMDR","setRecordMDR","projectCode","setProjectCode","location","useLocation","matchingRecord","state","handleUpdate","async","response","axios","concat","companyId","getFieldValue","headers","Authorization","accessToken","message","success","editModalCancel","fetchData","error","handleSearch","selectedKeys","confirm","dataIndex","getColumnSearchProps","filterDropdown","setSelectedKeys","clearFilters","close","_jsxs","padding","Input","ref","placeholder","value","onChange","e","target","onPressEnter","marginBottom","display","Space","Button","type","onClick","icon","SearchOutlined","size","handleReset","filterIcon","filtered","color","undefined","onFilter","toString","toLowerCase","includes","onFilterDropdownOpenChange","visible","setTimeout","_searchInput$current","current","select","render","text","Highlighter","highlightStyle","backgroundColor","searchWords","autoEscape","textToHighlight","history","stringify","useHistory","documentModalCancel","deleteModalCancel","showDocs","fetchDepartmentDocs","modified","map","obj","masterDocumentId","masterDocumentName","content","extension","fileName","newObj","modifiedData","forEach","item","key","split","push","result","Object","keys","useEffect","assignMDR","assignedUser","find","id","project","authorId","authorName","firstName","code","departmentName","department","notification","description","_error$response","_user$user6","_user$user7","_user$user8","_user$user10","_user$user14","roleId","filter","_user$user9","_user$user11","_user$user12","_user$user13","_user$user15","clientId","getBase64Image","url","Promise","resolve","reject","img","Image","crossOrigin","onload","canvas","document","createElement","height","getContext","drawImage","dataURL","toDataURL","onerror","src","handleOpen","responseData","_user$user18","fetchAppRev","docName","version","allowed","_user$user19","window","href","warning","alert","_localStorage2","_user$user16","options","option","label","suffix","fetchDepartments","_user$user17","uniqueTitlesSet","Set","reduce","acc","has","add","fetchProjects","_user$user20","users","role","lastName","name","filteredArray","fetchUsers","_Fragment","Modal","centered","onCancel","footer","closeIcon","RiCloseFill","className","Col","span","layout","Item","rules","required","Select","Checkbox","Group","block","navigateToMdrTemplateForUpdate","serializedDepartmentOptions","serializedDepartmentOption","serializedRecord","serializedProjectOptions","serializedSelectedApprover","serializedSelectedReviewer","navigateToMdrTemplate","htmlType","md","danger","handleDelete","assignModalCancel","onFinish","handleSubmit","validateFields","then","values","resetFields","handleUpdateSubmit","setFieldsValue","showModalCancel","doc","index","entries","_ref2","itemIndex","justifyContent","alignItems","docTitle","border","borderRadius","cursor","textAlign","documentModalShow","marginRight","assignModalShow","MdrTemplate","overflowX","Table","columns","sorter","a","b","filters","_","ProgressComp","toFixed","_user$user21","_user$user22","Tooltip","DocumentScannerOutlined","createdAt","updatedAt","formatDate","date","Date","toISOString","header","toUpperCase","workbook","ExcelJS","sheet","addWorksheet","properties","defaultRowHeight","getRow","font","bold","logoBase64","Logo","imageId","addImage","base64","tl","col","row","ext","addRow","assignedBy","assignedFrom","assignedTo","expectedEndedDate","startedDate","smallLogoBase64","smallLogo","footerRow","mergeCells","number","getCell","alignment","horizontal","smallLogoId","cellStart","getColumn","offsetX","offsetY","xlsx","writeBuffer","blob","Blob","URL","createObjectURL","link","download","click","revokeObjectURL","exportToCSV","createModalShow","OpenInFullSharp","showModalShow","Edit","disabled","editModalShow","DeleteOutlined","deleteModalShow","bordered","dataSource","rowClassName","selectedRecord"],"sourceRoot":""}