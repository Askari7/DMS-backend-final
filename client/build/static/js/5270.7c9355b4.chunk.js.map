{"version":3,"file":"static/js/5270.7c9355b4.chunk.js","mappings":"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","sources":["view/pages/authentication/login/splashScreen.jsx","view/pages/authentication/login/index.jsx"],"sourcesContent":["import React from 'react';\r\nimport { Row, Col } from 'antd';\r\nimport novacon from \"../../../../assets/images/logo/novacon.jpg\";\r\n\r\nconst SplashScreen = () => {\r\n  return (\r\n    <Row\r\n      style={{\r\n        height: '100vh',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        textAlign: 'center',\r\n        backgroundColor: 'white', // Background color\r\n      }}\r\n    >\r\n      <Col>\r\n        {/* Your logo and tagline */}\r\n        <img \r\n          src={novacon} \r\n          alt=\"Logo\" \r\n          style={{\r\n            width: '180px',\r\n            margin:\"18px\", \r\n            height: 'auto', \r\n            animation: 'scaleAnimation 1s infinite alternate', // Animation effect\r\n            cursor: 'pointer' // Optional: Change cursor to indicate interactivity\r\n          }} \r\n        />\r\n        <h1 style={{ marginTop: '16px', color: '#333',fontSize:\"64px\" }}>Project Prosperity, Simplified.</h1>\r\n      </Col>\r\n      <style>\r\n        {`\r\n          @keyframes scaleAnimation {\r\n            from {\r\n              transform: scale(0.9);\r\n            }\r\n            to {\r\n              transform: scale(1.25);\r\n            }\r\n          }\r\n        `}\r\n      </style>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default SplashScreen;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport SplashScreen from \"./splashScreen\";\r\nimport { Row, Col, Form, Input, Button, Checkbox, message, Spin } from \"antd\";\r\nimport axios from \"axios\";\r\nimport LeftContent from \"../leftContent\";\r\nimport Footer from \"../footer\";\r\nimport { loginUser } from \"../../../../redux/auth/authActions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nexport default function Login() {\r\n  const dispatch = useDispatch();\r\n  const auth = useSelector((state) => state);\r\n  console.log(auth);\r\n  const [form] = Form.useForm();\r\n  const history = useHistory();\r\n\r\n  const loading = useSelector((state) => state.auth.loading);\r\n  const isLoggedIn = useSelector((state) => state.auth.isLoggedIn);\r\n  const [showSplashScreen, setShowSplashScreen] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (isLoggedIn) {\r\n      history.push(\"/\");\r\n    }\r\n  }, [isLoggedIn,history]);\r\n  useEffect(() => {\r\n    // Hide the splash screen after 3 seconds\r\n    const splashScreenTimeout = setTimeout(() => {\r\n      setShowSplashScreen(false);\r\n    }, 2000);\r\n\r\n    // Cleanup the timeout to avoid memory leaks\r\n    return () => clearTimeout(splashScreenTimeout);\r\n  }, []);\r\n\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const onFinishFailed = () => {\r\n    message.error(\"Submit failed!\");\r\n  };\r\n\r\n  const login = async () => {\r\n    // await dispatch(loginUser({ email, password }));\r\n    try {\r\n      // Make the POST request using Axios with async/await\r\n      const response = await axios.post(\r\n        \"http://54.81.250.98:8083/api/auth/signin\",\r\n        {\r\n          email,\r\n          password,\r\n        }\r\n      );\r\n\r\n      // Handle success, you can access the response data in the 'data' property\r\n      console.log(\"Response:\", response);\r\n\r\n      if (response?.data) {\r\n        console.log(response?.data);\r\n        localStorage.setItem(\"user\", JSON.stringify(response?.data));\r\n        \r\n        message.success(\"Signed In Successfully \");\r\n\r\n        const user = JSON.parse(localStorage?.getItem(\"user\"))\r\n        user?.user.roleId==6? history.push(\"/pages/projects\"):history.push(\"/pages/workspace\")\r\n      }\r\n      // message.success(\"Registered\");\r\n    } catch (error) {\r\n      // Handle error, you can access the error information in the 'response' property\r\n      if (error?.message == \"Request failed with status code 404\") {\r\n        message.error(\"User Not found.\");\r\n      } else if (error?.message == \"Request failed with status code 401\") {\r\n        message.error(\"Invalid Password.\");\r\n      } else {\r\n        message.error(\"Some Error Occured.\");\r\n      }\r\n      console.error(\"Error:\", error?.message);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n    {showSplashScreen ? (\r\n      <SplashScreen />\r\n    ) : (\r\n      <>\r\n    <Row gutter={[6, 0]} className=\"hp-authentication-page\">\r\n      \r\n      <LeftContent />\r\n\r\n      <Col lg={12} span={24} className=\"hp-py-sm-0 hp-py-md-64\">\r\n        <Row className=\"hp-h-100\" align=\"middle\" justify=\"center\">\r\n          <Col\r\n            xxl={11}\r\n            xl={15}\r\n            lg={20}\r\n            md={20}\r\n            sm={24}\r\n            className=\"hp-px-sm-8 hp-pt-24 hp-pb-48\"\r\n          >\r\n            <h1 className=\"hp-mb-sm-0\" style={{textAlign:\"center\",fontWeight:\"bold\"}}>Login</h1>\r\n            <p className=\"hp-mt-sm-0 hp-mt-8 hp-text-color-black-60\" style={{textAlign:\"center\"}}>\r\n              {/* Welcome back, please login to your account.\r\n               */}\r\n              <FormattedMessage id=\"login-welcome-back\" />\r\n            </p>\r\n\r\n            <Form\r\n              layout=\"vertical\"\r\n              name=\"basic\"\r\n              initialValues={{ remember: true }}\r\n              className=\"hp-mt-sm-16 hp-mt-32\"\r\n              onFinish={login}\r\n              form={form}\r\n              onFinishFailed={onFinishFailed}\r\n            >\r\n              <Form.Item\r\n                label=\"Email :\"\r\n                className=\"hp-mb-16\"\r\n                name=\"email\"\r\n                rules={[\r\n                  {\r\n                    type: \"email\",\r\n                    message: \"The input is not valid E-mail!\",\r\n                  },\r\n                  {\r\n                    required: true,\r\n                    message: \"Please input your E-mail!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  id=\"email\"\r\n                  value={email}\r\n                  onChange={(e) => setEmail(e.target.value)}\r\n                />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                label=\"Password :\"\r\n                className=\"hp-mb-8\"\r\n                name=\"password\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                  },\r\n                ]}\r\n              >\r\n                <Input.Password\r\n                  id=\"password\"\r\n                  value={password}\r\n                  onChange={(e) => setPassword(e.target.value)}\r\n                />\r\n              </Form.Item>\r\n\r\n              <Row align=\"middle\" justify=\"space-between\">\r\n                <Form.Item className=\"hp-mb-0\">\r\n                  <Checkbox name=\"remember\">\r\n                    <FormattedMessage id=\"remember-me\" />\r\n                  </Checkbox>\r\n                </Form.Item>\r\n\r\n                <Link\r\n                  className=\"hp-button hp-text-color-black-80 hp-text-color-dark-40\"\r\n                  to=\"/pages/authentication/recover-password\"\r\n                >\r\n                  <FormattedMessage id=\"forgot-password\" />\r\n                </Link>\r\n              </Row>\r\n              {/* {loading && <Spin />} */}\r\n\r\n              <Form.Item className=\"hp-mt-16 hp-mb-8\">\r\n                {/* <Link to=\"/\"> */}\r\n                <Button\r\n                  loading={loading}\r\n                  block\r\n                  type=\"primary\"\r\n                  htmlType=\"submit\"\r\n                >\r\n                  Sign in\r\n                </Button>\r\n                {/* </Link> */}\r\n              </Form.Item>\r\n            </Form>\r\n\r\n            <Col className=\"hp-form-info hp-text-center\">\r\n              <span className=\"hp-text-color-black-80 hp-text-color-dark-40 hp-caption hp-font-weight-400 hp-mr-4\">\r\n                {/* Don’t you have an account? */}\r\n                <FormattedMessage id=\"login-have-account\" />\r\n              </span>\r\n\r\n              <Link\r\n                className=\"hp-text-color-primary-1 hp-text-color-dark-primary-2 hp-caption\"\r\n                to=\"/pages/authentication/register\"\r\n              >\r\n                {/* Create an account */}\r\n                <FormattedMessage id=\"create-an-account\" />\r\n              </Link>\r\n            </Col>\r\n\r\n            <Footer />\r\n          </Col>\r\n        </Row>\r\n      </Col>\r\n      \r\n    </Row></>)}\r\n    </>\r\n  );\r\n}\r\n"],"names":["SplashScreen","_jsxs","Row","style","height","display","justifyContent","alignItems","textAlign","backgroundColor","children","Col","_jsx","src","novacon","alt","width","margin","animation","cursor","marginTop","color","fontSize","Login","useDispatch","auth","useSelector","state","console","log","form","Form","useForm","history","useHistory","loading","isLoggedIn","showSplashScreen","setShowSplashScreen","useState","useEffect","push","splashScreenTimeout","setTimeout","clearTimeout","email","setEmail","password","setPassword","_Fragment","gutter","className","LeftContent","lg","span","align","justify","xxl","xl","md","sm","fontWeight","FormattedMessage","id","layout","name","initialValues","remember","onFinish","async","response","axios","data","_localStorage","localStorage","setItem","JSON","stringify","message","success","user","parse","getItem","roleId","error","onFinishFailed","Item","label","rules","type","required","Input","value","onChange","e","target","Password","Checkbox","Link","to","Button","block","htmlType","Footer"],"sourceRoot":""}